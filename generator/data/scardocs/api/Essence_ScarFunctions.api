# GENERATED BY WSCITE_API.XSL   DO NOT EDIT BY HAND!
__Internal_Game_Autosave(  ) RETURNS:  =>DO NOT call this function directly, use Event_Save(STT_Auto) instead
__Internal_Game_Quicksave(  ) RETURNS:  =>DO NOT call this function directly, use Event_Save(STT_Quick) instead
__Internal_Game_SaveGame(  ) RETURNS:  =>DO NOT call this function directly, use Event_SaveWithName(STT_Standard) instead
__Internal_Game_SaveToFileDev(  ) RETURNS:  =>DO NOT call this function directly, use Event_SaveWithName(STT_Dev) instead
0( Void AIPlayer_SetMarkerToUpdateCachedPathToHQ(Player, MarkerID marker, Real pathCheckIntervalSecs ) RETURNS:  =>Setup a cached path that periodically updates its path between specified marker and self HQ. This allows the AI to detect whenever pathability is changed to this marker (e.g. being walled off).
0( Void AIPlayer_SetMarkerToUpdateCachedPathToPosition(Player, MarkerID toMarker, Position fromPosition, Real pathCheckIntervalSecs ) RETURNS:  =>Setup a cached path that periodically updates its path between specified marker and position. This allows the AI to detect whenever pathability is changed to between the marker and position (e.g. being walled off).
ActionMarker_SetVisible( String name, Boolean visible ) RETURNS:  =>Set whether or not an action marker is visible.
ActionMarker_StartAction( String name ) RETURNS:  =>Start the given action marker's FX.
ActionMarker_StopAction( String name ) RETURNS:  =>Stop the given action marker's FX.
AI_AddHeavyCoverEbpOccupancyOverride( PlayerID pPlayer, ScarEntityPBG ebp, Integer occupancyOverride ) RETURNS:  =>overrides the Heavy Cover Occupancy for the passed EBP
AI_AddPrefab( PlayerID player, String name, String behaviourName, Real radius, Integer minDifficulty, Integer maxDifficulty, Boolean canReassign, Boolean active ) RETURNS:  =>Adds a prefab to the AIPrefab system. Target must be set up in a follow up call with returned ID
AI_CacheCombatFeatureTrainingData( Integer conflictID, PlayerID playerA, PlayerID playerB ) RETURNS:  =>Log the combat result features of all squads owned by a player for a given conflict
AI_CalculateCombatFitnessEstimate( SGroupID teamASquads, EGroupID teamAEntities, PropertyBagGroup teamAPBGs, SGroupID teamBSquads, EGroupID teamBEntities, PropertyBagGroup teamBPBGs, PlayerID aiPlayerA, PlayerID playerB, Boolean playerAIsAttacker ) RETURNS:  =>Get combat fitness estimate. Return value will be between 1.0 and 0.0. 1.0 means teamA wins outright, 0.0 means teamB wins outright.
AI_CanEntityCauseSuppression( PlayerID aiPlayer, EntityID entity ) RETURNS:  =>Checks if this entity can cause suppression
AI_CanLoadSquadAndAttackCurrentTarget( EntityID entity, SquadID squad, Boolean bCheckSquadState, Boolean bOverload ) RETURNS:  =>Check if the entity can load squad and shoot its target after loading (This function should only be called by AI)
AI_CanSquadCauseSuppression( PlayerID aiPlayer, SquadID pSquad ) RETURNS:  =>Checks if this squad can cause suppression
AI_CanSquadDecrew( SquadID pDriverSquad, EntityID pDecrewTargetEntity ) RETURNS:  =>Checks if this squad can decrew the entity
AI_ClearCombatTrainingCacheEntry( Integer conflictID ) RETURNS:  =>Clear a combat entry from the cache, typically done instead of logging it
AI_ClearPBGRepairPriority( PlayerID pPlayer, String pbgShortname ) RETURNS:  =>This clears the repair priority value for a given squad or building PBG.
AI_ClearPrefabAIIntents( UniqueID prefabId, PlayerID player ) RETURNS:  =>Clear all intents associated with this AIPrefab
AI_CombatFitnessCharacterizesSquad( PlayerID player, PropertyBagGroup squadPBG ) RETURNS:  =>Returns true if the configured input feature calculators characterizes this squad
AI_CombatFitnessGetDefensiveUpgradesForStructureArchetypeMember( PropertyBagGroup memberPBG ) RETURNS:  =>Returns the defensive upgrades for this structure archetype member
AI_CombatFitnessGetHealerPBGs(  ) RETURNS:  =>Returns healer feature option pbgs
AI_CombatFitnessGetOffensiveUpgradesForStructureArchetypeMember( PropertyBagGroup memberPBG ) RETURNS:  =>Returns the offensive upgrades for this structure archetype member
AI_CombatFitnessGetPlayerUpgrades(  ) RETURNS:  =>Returns the player upgrades configured in the player upgrade input calculator
AI_CombatFitnessGetSquadArchetypeNames(  ) RETURNS:  =>Returns squad pbgs for all squad archetypes
AI_CombatFitnessGetSquadArchetypePBGs( String archtypeNameStr ) RETURNS:  =>Returns squad pbgs for a given archetype (assuming that archetype is composed of squad pbgs)
AI_CombatFitnessGetStructureArchetypePBGs( String archtypeNameStr ) RETURNS:  =>Returns entity pbgs for a given archetype (assuming that archetype is composed of entity pbgs)
AI_ConvertToSimEntity( EntityID pAIEntity ) RETURNS:  =>Converts an AIEntity into an Entity
AI_ConvertToSimPlayer( PlayerID pAIPlayer ) RETURNS:  =>Converts an AIPlayer into a Player
AI_ConvertToSimSquad( SquadID pAISquad ) RETURNS:  =>Converts an AISquad into a Squad
AI_CreateAICombatFitnessLogs(  ) RETURNS:  =>Create the combat feature logs in the game log directory
AI_CreateEncounter( PlayerID pPlayer, Integer encounterType ) RETURNS:  =>Create a new encounter for player
AI_DebugAttackEncounterPositionScoringEnable( Boolean enable ) RETURNS:  =>Enables/disables debugging of AI Attack Encounter Encounter Position Scoring
AI_DebugAttackEncounterPositionScoringIsEnabled(  ) RETURNS:  =>Returns true if AI Attack Encounter Position Scoring is enabled
AI_DebugLogGroupCombatRatings( SGroupID sgroup, EGroupID egroup, PlayerID player ) RETURNS:  =>Prints detailed rating debug info in the AILog for all squads and entities in the groups
AI_DebugLogPBGCombatRatings( PropertyBagGroup pbgList, PlayerID player ) RETURNS:  =>Prints detailed rating debug info in the AILog for all the PBGs in the list
AI_DebugLuaEnable( Boolean enable ) RETURNS:  =>Enables/disables AI Lua Debugging
AI_DebugLuaIsEnabled(  ) RETURNS:  =>Returns true if AI Lua Debugging is enabled
AI_DebugRatingEnable( Boolean enable ) RETURNS:  =>Enables/disables AI Construction Debugging
AI_DebugRatingIsEnabled(  ) RETURNS:  =>Returns true if AI Construction Debugging is enabled
AI_DebugRenderAllTaskChildrenEnable( Boolean enable ) RETURNS:  =>Enables/disables AI Rendering of All Task Children
AI_DebugRenderAllTaskChildrenIsEnabled(  ) RETURNS:  =>Returns true if AI Rendering of All Task Children is enabled
AI_DebugSkirmishForwardDeployEnable( Boolean enable ) RETURNS:  =>Enables/disables AI Skirmish ForwardDeploy Debugging
AI_DebugSkirmishForwardDeployIsEnabled(  ) RETURNS:  =>Returns true if AI Skirmish ForwardDeploy Debugging is enabled
AI_DisableAllEconomyOverrides( PlayerID pPlayer ) RETURNS:  =>Disable all of the economy overrides for the AI player
AI_DoString( Integer playerID, String string ) RETURNS:  =>Execute a string as lua in the given player's AI LuaConfig
AI_Enable( PlayerID pPlayer, Boolean enable ) RETURNS:  =>Enables or Disables an AI player
AI_EnableAll( Boolean enable ) RETURNS:  =>Enables or Disables all AI players
AI_EnableEconomyOverride( PlayerID pPlayer, String overrideName, Boolean enable ) RETURNS:  =>Enable or disable the economy override for the AI player
AI_FindAISquadByID( PlayerID pPlayer, Integer UID ) RETURNS:  =>Finds an AISquad owned by the specified player
AI_FindBestProducibleEntityPBGforEntityTypes( PlayerID player, String entityTypeNames ) RETURNS:  =>Find the current best producible Entity PBG corresponding to the specified Entity Types.
AI_FindBestProducibleSquadPBGforSquadTypes( PlayerID player, String squadTypeNames ) RETURNS:  =>Find the current best producible Squad PBG corresponding to the specified Squad Types.
AI_FindClosestOpenPositionForAbility( ConstTargetHandle caster, PropertyBagGroup pAbilityPBG, Position posIn ) RETURNS:  =>Find the closest open position from a given position for a given ability blueprint
AI_FindClosestOpenPositionForAbilityWithinRange( ConstTargetHandle caster, PropertyBagGroup pAbilityPBG, Position posIn, Integer minDist, Integer maxDist ) RETURNS:  =>Find the closest open position from a given position and ability blueprint, taking into account a min
AI_FindClosestOpenPositionForStructure( PlayerID aiPlayer, PropertyBagGroup pEntityPBG, Position posIn ) RETURNS:  =>Find the closest open position from a given position for a given Entity blueprint
AI_FindConstructionLocation( PlayerID pPlayer, PropertyBagGroup pPbg, Position position ) RETURNS:  =>Find a valid construction location for a pbg, using a spiral search. Returns INVALID_POS if it fails.
AI_GetAbilityMaxNumTargets( ScarAbilityPBG ability ) RETURNS:  =>Returns the maximum number of targets for the given ability, or -1 if the ability is invalid.
AI_GetAllMilitaryPointsOfType( PlayerID pAIPlayer, AIMilitaryTargetType type, EGroupID egroup ) RETURNS:  =>Stores entities of a specific type owned by a player in an egroup parameter
AI_GetAndReserveNextTaskID( PlayerID player ) RETURNS:  =>Get and reserve the next available AITaskID (which can be used to create an AIEncounter from SCAR).
AI_GetAnySquadCombatTarget( SquadID pSquad ) RETURNS:  =>Returns the current squad target for the given squad (null if no target, or target is non-squad entity)
AI_GetDebugAIPlayerID(  ) RETURNS:  =>Get current AI player ID
AI_GetDifficulty( PlayerID pPlayer ) RETURNS:  =>Gets the difficulty level of this AI player
AI_GetPersonality( PlayerID pPlayer ) RETURNS:  =>Get the personality name of this AI player
AI_GetPersonalityLuaFileName( PlayerID pPlayer ) RETURNS:  =>Get the personality lua file name of this AI player
AI_IsAIPlayer( PlayerID pPlayer ) RETURNS:  =>Returns true if player is an AI player
AI_IsAITargetable( PlayerID pPlayer ) RETURNS:  =>Returns true if player is an AIPlayer and is targetable by other AI players.
AI_IsDebugDisplay( PlayerID pPlayer ) RETURNS:  =>Checks if the AI debug display is enabled
AI_IsEnabled( PlayerID pPlayer ) RETURNS:  =>Returns true if player is a AIPlayer and is enabled
AI_IsLocalAIPlayer( PlayerID pPlayer ) RETURNS:  =>Returns true if the player is an AIPlayer running on the local machine
AI_IsPositionNearInSupplySector( PlayerID aiPlayer, Position position ) RETURNS:  =>Returns true when position in a sector that is adjacent to an in-supply sector
AI_IsSquadValid( SquadID pSquadAI ) RETURNS:  =>Checks if this is a valid AISquad
AI_LockEntity( PlayerID pPlayer, EntityID pEntity ) RETURNS:  =>Locks the entity and disables its tactics (if any) and the AI will no longer use this object
AI_LockSquad( PlayerID pPlayer, SquadID pSquad ) RETURNS:  =>Locks the squad and disables its tactics (if any) and the AI will no longer use this object
AI_LockSquads( PlayerID pPlayer, SGroupID squads ) RETURNS:  =>Locks the squads and disables its tactics (if any) and the AI will no longer use these objects
AI_LogCombatTrainingData( Integer conflictID, PlayerID playerA, PlayerID playerB, Real score ) RETURNS:  =>Log the combat input features of all squads owned by two players for a given conflict
AI_PauseCurrentTasks( PlayerID pPlayer, Boolean pause ) RETURNS:  =>Pauses or unpauses currently running tasks
AI_PlayerAddExclusionArea( PlayerID pPlayer, Position position, Real noPathRadius, Real noTargetRadius ) RETURNS:  =>Add an Exclusion area to the AI Player
AI_PlayerDataDictionarySetBool( PlayerID player, String varName, Boolean value ) RETURNS:  =>Set a named bool value in the AIPlayer DataDictionary
AI_PlayerDataDictionarySetNumber( PlayerID player, String varName, Real value ) RETURNS:  =>Set a named number value in the AIPlayer DataDictionary
AI_PlayerDataDictionarySetPBG( PlayerID player, String varName, PropertyBagGroup value ) RETURNS:  =>Set a named PBG value in the AIPlayer DataDictionary
AI_PlayerRemoveExclusionArea( PlayerID pPlayer, Position position, Real noPathRadius, Real noTargetRadius ) RETURNS:  =>Remove the Exclusion area from the AI Player
AI_PushPrefabAIIntent( UniqueID prefabId, PlayerID player, String aiPrefabIntentBagName ) RETURNS:  =>Push an ai intent to an existing AIPrefab. Requires an ai_prefab_intent pbg name
AI_RemoveCapturePointHighPriority( PlayerID pPlayer, EntityID pEntity ) RETURNS:  =>This clears the importance bonus on this capture point
AI_RestartSCAR( PlayerID pPlayer ) RETURNS:  =>Restarts the AI
AI_RestoreDefaultPersonalitySettings( PlayerID pPlayer ) RETURNS:  =>Restores the default personality and difficulty settings of this AI player
AI_SetAISquadCombatRangePolicyTaskOverride( SquadID pSquadAI, CombatRangePolicy policy ) RETURNS:  =>Set Combat Range Policy for the AISquad, overrides the one set at Encounter/task level
AI_SetAITargetable( PlayerID pPlayer, Boolean targetable ) RETURNS:  =>Enables or Disables an AI player to be targetable by other AI players.
AI_SetCapturePointAsHighPriority( PlayerID pPlayer, EntityID pEntity ) RETURNS:  =>This sets importance bonus of the given capture point
AI_SetDebugDisplay( PlayerID pPlayer, Boolean enable ) RETURNS:  =>Enable or disable the AI debug display
AI_SetDifficulty( PlayerID pPlayer, Integer difficultyLevel ) RETURNS:  =>Set the difficulty level of this AI player
AI_SetPBGRepairPriority( PlayerID pPlayer, String pbgShortname, Real priorityValue ) RETURNS:  =>This sets the repair priority value for a given squad or building PBG.
AI_SetPersonality( PlayerID pPlayer, String personalityName ) RETURNS:  =>Set the personality name of this AI player
AI_SetPrefabActive( UniqueID prefabId, PlayerID player, Boolean active ) RETURNS:  =>Set the active status of an existing AIPrefab
AI_SetPrefabCanReassign( UniqueID prefabId, PlayerID player, Boolean canReassign ) RETURNS:  =>Set the can_reassign state of an existing AIPrefab
AI_SetPrefabSelection_SGroup( UniqueID prefabId, PlayerID player, SGroupID squads ) RETURNS:  =>Set the squad selection of an existing AIPrefab by SGROUP
AI_SetPrefabTarget_EGroup( UniqueID prefabId, PlayerID player, EGroupID entities ) RETURNS:  =>Set the target of an existing AIPrefab by EGROUP
AI_SetPrefabTarget_Position( UniqueID prefabId, PlayerID player, Position position ) RETURNS:  =>Set the target of an existing AIPrefab by Position
AI_SetPrefabTarget_SGroup( UniqueID prefabId, PlayerID player, SGroupID squads ) RETURNS:  =>Set the target of an existing AIPrefab by SGROUP
AI_SetPrefabTarget_Waypoints( UniqueID prefabId, PlayerID player, String waypointName ) RETURNS:  =>Set the target of an existing AIPrefab via waypoints
AI_SetResourceIncomeDesire( PlayerID player, Integer resourceType, Real desiredIncome ) RETURNS:  =>Set an AI Player's desired income of specified resource type at specified value. This will affect the AI resource gathering, building construction and production priority in trying to achieve the specified resource income.
AI_SquadDataDictionaryClearSquad( SquadID squad, String varName ) RETURNS:  =>Clear a named Squad in the AISquad DataDictionary
AI_SquadDataDictionaryGetBool( SquadID squad, String varName ) RETURNS:  =>Get a named bool value in the AISquad DataDictionary, returns false if the value doesn't exist
AI_SquadDataDictionaryGetNumber( SquadID squad, String varName ) RETURNS:  =>Get a named number value in the AISquad DataDictionary, returns 0 if the value doesn't exist
AI_SquadDataDictionaryGetSquad( SquadID squad, String varName ) RETURNS:  =>Get a named Squad in the AISquad DataDictionary, returns null if the entry doesn't exist
AI_SquadDataDictionarySetBool( SquadID squad, String varName, Boolean value ) RETURNS:  =>Set a named bool value in the AISquad DataDictionary
AI_SquadDataDictionarySetNumber( SquadID squad, String varName, Real value ) RETURNS:  =>Set a named number value in the AISquad DataDictionary
AI_SquadDataDictionarySetPBG( SquadID squad, String varName, PropertyBagGroup value ) RETURNS:  =>Set a named PBG value in the AISquad DataDictionary
AI_SquadDataDictionarySetSquad( SquadID squad, String varName, SquadID targetSquad ) RETURNS:  =>Set a named Squad in the AISquad DataDictionary
AI_ToggleDebugAIPlayer(  ) RETURNS:  =>Set current debug AI player to the next AI player
AI_ToggleDebugDisplay( PlayerID pPlayer ) RETURNS:  =>Toggles the AI debug display
AI_UnlockAll( PlayerID pPlayer ) RETURNS:  =>Unlocks all designer locked squads for player
AI_UnlockEntity( PlayerID pPlayer, EntityID pEntity ) RETURNS:  =>Unlocks this entity so that AI can use it again
AI_UnlockSquad( PlayerID pPlayer, SquadID pSquad ) RETURNS:  =>Unlocks the given squad so the AI can use it again
AI_UnlockSquads( PlayerID pPlayer, SGroupID squads ) RETURNS:  =>Locks the squads and disables its tactics (if any) and the AI will no longer use these objects
AI_UpdateStatics( PlayerID pPlayer ) RETURNS:  =>Re-updates the AI in regards to all the static objects in the world (if SCAR creates new strategic points dynamically this will need to be called)
AIAbilityEncounter_AbilityGuidance_SetAbilityPBG( AIEncounterID pEncounter, PropertyBagGroup abilityPBG ) RETURNS:  =>Set ability for ability encounter
AIEncounter_Cancel( AIEncounterID pEncounter ) RETURNS:  =>Ends the encounter and deletes it.
AIEncounter_CombatGuidance_AddForcedCombatTargetEGroup( AIEncounterID pEncounter, EGroupID egroup ) RETURNS:  =>add the EGroup to the Encounter forced target list. NOTE: supported only by the Attack Encounter
AIEncounter_CombatGuidance_AddForcedCombatTargetEntity( AIEncounterID pEncounter, EntityID pEntity ) RETURNS:  =>add the Entity to the Encounter forced target list. NOTE: supported only by the Attack Encounter
AIEncounter_CombatGuidance_AddForcedCombatTargetSGroup( AIEncounterID pEncounter, SGroupID sgroup ) RETURNS:  =>add the SGroup to the Encounter forced target list. NOTE: supported only by the Attack Encounter
AIEncounter_CombatGuidance_AddForcedCombatTargetSquad( AIEncounterID pEncounter, SquadID pSquad ) RETURNS:  =>add the Squad to the Encounter forced target list. NOTE: supported only by the Attack Encounter
AIEncounter_CombatGuidance_ClearForcedCombatTargets( AIEncounterID pEncounter ) RETURNS:  =>Clear the encounter Forced Combat Targets
AIEncounter_CombatGuidance_EnableCombatGarrison( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enables/disables squads in combat garrisoning.
AIEncounter_CombatGuidance_RemoveForcedCombatTargetEGroup( AIEncounterID pEncounter, EGroupID egroup ) RETURNS:  =>remove the EGroup from the Encounter forced target list. NOTE: supported only by the Attack Encounter
AIEncounter_CombatGuidance_RemoveForcedCombatTargetEntity( AIEncounterID pEncounter, EntityID pEntity ) RETURNS:  =>remove the Entity from the Encounter forced target list. NOTE: supported only by the Attack Encounter
AIEncounter_CombatGuidance_RemoveForcedCombatTargetSGroup( AIEncounterID pEncounter, SGroupID sgroup ) RETURNS:  =>remove the SGroup from the Encounter forced target list. NOTE: supported only by the Attack Encounter
AIEncounter_CombatGuidance_RemoveForcedCombatTargetSquad( AIEncounterID pEncounter, SquadID pSquad ) RETURNS:  =>remove the Squad from the Encounter forced target list. NOTE: supported only by the Attack Encounter
AIEncounter_CombatGuidance_SetCombatRangePolicy( AIEncounterID pEncounter, CombatRangePolicy policy ) RETURNS:  =>Set Combat Range Policy for the encounter
AIEncounter_CombatGuidance_SetSpreadAttackers( AIEncounterID pEncounter, Boolean value ) RETURNS:  =>Set if the Attack Encounter should spread the attackers on multiple targets
AIEncounter_DataDictionarySetBool( AIEncounterID pEncounter, String varName, Boolean value ) RETURNS:  =>Set a named bool value in the Encounter DataDictionary
AIEncounter_DataDictionarySetNumber( AIEncounterID pEncounter, String varName, Real value ) RETURNS:  =>Set a named number value in the Encounter DataDictionary
AIEncounter_DataDictionarySetPBG( AIEncounterID pEncounter, String varName, PropertyBagGroup value ) RETURNS:  =>Set a named PBG value in the Encounter DataDictionary
AIEncounter_DefenseGuidance_EnableIdleGarrison( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enables/disables idle squads garrisoning.
AIEncounter_EngagementGuidance_AddEncouterSetupLocation( AIEncounterID pEncounter, Position pos, Position facingDir ) RETURNS:  =>Adds a setup location and facing direction for this encounter not specifically assigned to any squad
AIEncounter_EngagementGuidance_ClearSetupLocationOverrides( AIEncounterID pEncounter ) RETURNS:  =>clears the encounter setup locations
AIEncounter_EngagementGuidance_EnableAggressiveEngagementMove( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enable / disable aggressive move into engagement area
AIEncounter_EngagementGuidance_EnableConstruction( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enable construction in Town Life encounters
AIEncounter_EngagementGuidance_EnableSetupLocations( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enable setup locations in attack and defend encounters
AIEncounter_EngagementGuidance_SetAllowResourceGatheringOutsideLeash( AIEncounterID pEncounter, Boolean allowOutsideLeash ) RETURNS:  =>Sets a TownLife Encounter whether to allow resource gathering from deposits outside of Encounter leash.
AIEncounter_EngagementGuidance_SetAllowReturnToPreviousStages( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enable encounter to return to previous stages if they fail to meet conditions for current stage.
AIEncounter_EngagementGuidance_SetCoordinatedSetup( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enable coordinated arrival in attack encounters
AIEncounter_EngagementGuidance_SetEnableSniperReactions( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enables/disables sniper reactions
AIEncounter_EngagementGuidance_SetEnableSubEngagementAreas( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enables/disables SubEngagementAreas
AIEncounter_EngagementGuidance_SetMaxEngagementTime( AIEncounterID pEncounter, Real seconds ) RETURNS:  =>Sets max time, in seconds, to accomplish encounter, once the target is engaged.
AIEncounter_EngagementGuidance_SetMaxIdleTime( AIEncounterID pEncounter, Real seconds ) RETURNS:  =>Sets max time, in seconds, to remain idle at encounter target, once engaged.
AIEncounter_EngagementGuidance_SetSetupLocationSbpPriority( AIEncounterID pEncounter, ScarSquadPBG sbp, Real priority ) RETURNS:  =>set the sbp setup location priority override
AIEncounter_EngagementGuidance_SetSquadSetupLocation( AIEncounterID pEncounter, SquadID pSquad, Position pos, Position facingDir ) RETURNS:  =>set the squad setup location and facing direction
AIEncounter_FallbackGuidance_EnableReinforceDuringCombat( AIEncounterID pEncounter, Boolean value ) RETURNS:  =>Enable/Disable Reinforce during combat
AIEncounter_FallbackGuidance_EnableRetreatOnPinned( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enable retreat to break pinned.
AIEncounter_FallbackGuidance_EnableRetreatOnSuppression( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enable retreat to break suppression.
AIEncounter_FallbackGuidance_SetEntitiesRemainingThreshold( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set entities remaining threshold of encounter [-1 to N] to fallback at. (negative disables)
AIEncounter_FallbackGuidance_SetFallbackCapacityPercentage( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set capacity threshold [-1 to 1] to fallback at. (negative disables)
AIEncounter_FallbackGuidance_SetFallbackCombatRating( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set combat rating threshold of area [0.0 to 1.0] to fallback at. (0.0 disables)
AIEncounter_FallbackGuidance_SetFallbackSquadHealthPercentage( AIEncounterID pEncounter, Real fallbackStartValue, Real fallbackEndValue ) RETURNS:  =>Set Squad health threshold [-1 to 1] to fallback at. (negative disables)
AIEncounter_FallbackGuidance_SetFallbackSquadShieldPercentage( AIEncounterID pEncounter, Real fallbackStartValue, Real fallbackEndValue ) RETURNS:  =>Set Squad Shield threshold [-1 to 1] to fallback at. (negative disables)
AIEncounter_FallbackGuidance_SetFallbackVehicleHealthPercentage( AIEncounterID pEncounter, Real fallbackStartValue, Real fallbackEndValue ) RETURNS:  =>Set Vehicle health threshold [-1 to 1] to fallback at. (negative disables)
AIEncounter_FallbackGuidance_SetGlobalFallbackPercentage( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set global fallback threshold (negative for individual squad).
AIEncounter_FallbackGuidance_SetGlobalFallbackRetreat( AIEncounterID pEncounter, Boolean value ) RETURNS:  =>Set global retreat type (true for retreat; false for fallback).
AIEncounter_FallbackGuidance_SetReinforceHealthPercentage( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set the Reinforce Health Percentage [-1 to 1] (negative disables retreat)
AIEncounter_FallbackGuidance_SetReinforceMaxDistance( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set the Max Reinforce Distance (negative value: no distance constrain)
AIEncounter_FallbackGuidance_SetReinforceMinHealthRatioToReachReinforcePoint( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set the Min Health Ratio Required To Reach Reinforce Point [0.0, 1.0] (negative value: no constrain)
AIEncounter_FallbackGuidance_SetRetreatCapacityPercentage( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set combat rating threshold of area [-1 to 1] to fallback at. (negative disables)
AIEncounter_FallbackGuidance_SetRetreatCombatRating( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set combat rating threshold of area [0.0 to 1.0] to retreat at. (0.0 disables)
AIEncounter_FallbackGuidance_SetRetreatHealthPercentage( AIEncounterID pEncounter, Real value ) RETURNS:  =>Set retreat health threshold of area [-1 to 1] (negative disables)
AIEncounter_FallbackGuidance_SetTargetPosition( AIEncounterID pEncounter, Position pos ) RETURNS:  =>Set fallback target.
AIEncounter_ForceComplete( AIEncounterID pEncounter ) RETURNS:  =>Asks the encounter to terminate in its next update (allows PhaseEncounter to set its exit info)
AIEncounter_FormationGuidance_SetFormUpAtBuildingOfType( AIEncounterID encounter, String unitTypeList ) RETURNS:  =>Set formup type for formation encounter to be at building of type from AE tuning list (must set before triggering)
AIEncounter_FormationGuidance_SetFormUpAtEntityTarget( AIEncounterID encounter, EntityID entity ) RETURNS:  =>Set formup entity for formation encounter (must set before triggering)
AIEncounter_FormationGuidance_SetFormUpAtPositionTarget( AIEncounterID encounter, Position postion ) RETURNS:  =>Set formup position for formation encounter (must set before triggering)
AIEncounter_FormationGuidance_SetFormUpAtSquadAverage( AIEncounterID encounter ) RETURNS:  =>Set formup position for formation encounter at the average of current squad positions (must set before triggering)
AIEncounter_FormationGuidance_SetFormUpAtTimeOutParams( AIEncounterID encounter, Real timeoutSeconds, Real requiredSquadsPercent ) RETURNS:  =>Set formup position timeout and % squads that must arrive or else it will fail.  Setting zero for timeout means infinite
AIEncounter_FormationPhase_GetEndPosition( AITaskID encounterID ) RETURNS:  =>Get the average position of squads of this finished formation phase encounter (may be the same as target if successful).  You should call AIEncounter_FormationPhase_HasValidExitInfo before this to avoid an error
AIEncounter_FormationPhase_GetEndReason( AITaskID encounterID ) RETURNS:  =>Get the end position of this finished formation phase move encounter (may be the same as target if successful)
AIEncounter_FormationPhase_GetEnemiesAtEnd( AITaskID encounterID, SGroupID enemySquads, EGroupID enemyBuildings ) RETURNS:  =>Get Groups containing the enemies encountered by this formation phase encounter (encounter must have completed) false indicates the exit info was not available for this encounter
AIEncounter_FormationPhase_GetExitCombatFitnessResult( AITaskID encounterID ) RETURNS:  =>Get the combat fitness result for a finished phase encounter, will only be valid for exit states CombatFitnessThreshold or WasAttacked.  -1.0f means invalid.
AIEncounter_FormationPhase_GetSquadsAvailableAtEnd( AITaskID encounterID, SGroupID squadsAvailable, SGroupID squadsUnavailable ) RETURNS:  =>Get SGRoups containing the squads who made it to the destination of a formation phase move encounter and those who didn't (encounter must have completed) false indicates the exit info was not available for this encounter
AIEncounter_FormationPhase_HasValidExitInfo( AITaskID encounterID ) RETURNS:  =>Query if there is valid exit info for this encounter (will only return true for phase encounters)
AIEncounter_FormationPhaseGuidance_SetCombatCoordinator( AIEncounterID encounter, PropertyBagGroup coordinatorPBG ) RETURNS:  =>Assign a property bag contains data to support sub task coordination for combat encounters
AIEncounter_FormationPhaseGuidance_SetCombatExitParams( AIEncounterID encounter, Real timeoutSeconds, Boolean testTargetDestroyed, Boolean testEnemySquadsCleared, Boolean testEnemyBuildingsCleared, Real enemyScanRange, String excludeBuildingTypeNames ) RETURNS:  =>Set params for terminating a formation phase encounter based on combat, fallback params can also be used
AIEncounter_FormationPhaseGuidance_SetMoveEnemiesExitParams( AIEncounterID encounter, Real enemyScanRange, Real combatFitnessThreshold, Real enemyFormationHeading, Real enemyFormationPosition, Real enemyFormationDistance, String excludeBuildingTypeNames ) RETURNS:  =>Set params for terminating a formation phase encounter that is moving somewhere and encounters enemies
AIEncounter_FormationPhaseGuidance_SetMoveExitParams( AIEncounterID encounter, Real timeoutSeconds, Real requiredSquadsPercent, Real wasRecentlyAttackedSecs ) RETURNS:  =>Set params for terminating a formation phase encounter that is moving somewhere
AIEncounter_FormationTaskStateGuidance_MinRange( AIEncounterID encounter, Integer priority, Integer minSquads, Integer maxSquads, Integer maxTasks, Real repositionIntervalSecs, Boolean useTactics, String unitTypeNames, PropertyBagGroup targetPriorityPBG ) RETURNS:  =>Specify data for formation encounter to create a formation min range task state
AIEncounter_FormationTaskStateGuidance_MinRangeWithProtect( AIEncounterID encounter, Integer priority, Integer minSquads, Integer maxSquads, Integer maxTasks, Real repositionIntervalSecs, Boolean useTactics, String unitTypeNames, PropertyBagGroup targetPriorityPBG, Integer protectMinSquads, Integer protectMaxSquads, Real protectProportionSquads, Real protectDistance, Real protectRepositionThreshold, Real protectRepositionIntervalSecs, String protectUnitTypeNames ) RETURNS:  =>Specify data for formation encounter to create a formation min range task state with protect task
AIEncounter_FormationTaskStateGuidance_Move( AIEncounterID encounter, Boolean attackMove, Integer priority, Integer minSquads, Integer maxSquads, Integer maxTasks, String unitTypeNames ) RETURNS:  =>Specify data for formation encounter to create a formation move task state
AIEncounter_FormationTaskStateGuidance_SetupRanged( AIEncounterID encounter, Integer priority, Integer minSquads, Integer maxSquads, Integer maxTasks, String unitTypeNames, PropertyBagGroup targetPriorityPBG ) RETURNS:  =>Specify data for formation encounter to create a formation setup ranged task state
AIEncounter_FormationTaskStateGuidance_SetupRangedWithProtect( AIEncounterID encounter, Integer priority, Integer minSquads, Integer maxSquads, Integer maxTasks, String unitTypeNames, PropertyBagGroup targetPriorityPBG, Integer protectMinSquads, Integer protectMaxSquads, Real protectProportionSquads, Real protectDistance, Real protectRepositionThreshold, Real protectRepositionIntervalSecs, String protectUnitTypeNames ) RETURNS:  =>Specify data for formation encounter to create a formation setup ranged task state and along with a formation of other units to protect it
AIEncounter_FormationTaskStateGuidance_SimpleMelee( AIEncounterID encounter, Integer priority, Integer minSquads, Integer maxSquads, Integer maxTasks, String unitTypeNames, PropertyBagGroup targetPriorityPBG ) RETURNS:  =>Specify data for formation encounter to create a formation simple melee task state
AIEncounter_FormationTaskStateGuidance_TransportMove( AIEncounterID encounter, Integer priority, Integer minSquads, Integer maxSquads, Integer maxTasks, String unitTypeNames, Integer minPassengerSquads, Integer maxPassengerSquadsPerTransport, PropertyBagGroup unloadAbilityPBG, String passengerUnitTypeNames, PropertyBagGroup targetPriorityPBG ) RETURNS:  =>Specify data for formation encounter to create a formation transport move task state
AIEncounter_GetEncounterFromID( PlayerID player, AITaskID taskID ) RETURNS:  =>Returns the encounter pointer from the ID, always test for nil before using...
AIEncounter_IsAIPlayerValid( AIEncounterID pEncounter ) RETURNS:  =>Returns true if enconter has a valid AI player
AIEncounter_IsValid( UniqueID PlayerUniqueID, AITaskID encounterTaskID ) RETURNS:  =>Determines if encounter is still valid.  Must be true before calling any other of the AIEncounter_* function.  Return true if valid, false otherwise.
AIEncounter_LogDebug( PlayerID pPlayer, Integer encounterID, String debugString ) RETURNS:  =>in non RTM builds, if verboseEncounterLogging is enabled, will spew string to AI log file
AIEncounter_MoveGuidance_EnableAggressiveMove( AIEncounterID pEncounter, Boolean enable ) RETURNS:  =>Enable / disable aggressive movements on way to engagement targets
AIEncounter_MoveGuidance_SetSquadCoherenceRadius( AIEncounterID pEncounter, Real radius ) RETURNS:  =>Set radius (follow distance) for coordinated move phase (<= 0 disables coordinated movement)
AIEncounter_Notify_ClearCallbacks( AIEncounterID pEncounter ) RETURNS:  =>Clears all notification callbacks for encounter
AIEncounter_Notify_SetEnableSnipedCallbacks( AIEncounterID pEncounter, Boolean value ) RETURNS:  =>enables/disabled the sniped callback
AIEncounter_Notify_SetPlayerEventEncounterID( AIEncounterID pEncounter, Integer id ) RETURNS:  =>Sets the ID for the notification event sent out by encounter
AIEncounter_Pause( AIEncounterID pEncounter, Boolean bPause ) RETURNS:  =>Pause/Unpause this encounter
AIEncounter_ResourceGuidance_CalculateEstimatedSquadProductionTime( AIEncounterID pEncounter, String pbgShortname, Boolean canAffordNowOnly ) RETURNS:  =>Calculates approximately how long it will take for a specified Encounter to produce a specified squad.
AIEncounter_ResourceGuidance_ClearEntities( AIEncounterID pEncounter ) RETURNS:  =>Removes all resource entities from encounter.
AIEncounter_ResourceGuidance_ClearSquads( AIEncounterID pEncounter ) RETURNS:  =>Removes all resource squads from encounter.
AIEncounter_ResourceGuidance_EntityGroup( AIEncounterID pEncounter, EGroupID entities ) RETURNS:  =>Sets the resource entities for encounter.
AIEncounter_ResourceGuidance_IsSquadGroupEqual( AIEncounterID pEncounter, SGroupID squads ) RETURNS:  =>Checks if a squad group is equal to the resource squads of an encounter.
AIEncounter_ResourceGuidance_SetResourceMoney( AIEncounterID pEncounter, ResourceAmount resourceAmount ) RETURNS:  =>Sets the resource money for an encounter.
AIEncounter_ResourceGuidance_SquadGroup( AIEncounterID pEncounter, SGroupID squads ) RETURNS:  =>Sets the resource squads for encounter.
AIEncounter_SetDebugName( AIEncounterID pEncounter, String name ) RETURNS:  =>Set encounter name for debugging.
AIEncounter_TacticFilter_Reset( AIEncounterID pEncounter ) RETURNS:  =>Reset all tactic filters for encounter
AIEncounter_TacticFilter_ResetAbilityGuidance( AIEncounterID pEncounter ) RETURNS:  =>Reset all tactic ability constraints for encounter
AIEncounter_TacticFilter_ResetAbilityPriority( AIEncounterID pEncounter, PropertyBagGroup abilityPBG ) RETURNS:  =>Reset ability priority for all squads in encounter
AIEncounter_TacticFilter_ResetPriority( AIEncounterID pEncounter, AITacticType tactic ) RETURNS:  =>Reset tactic priority for all squads in encounter
AIEncounter_TacticFilter_ResetTacticGuidance( AIEncounterID pEncounter ) RETURNS:  =>Reset all tactic constraints for encounter
AIEncounter_TacticFilter_ResetTargetGuidance( AIEncounterID pEncounter ) RETURNS:  =>Reset all tactic target constraints for encounter
AIEncounter_TacticFilter_SetAbilityGuidance( AIEncounterID pEncounter, PropertyBagGroup ability, Integer maxCasters, Real retrySecs, Real waitSelfSecs, Real waitEncounterSecs, Real timeoutSecs, Boolean initialWait, Real maxRange, Real castChanceOverride ) RETURNS:  =>Set tactic ability constraints for encounter
AIEncounter_TacticFilter_SetAbilityPriority( AIEncounterID pEncounter, PropertyBagGroup abilityPBG, Real priority ) RETURNS:  =>Set ability priority for all squads in encounter; negative priority disables
AIEncounter_TacticFilter_SetAbilityPriorityForSquad( AIEncounterID pEncounter, SquadID squad, PropertyBagGroup abilityPBG, Real priority ) RETURNS:  =>Set ability priority for squad in encounter
AIEncounter_TacticFilter_SetDefaultAbilityGuidance( AIEncounterID pEncounter, Integer maxCasters, Real retrySecs, Real waitSelfSecs, Real waitEncounterSecs, Real timeoutSecs, Boolean initialWait, Real maxRange, Real castChanceOverride ) RETURNS:  =>Set default tactic ability constraints for encounter (ability specific guidance takes priority over defaults)
AIEncounter_TacticFilter_SetDefaultTacticGuidance( AIEncounterID pEncounter, Integer maxUsers, Real retrySecs, Real waitSecs, Real timeoutSecs, Boolean initialWait, Real maxRange ) RETURNS:  =>Set default tactic constraints for encounter (tactic specific guidance takes priority over defaults)
AIEncounter_TacticFilter_SetPriority( AIEncounterID pEncounter, AITacticType tactic, Real priority ) RETURNS:  =>Set tactic priority for all squads in encounter; negative priority disables
AIEncounter_TacticFilter_SetPriorityForSquad( AIEncounterID pEncounter, SquadID squad, AITacticType tactic, Real priority ) RETURNS:  =>Set tactic priority for squads in encounter
AIEncounter_TacticFilter_SetTacticGuidance( AIEncounterID pEncounter, AITacticType tactic, Integer maxUsers, Real retrySecs, Real waitSecs, Real timeoutSecs, Boolean initialWait, Real maxRange ) RETURNS:  =>Set tactic constraints for encounter
AIEncounter_TacticFilter_SetTargetPolicy( AIEncounterID pEncounter, TargetPreference policy ) RETURNS:  =>Set tactic target priority for encounter
AIEncounter_TargetGuidance_DisableSquadPatrol( AIEncounterID pEncounter, SquadID pSquad ) RETURNS:  =>Disables the patrol for the passed Squad
AIEncounter_TargetGuidance_SetPatrolPathByName( AIEncounterID pEncounter, String pathName, Real delaySecs, Boolean invertPathAtEnd, Boolean startInverted ) RETURNS:  =>Sets target patrol path for encounter
AIEncounter_TargetGuidance_SetPatrolWander( AIEncounterID pEncounter, Real delaySecs, Integer radiusMode, Real radiusOverride, Boolean overrideCenter, Position centerOverride ) RETURNS:  =>Sets random wander target patrol for encounter; delaySecs is the time in secs to pause at each random point
AIEncounter_TargetGuidance_SetSquadPatrolPathByName( AIEncounterID pEncounter, SquadID pSquad, String pathName, Real delaySecs, Boolean invertPathAtEnd, Boolean startInverted ) RETURNS:  =>Sets target patrol path for the squad
AIEncounter_TargetGuidance_SetSquadPatrolWander( AIEncounterID pEncounter, SquadID pSquad, Real delaySecs, Integer radiusMode, Real radiusOverride, Boolean overrideCenter, Position centerOverride ) RETURNS:  =>Sets random wander target patrol for the squad; delaySecs is the time in secs to pause at each random point
AIEncounter_TargetGuidance_SetTargetArea( AIEncounterID pEncounter, Real radius ) RETURNS:  =>Sets engagement area radius around the target.
AIEncounter_TargetGuidance_SetTargetEntity( AIEncounterID pEncounter, EntityID entity ) RETURNS:  =>Sets target Entity for encounter
AIEncounter_TargetGuidance_SetTargetLeash( AIEncounterID pEncounter, Real radius ) RETURNS:  =>Sets leash radius around target where squads should stay within.
AIEncounter_TargetGuidance_SetTargetPosition( AIEncounterID pEncounter, Position pos ) RETURNS:  =>Sets target position for encounter
AIEncounter_TargetGuidance_SetTargetSquad( AIEncounterID pEncounter, SquadID squad ) RETURNS:  =>Sets target Squad for encounter
AIEncounter_Trigger( AIEncounterID pEncounter ) RETURNS:  =>Set encounter name for debugging.
AIPlayer_CachedPathCrossesEnemyTerritory( PlayerID aiPlayer, Integer requestingID, Real minDistToEnemyTerritory, Boolean unused ) RETURNS:  =>Checks if the cached path crosses known enemy territory
AIPlayer_CanAISquadLockTacticItem( EntityID tacticItemEntity, SquadID lockingAISquad ) RETURNS:  =>Checks if the squad can lock the tactic item
AIPlayer_CanSeeEntity( PlayerID aiPlayer, EntityID canSee ) RETURNS:  =>Test if player can see entity
AIPlayer_ClearCachedPath( PlayerID player, Integer requestingID ) RETURNS:  =>Delete the cached path with this ID, please remember to do this
AIPlayer_EnemyTerritoryDetected( PlayerID player ) RETURNS:  =>returns true if enemy territory has been detected
AIPlayer_FindClosestSiegeTarget( PlayerID player, EGroupID eGroup, Integer minSections, Boolean unbreached, Position refPosition ) RETURNS:  =>Tests to see if any entity in the group is part of a wall that matches the supplied conditions eGroup contains list of entities to test, minSections is minimum number of connected wall sections, unbreached means all sections must be unbroken.  Returns closest entity to refPosition
AIPlayer_FindClumpContainingPosition( PlayerID aiPlayer, Position pos, Integer targetFilterFlags ) RETURNS:  =>Find a clump containing the given position, or return -1 if there isn't one.
AIPlayer_GetAnchorPosition( PlayerID aiPlayer ) RETURNS:  =>Returns the anchor build position
AIPlayer_GetBestClumpForPositionIdx( PlayerID pPlayer, Position position, PropertyBagGroup pAbilityPBG, Real minRange, Real maxRange, Integer targetFilterFlags, Integer minNumSquads ) RETURNS:  =>returns a 0-based index of the best clump of enemy squads within the given tolerance to the position passed in
AIPlayer_GetBestClumpForSquadIdx( PlayerID pPlayer, SquadID pSquad, PropertyBagGroup pAbilityPBG, Real minRange, Real maxRange, Integer targetFilterFlags, Integer minNumSquads ) RETURNS:  =>returns a 0-based index of the best clump of enemy squads within the given tolerance to the AI squad
AIPlayer_GetBestClumpIdx( PlayerID pPlayer, Real minRange, Real maxRange, Real clumpSelectionGlobalBestMinRatio, Integer targetFilterFlags, Integer minNumSquads ) RETURNS:  =>returns a 0-based index of the best clump of allied or enemy squads within the given tolerance to the AI player
AIPlayer_GetBestClumpIdxForAbility( PlayerID pPlayer, PropertyBagGroup pAbilityPBG, Real minRange, Real maxRange, Real clumpSelectionGlobalBestMinRatio, Integer targetFilterFlags, Integer minNumSquads ) RETURNS:  =>returns a 0-based index of the best clump of allied or enemy squads within the given tolerance to the AI player
AIPlayer_GetBestOwnedClumpIdx( PlayerID pPlayer, Real minRange, Real maxRange, Real clumpSelectionGlobalBestMinRatio, Integer targetFilterFlags, Integer minNumSquads ) RETURNS:  =>returns a 0-based index of the best clump of owned squads within the given tolerance to the AI player
AIPlayer_GetBestOwnedClumpIdxForAbility( PlayerID pPlayer, PropertyBagGroup pAbilityPBG, Real minRange, Real maxRange, Real clumpSelectionGlobalBestMinRatio, Integer targetFilterFlags, Integer minNumSquads ) RETURNS:  =>returns a 0-based index of the best clump of owned squads within the given tolerance to the AI player
AIPlayer_GetCachedPathLength( PlayerID player, Integer requestingID ) RETURNS:  =>Get the distance of the path requested with the given ID. < 0 means invalid request.
AIPlayer_GetCachedPathPoints( PlayerID player, Integer requestingID ) RETURNS:  =>Return the path points of the calculated path from a previous pathfinding request if the result was successful and the path has at least two points.
AIPlayer_GetCapturePoints( PlayerID aiPlayer, StackVar relationshipEnum, Boolean onlyCanPlaceSecuringStructure, EGroupID egroupOut ) RETURNS:  =>Returns an EGroup containing all capture points on the map owned by a player with the specified
AIPlayer_GetClumpPosition( PlayerID pPlayer, Integer clumpIndex, Integer targetFilterFlags ) RETURNS:  =>Used for tactics; returns a "special error position" on failure that's nowhere inside the world
AIPlayer_GetDistanceToEnemyTerritory( PlayerID player, Position position ) RETURNS:  =>returns how close a position is to enemy territory
AIPlayer_GetDynamicMultiplier( PlayerID aiPlayer, Key tableName ) RETURNS:  =>Calculate product of all multipliers in tableName
AIPlayer_GetDynamicUnitTypeMultipliersForEntity( PlayerID aiPlayer, Entity& targetEntity ) RETURNS:  =>Calculate product of all unit type multipliers that match the entity's unit types
AIPlayer_GetDynamicUnitTypeMultipliersForSquad( PlayerID aiPlayer, Squad& targetSquad ) RETURNS:  =>Calculate product of all unit type multipliers that match a unit type of an entity in the squad
AIPlayer_GetKnownResourceDeposits( PlayerID aiPlayer, String resourceType, Boolean includeDepleted ) RETURNS:  =>Returns a list of all resource deposit entities seen by the AI player
AIPlayer_GetLocal( Integer playerId ) RETURNS:  =>Returns the local AIPlayer given a PlayerId (1000 and up)
AIPlayer_GetLocalFromPlayer( PlayerID pPlayerIn ) RETURNS:  =>Returns the local AIPlayer given a Player pointer
AIPlayer_GetOpponentPlayerAtIndex( PlayerID aiPlayer, Integer index ) RETURNS:  =>Returns the Player at specified index out of all opponent players.  Use in conjunction with `AIPlayer_GetOpponentPlayerCount`.
AIPlayer_GetOpponentPlayerCount( PlayerID aiPlayer ) RETURNS:  =>Returns the number of opponent Players to the specified AIPlayer.
AIPlayer_GetOrCreateHomebase( PlayerID aiPlayer, Position targetPosition ) RETURNS:  =>Get a homebase at the given position. If one doesn't exist it will be created.
AIPlayer_GetOwnedClumpPosition( PlayerID pPlayer, Integer clumpIndex ) RETURNS:  =>Used for tactics; returns a "special error position" on failure that's nowhere inside the world
AIPlayer_GetOwnedMilitaryPointEntitiesInRange( EntityPBG militaryPointPBG, Position position, Number range ) RETURNS:  =>Returns an EGroup listing all military points owned by a player within a certain range of the position passed in that match a certain type
AIPlayer_GetPositionsOfMilitaryPointsWithRelation( PlayerID aiPlayer, StackVar relationshipEnum ) RETURNS:  =>Returns all positions of military points allied with a player
AIPlayer_GetSquadPBGProductionUtility( PlayerID aiPlayer, ScarSquadPBG squadPBG ) RETURNS:  =>Returns the utility of building the squad specified by the PBG, or 0 if not found
AIPlayer_GetStateModelAISquadListEntries( PlayerID aiPlayer, String key ) RETURNS:  =>Returns a table of squad ids from the AIPlayer's state model corresponding to the given key.
AIPlayer_GetStateModelBool( PlayerID aiPlayer, String key ) RETURNS:  =>Returns a boolean value from the AIPlayer's state model corresponding to the given key.
AIPlayer_GetStateModelFloat( PlayerID aiPlayer, String key ) RETURNS:  =>Returns a float value from the AIPlayer's state model corresponding to the given key.
AIPlayer_GetStateModelInt( PlayerID aiPlayer, String key ) RETURNS:  =>Returns an integer value from the AIPlayer's state model corresponding to the given key.
AIPlayer_GetStateModelPBG( PlayerID aiPlayer, String key ) RETURNS:  =>Returns a PropertyBagGroup value from the AIPlayer's state model corresponding to the given key.
AIPlayer_GetStateModelTargetListEntries( PlayerID aiPlayer, String key ) RETURNS:  =>Returns a table of targets from the AIPlayer's state model corresponding to the given key.
AIPlayer_IsDamagedStructureOnPathToTarget( PlayerID aiPlayer, SquadID squad, PropertyBagGroup structurePbg, Real damagePercentage, Real searchRadius, Position targetPosition ) RETURNS:  =>Has path to target passes through a netural damaged structure
AIPlayer_IsOnAnIsland(  ) RETURNS:  =>Returns whether the player is on an island (naval map) or not
AIPlayer_IsPathProcessed( PlayerID aiPlayer, Integer requestedPathRequestID ) RETURNS:  =>Has the requested path been processed
AIPlayer_IsPointThreatened( PlayerID aiPlayer, Position pos, Boolean filterEnemyBuildings, Real thresholdFitness ) RETURNS:  =>Returns whether or not a point is threatened (from the perspective of the player passed in)
AIPlayer_IsTacticItemLocked( PlayerID player, EntityID tacticItemEntity ) RETURNS:  =>Checks if a tactic item is locked
AIPlayer_IsTacticItemLockedByAISquad( EntityID tacticItemEntity, SquadID lockingAISquad ) RETURNS:  =>Checks if a tactic item is locked by the squad
AIPlayer_LockTacticItemForAISquad( EntityID tacticItemEntity, SquadID lockingAISquad ) RETURNS:  =>Locks a tactic item for the passed player
AIPlayer_PopScoreMultiplier( PlayerID aiPlayer, Key tuningValueName, AIScoreMultiplierID id ) RETURNS:  =>Remove a multiplier previously applied to change the weight of a criteria in target scoring
AIPlayer_PopUnitTypeScoreMultiplier( PlayerID aiPlayer, Key unitTypeName, AIScoreMultiplierID id ) RETURNS:  =>Remove a multiplier previously applied to a unit type for target scoring
AIPlayer_ProcessedPathSuccessful( PlayerID aiPlayer, Integer processedPathRequestID ) RETURNS:  =>Was the processed path successful? Only supply requestID for a processed path
AIPlayer_PushScoreMultiplier( PlayerID aiPlayer, Key tuningValueName, Real multiplier, AIScoreMultiplierID multiplierID ) RETURNS:  =>Add a multiplier to change the weight of a criteria in target scoring
AIPlayer_PushUnitTypeScoreMultiplier( PlayerID aiPlayer, Key unitTypeName, Real multiplier, AIScoreMultiplierID multiplierID ) RETURNS:  =>Add a multiplier to give weight to a unit type in target scoring
AIPlayer_RemoveEntityHomebase( PlayerID aiPlayer, EGroupID eGroup ) RETURNS:  =>Remove entities (buildings) homebase assignment. Entities must be owned by player.
AIPlayer_RemoveSquadHomebase( PlayerID aiPlayer, SGroupID sGroup ) RETURNS:  =>Remove squads homebase assignment. Squads must be owned by player.
AIPlayer_RequestHighPath( PlayerID player, Integer requestingID, Position start, Position end, PropertyBagGroup pathingEntityPBG, Boolean requiresPartialPath ) RETURNS:  =>Request a high path between the start and destination, supply a unique ID and the PBG of the largest entity that will be following the path.
AIPlayer_ResetAbilityPriorityOverride( PlayerID player, PropertyBagGroup abilityPBG ) RETURNS:  =>Clears the ability priority override
AIPlayer_ResetAIAbilityPriorityOverride( PlayerID player, PropertyBagGroup aiAbilityPBG ) RETURNS:  =>Clears the ability priority override for all the abilities contained in the AIAbilityBag
AIPlayer_ResetEnemySquadsVisibility( PlayerID player, PlayerID enemyPlayer ) RETURNS:  =>Temporarily hides all of the known squads belonging to the enemy player for the specified AI
AIPlayer_SetAbilityPriorityOverride( PlayerID player, PropertyBagGroup abilityPBG, Real priority ) RETURNS:  =>Sets the ability priority override for all the AISquads owned by the player. -1 to disable the ability. NOTE: Encounter overrides have higher priority.
AIPlayer_SetAIAbilityPriorityOverride( PlayerID player, PropertyBagGroup aiAbilityPBG, Real priority ) RETURNS:  =>Sets the ability priority override for all the abilities contained in the AIAbilityBag for all the AISquads owned by the player. -1 to disable the ability. NOTE: Encounter overrides have higher priority.
AIPlayer_SetEntityHomebase( PlayerID aiPlayer, EGroupID eGroup, Integer homeBaseID ) RETURNS:  =>Add entities (buildings) to a homebase. Entities must be owned by player.
AIPlayer_SetGathererDistributionOverride( PlayerID aiPlayer, Real luaGatherDistro ) RETURNS:  =>Set the target distribution of how the ai player should use their units for gathering
AIPlayer_SetRequiresStatsUpdate( PlayerID player ) RETURNS:  =>marks the player to force the stats squads to update
AIPlayer_SetSquadHomebase( PlayerID aiPlayer, SGroupID sGroup, Integer homeBaseID ) RETURNS:  =>Add squads to a homebase. Squads must be owned by player.
AIPlayer_SetStrategicBaseIntention( PlayerID player, String intentionName, Real value ) RETURNS:  =>Set the base strategic intention of a player
AIPlayer_ToggleDrawCachedPath( Integer requestingID, Boolean on ) RETURNS:  =>Toggle debug draw for the specified path, -1 will draw all of them
AIPlayer_UnLockTacticItemForAISquad( EntityID tacticItemEntity, SquadID lockingAISquad ) RETURNS:  =>UnLocks a tactic item for the passed player
AIPlayer_UpdateGathering( PlayerID pPlayer ) RETURNS:  =>Updates what the skirmish AI is wanting to gather
AIPlayer_UpdateSkirmishAttackAndCaptureTasks( PlayerID pPlayer ) RETURNS:  =>Requests the skirmish AI to update attack encounters and capture tasks
AIPlayer_UpdateSkirmishPlayerAbilities( PlayerID pPlayer ) RETURNS:  =>Requests the skirmish AI to update player abilities
AIPlayer_UpdateSkirmishProduction( PlayerID pPlayer ) RETURNS:  =>Updates what the skirmish AI is trying to produce
AIPlayer_UpdateSkirmishScoutingTasks( PlayerID pPlayer ) RETURNS:  =>Requests the skirmish AI to update scout encounters
AIProductionScoring_AlliedCombatFitness( PlayerID aiPlayer, Real minFitness, Real maxFitness, Integer aiArmyType, Boolean highFitnessIsGood ) RETURNS:  =>Create a AlliedCombatFitness scoring function.
AIProductionScoring_AlliedCombatFitnessVsStrongestEnemy( PlayerID aiPlayer, Real minFitness, Real maxFitness, Integer aiArmyType, Boolean highFitnessIsGood ) RETURNS:  =>Create a AlliedCombatFitness scoring function (versus strongest enemy).
AIProductionScoring_AlliedCombatFitnessVsWeakestEnemy( PlayerID aiPlayer, Real minFitness, Real maxFitness, Integer aiArmyType, Boolean highFitnessIsGood ) RETURNS:  =>Create a AlliedCombatFitness scoring function (versus the weakest enemy).
AIProductionScoring_AmountOfResourceNeeded( PlayerID aiPlayer, Real maxResources ) RETURNS:  =>Create an AmountOfResourceNeeded scoring function.
AIProductionScoring_CanPushProductionScoringFunction( PlayerID aiPlayer ) RETURNS:  =>Check if now is an appropriate time to be making scoring functions.
AIProductionScoring_ClampedScoringFunction( PlayerID aiPlayer, Real min, Real max, ScoringFunction* innerScoringFunction ) RETURNS:  =>Create a ClampedScoringFunction scoring function.
AIProductionScoring_CounterScore( PlayerID aiPlayer, Real baseScoreContributuion ) RETURNS:  =>Create a CounterScore scoring function
AIProductionScoring_DeficiencyScore( PlayerID aiPlayer, Real weight ) RETURNS:  =>Create a DropOffScore scoring function.
AIProductionScoring_EntityCombatUpgrade( PlayerID aiPlayer ) RETURNS:  =>Create a EntityCombatUpgrade scoring function.
AIProductionScoring_IncreaseOverTime( PlayerID aiPlayer, Real minGameTime, Real increasePerSecond ) RETURNS:  =>Create a MinimumGameTime scoring function.
AIProductionScoring_InverseRandomIntScore( PlayerID aiPlayer ) RETURNS:  =>Create an InverseRandomIntScore scoring function.
AIProductionScoring_IslandNeedingExpansionBase( PlayerID aiPlayer ) RETURNS:  =>Create an IslandNeedingExpansionBase scoring function.
AIProductionScoring_LackOfSecuredResourceDeposits( PlayerID aiPlayer, ResourceType resourceType, Real scarceAmount, Real wellOffAmount ) RETURNS:  =>Create a LackOfSecuredResourceDeposits scoring function.
AIProductionScoring_LuaScoringFunction( PlayerID aiPlayer, LuaFunction scoringFunction ) RETURNS:  =>Create a LuaScoringFunction scoring function.
AIProductionScoring_MaximumGameTime( PlayerID aiPlayer, Real maxGameTime ) RETURNS:  =>Create a MaximumGameTime scoring function.
AIProductionScoring_MaxPopCapPercentage( PlayerID aiPlayer, Real targetPopulationPercentageAlive, Boolean groupPopulation ) RETURNS:  =>Create a MaxPopCapPercentage scoring function
AIProductionScoring_MaxScoringFunction( PlayerID aiPlayer, vector< ScoringFunction*> innerScoringFunction ) RETURNS:  =>Create a MaxScoringFunction scoring function.
AIProductionScoring_MaxWeaponDamage( PlayerID aiPlayer, Real maxDamage ) RETURNS:  =>Create a MaxWeaponDamage scoring function.
AIProductionScoring_MilitaryPlayerUpgrade( PlayerID aiPlayer, Real upgradeExponent ) RETURNS:  =>Create a MilitaryPlayerUpgrade scoring function.
AIProductionScoring_MinimumGameTime( PlayerID aiPlayer, Real minGameTime ) RETURNS:  =>Create a MinimumGameTime scoring function.
AIProductionScoring_MultipleProduced( PlayerID aiPlayer, Real additionalFactor ) RETURNS:  =>Create a MultipleProduced scoring function
AIProductionScoring_MultiplyListScoringFunction( PlayerID aiPlayer, vector< ScoringFunction*> innerScoringFunction ) RETURNS:  =>Create a MultiplyListScoringFunction scoring function.
AIProductionScoring_NavalTransportRequired( PlayerID aiPlayer ) RETURNS:  =>Create a NavalTransportRequired scoring function.
AIProductionScoring_NotProducedEver( PlayerID aiPlayer ) RETURNS:  =>Create an NotProducedEver scoring function.
AIProductionScoring_NotProducedRecently( PlayerID aiPlayer, Real timePeriodSeconds ) RETURNS:  =>Create an NotProducedRecently scoring function.
AIProductionScoring_OnlyProduceOneAtATime( PlayerID aiPlayer ) RETURNS:  =>Create a OnlyProduceOneAtATime scoring function.
AIProductionScoring_PlannedPlacementScore( PlayerID aiPlayer, Real minPlacementScore ) RETURNS:  =>Create a PlannedPlacementScore scoring function.
AIProductionScoring_PlayerGatheringUpgrade( PlayerID aiPlayer, Real improvementScalingFactor, Real approxDistToDeposit ) RETURNS:  =>Create a PlayerGatheringUpgrade scoring function
AIProductionScoring_PlayersOnDifferentIslands( PlayerID aiPlayer ) RETURNS:  =>Create an AIPlayersOnDifferentIslands scoring function.
AIProductionScoring_PopCapGenerator( PlayerID aiPlayer ) RETURNS:  =>Create a PopCapGenerator scoring function.
AIProductionScoring_PopulationPercentage( PlayerID aiPlayer, Real targetPopulationPercentageAlive, Real scoreDropOffFactor, Boolean groupPopulation, Boolean useSquadPopulation ) RETURNS:  =>Create a PopulationPercentage scoring function
AIProductionScoring_PresenceOfEnemyTypes( PlayerID aiPlayer, Real weights, Boolean squadTypes ) RETURNS:  =>Create a PresenceOfEnemyTypes scoring function
AIProductionScoring_PresenceOfMyTypes( PlayerID aiPlayer, Real weights, Boolean squadTypes ) RETURNS:  =>Create a PresenceOfMyTypes scoring function
AIProductionScoring_PresenceOfUpgradeableSquads( PlayerID aiPlayer, Real weight ) RETURNS:  =>Create a PresenceOfUpgradeableSquads scoring function.
AIProductionScoring_ProductionQueueContention( PlayerID aiPlayer, Real contentionThreshold, Real normalFactor ) RETURNS:  =>Create a ProductionQueueContention scoring function.
AIProductionScoring_RandomIntScore( PlayerID aiPlayer ) RETURNS:  =>Create an RandomIntScore scoring function.
AIProductionScoring_RemainingPersonnelPopCap( PlayerID aiPlayer, Real requiredRemainingPop ) RETURNS:  =>Create an RemainingPersonnelPopCap scoring function.
AIProductionScoring_ResourceGeneratorScore( PlayerID aiPlayer, Real depletionTimeThreshold ) RETURNS:  =>Create a ResourceGeneratorScore scoring function.
AIProductionScoring_ScarcityAndDeficiencyScore( PlayerID aiPlayer ) RETURNS:  =>Create a DropOffScore scoring function.
AIProductionScoring_ShouldConsiderLimitedNaval( PlayerID aiPlayer ) RETURNS:  =>Create an AIShouldConsiderLimitedNaval scoring function.
AIProductionScoring_ShouldConsiderNaval( PlayerID aiPlayer ) RETURNS:  =>Create an AIShouldConsiderNaval scoring function.
AIProductionScoring_ShouldNotConsiderNaval( PlayerID aiPlayer, Boolean shouldIncludeLimitedNaval ) RETURNS:  =>Returns 1 if not a naval map, 0 otherwise
AIProductionScoring_StrategicIntention( PlayerID aiPlayer, Real weights ) RETURNS:  =>Create a StrategicIntention scoring function
AIProductionScoring_TierUpgrade( PlayerID aiPlayer ) RETURNS:  =>Create a TierUpgrade scoring function.
AIProductionScoring_TimeToAcquire( PlayerID aiPlayer, Real maxTimeSeconds, Boolean includeTimeToGather, Boolean includeTimeToBuildThis, Boolean includeTimeToBuildRequirements ) RETURNS:  =>Create a TimeToAcquire scoring function
AIProductionScoring_TradeRouteExistsScore( PlayerID aiPlayer, Boolean landRoute ) RETURNS:  =>Create a ResourceDesireVsIncome scoring function.
AIProductionScoring_UnderCountLimit( PlayerID aiPlayer, Integer maxAlive, Integer maxEverProduced, Boolean groupPopulation ) RETURNS:  =>Create a UnderCountLimit scoring function
AIProductionScoring_UnderCountLimitFromStateModel( PlayerID aiPlayer, String keyMaxAlive ) RETURNS:  =>Create a UnderCountLimit scoring function
AISquad_ClearStateModelEnumTableTarget( SquadID aiSquad, String key, Integer tableRowIndex ) RETURNS:  =>Clears a TargetHandle value in the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_ClearStateModelTarget( SquadID aiSquad, String key ) RETURNS:  =>Clears a TargetHandle value in the AISquad's state model corresponding to the given key.
AISquad_FindBestIsolatedSquadTarget( SquadID aiSquad, SGroupID targetSquads, TargetPreference tacticTargetPolicy, Boolean targetAllies ) RETURNS:  =>Find the best squad target which is not part of a clump.
AISquad_FindBestSquadTarget( SquadID aiSquad, SGroupID targetSquads, TargetPreference tacticTargetPolicy ) RETURNS:  =>returns the best squad target in the sgroup based on the passed tacticTargetPolicy
AISquad_FindFilteredCoverCompareCurrent( PlayerID player, SquadID aiSquad, Real maxPathDistanceFromGoal, Boolean compareToCurrentCover ) RETURNS:  =>Tries to find cover within a certain radius of a position, traveling a max distance to get there, and possibly comparing against current position's cover. If no cover is found, it returns an invalid position
AISquad_FindSafePositionInEncounterLeash( SquadID aiSquad, Real maxRadius ) RETURNS:  =>returns the safest position for the AISquad in the current encounter leash area
AISquad_GetClosestCuttableObstruction( SquadID pSquad, Real radius ) RETURNS:  =>Returns the closest cuttable obstruction entity to the given squad
AISquad_GetClosestObstruction( SquadID pSquad, Real radius, Boolean bFilterAllied ) RETURNS:  =>Returns the closest obstruction entity to the given squad
AISquad_GetClosestObstructionOfType( SquadID pSquad, Real radius, PropertyBagGroup pbgtype ) RETURNS:  =>Returns the closest obstruction entity to the given squad
AISquad_GetClumpFarBound( SquadID aiSquad, Integer clumpIndex, Integer targetFilterFlags ) RETURNS:  =>Get the position on the far side of the given clump relative to the given squad.
AISquad_GetCurrentFallBackPosition( SquadID aiSquad ) RETURNS:  =>returns the current fallback position
AISquad_GetStateModelBool( SquadID aiSquad, String key ) RETURNS:  =>Returns a boolean value from the AISquad's state model corresponding to the given key.
AISquad_GetStateModelEntityTarget( SquadID aiSquad, String key ) RETURNS:  =>Returns an Entity value from the AISquad's state model corresponding to the given key.
AISquad_GetStateModelEnumTableBool( SquadID aiSquad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a boolean value from the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_GetStateModelEnumTableEntityTarget( SquadID aiSquad, String key, Integer tableRowIndex ) RETURNS:  =>Returns an Entity value from the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_GetStateModelEnumTableFloat( SquadID aiSquad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a float value from the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_GetStateModelEnumTableInt( SquadID aiSquad, String key, Integer tableRowIndex ) RETURNS:  =>Returns an integer value from the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_GetStateModelEnumTablePBG( SquadID aiSquad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a pbg value from the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_GetStateModelEnumTablePlayerTarget( SquadID aiSquad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Player value from the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_GetStateModelEnumTableSquadTarget( SquadID aiSquad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Squad value from the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_GetStateModelEnumTableVector3f( SquadID aiSquad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Vector3f value from the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_GetStateModelFloat( SquadID aiSquad, String key ) RETURNS:  =>Returns a float value from the AISquad's state model corresponding to the given key.
AISquad_GetStateModelInt( SquadID aiSquad, String key ) RETURNS:  =>Returns an integer value from the AISquad's state model corresponding to the given key.
AISquad_GetStateModelPBG( SquadID aiSquad, String key ) RETURNS:  =>Returns a pbg value from the AISquad's state model corresponding to the given key.
AISquad_GetStateModelPlayerTarget( SquadID aiSquad, String key ) RETURNS:  =>Returns a Player value from the AISquad's state model corresponding to the given key.
AISquad_GetStateModelSquadTarget( SquadID aiSquad, String key ) RETURNS:  =>Returns a Squad value from the AISquad's state model corresponding to the given key.
AISquad_GetStateModelVector3f( SquadID aiSquad, String key ) RETURNS:  =>Returns a Vector3f value from the AISquad's state model corresponding to the given key.
AISquad_HasBeenAttacked( SquadID pAISquad, Integer historyTicks ) RETURNS:  =>Checks if the squad has been attacked within this time
AISquad_HasFiredWeapon( SquadID pAISquad, Integer historyTicks ) RETURNS:  =>Checks if the squad has fired its weapon within this time
AISquad_HasPathWithinDistance( SquadID aiSquad, Position targetPosition, Real maxDistance ) RETURNS:  =>Returns true if a path shorter than maxDistance between the AISquad and the target exists
AISquad_IsRunningSquadTacticAbility( SquadID aiSquad, PropertyBagGroup abilityPBG ) RETURNS:  =>returns true if the AISquad is currently running the AISquadAbilityTactic for the passed abilityPBG
AISquad_SetStateModelBool( SquadID aiSquad, String key, Boolean value ) RETURNS:  =>Sets a boolean value in the AISquad's state model corresponding to the given key.
AISquad_SetStateModelEntityTarget( SquadID aiSquad, String key, EntityID value ) RETURNS:  =>Sets an Entity TargetHandle value in the AISquad's state model corresponding to the given key.
AISquad_SetStateModelEnumTableBool( SquadID aiSquad, String key, Integer tableRowIndex, Boolean value ) RETURNS:  =>Sets a boolean value in the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_SetStateModelEnumTableEntityTarget( SquadID aiSquad, String key, Integer tableRowIndex, EntityID value ) RETURNS:  =>Sets an Entity TargetHandle value in the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_SetStateModelEnumTableFloat( SquadID aiSquad, String key, Integer tableRowIndex, Real value ) RETURNS:  =>Sets a float value in the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_SetStateModelEnumTableInt( SquadID aiSquad, String key, Integer tableRowIndex, Integer value ) RETURNS:  =>Sets an integer value in the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_SetStateModelEnumTablePBG( SquadID aiSquad, String key, Integer tableRowIndex, PropertyBagGroup value ) RETURNS:  =>Sets a pbg value in the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_SetStateModelEnumTablePlayerTarget( SquadID aiSquad, String key, Integer tableRowIndex, PlayerID value ) RETURNS:  =>Sets a Player TargetHandle value in the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_SetStateModelEnumTableSquadTarget( SquadID aiSquad, String key, Integer tableRowIndex, SquadID value ) RETURNS:  =>Sets a Squad TargetHandle value in the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_SetStateModelEnumTableVector3f( SquadID aiSquad, String key, Integer tableRowIndex, Position value ) RETURNS:  =>Sets a Vector3f value in the AISquad's state model corresponding to the given key and table row index (0 based).
AISquad_SetStateModelFloat( SquadID aiSquad, String key, Real value ) RETURNS:  =>Sets a float value in the AISquad's state model corresponding to the given key.
AISquad_SetStateModelInt( SquadID aiSquad, String key, Integer value ) RETURNS:  =>Sets an integer value in the AISquad's state model corresponding to the given key.
AISquad_SetStateModelPBG( SquadID aiSquad, String key, PropertyBagGroup value ) RETURNS:  =>Sets a pbg value in the AISquad's state model corresponding to the given key.
AISquad_SetStateModelPlayerTarget( SquadID aiSquad, String key, PlayerID value ) RETURNS:  =>Sets a Player TargetHandle value in the AISquad's state model corresponding to the given key.
AISquad_SetStateModelSquadTarget( SquadID aiSquad, String key, SquadID value ) RETURNS:  =>Sets a Squad TargetHandle value in the AISquad's state model corresponding to the given key.
AISquad_SetStateModelVector3f( SquadID aiSquad, String key, Position value ) RETURNS:  =>Sets a Vector3f value in the AISquad's state model corresponding to the given key.
AISquad_ShouldFallBackOrBraceSelf( SquadID pAISquad ) RETURNS:  =>Checks if the squad should fall back or brace itself given the current situation.
AIStateTree_SpawnRootControllerWithStateModelTunings( PlayerID pPlayer, String openingBranchName, Boolean keepAlive, ScarAIStateModelTuningsPBG stateModelTuningsScarPBG, SGroupID stateModelSGroupListTunings, EGroupID stateModelEGroupListTunings, Position stateModelPositionTargetListTunings, MarkerID stateModelMarkerTargetListTunings, String list stateModelEntityTypeListTunings, LuaMap<ScarAIFormationCoordinatorPBG> stateModelCoordinatorPBGListTunings, Boolean stateModelBoolTunings, Real stateModelFloatTunings, Integer stateModelIntTunings ) RETURNS:  =>On the AIPlayer statetree, spawn a Root Controller with tunings that can be pushed onto the Root Controller's StateModel.
AITactic_AdjustJumpSlideAbilityTarget( SquadID aiSquad, PropertyBagGroup abilityPBG, Real slideOffset, Position targetPosition ) RETURNS:  =>calculates a valid target position for a jump slide ability
AITactic_AICommandSquadMove( SquadID aiSquad, Position target, Real acceptableProximity, Boolean reverseMove ) RETURNS:  =>Issue an AI move command to a squad
AITactic_GetObjectiveTimerSeconds( Integer objectiveID ) RETURNS:  =>Get the number of seconds on an objective timer.
AITactic_GetTacticPriority( SquadID pSquad, AITacticType tacticType ) RETURNS:  =>Get tactic priority for a squad.
AllMarkers_FromName( String name, String type ) RETURNS:  =>Returns all ScarMarkers from the Scenario Editor with the given name. If you don't care about the type, pass in an empty string ( "" )
AllMarkersFromName( String name, String type ) RETURNS:  =>Returns all ScarMarkers from the Mission Editor with the given name. If you don't care about the type, pass in an empty string ( "" )
App_ClearMovieModeFramerate(  ) RETURNS:  =>Remove the movie mode framerate restriction
app_currenttime(  ) RETURNS:  =>Return the current app time
app_setidealframerate( Integer frameRate ) RETURNS:  =>Set the ideal frame rate for the game. Set to 0 if an unbounded frame rate is desired.
App_SetMovieModeFramerate( Integer frameRate ) RETURNS:  =>Run the game at specified frame rate (for capturing movies). Only works with 60 or 120, other rates are defaulted to 60. Setting it to 0 disables movie mode
BP_GetAbilityBlueprint( String pbgShortname ) RETURNS:  =>Returns an ability property bag group.
BP_GetAbilityBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns an ability property bag group.
BP_GetAIAbilityBlueprint( String pbgShortname ) RETURNS:  =>Returns an AIAbility property bag group.
BP_GetAIAbilityBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns an AIAbility property bag group.
BP_GetAIFormationCoordinatorBlueprint( String pbgShortname ) RETURNS:  =>Returns an AIFormationCoordinator property bag group.
BP_GetAIFormationCoordinatorBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns an AIFormationCoordinator property bag group.
BP_GetAIFormationTargetPriorityBlueprint( String pbgShortname ) RETURNS:  =>Returns an AIFormationTargetPriority property bag group.
BP_GetAIFormationTargetPriorityBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns an AIFormationTargetPriority property bag group.
BP_GetAIStateModelTuningsBlueprint( String pbgShortname ) RETURNS:  =>Returns an AIStateModelTunings property bag group.
BP_GetAIStateModelTuningsBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns an AIStateModelTunings property bag group.
BP_GetEntityBlueprint( String pbgShortname ) RETURNS:  =>Returns an entity property bag group.
BP_GetEntityBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns an entity property bag group.
BP_GetEntityBPBuildTime( ScarEntityPBG entityBag ) RETURNS:  =>Returns the unmodified build time in seconds from cost_ext for a given entity blueprint.
BP_GetEntityBPDefaultSpeed( ScarEntityPBG entityBag, Boolean getModifiedSpeed, PlayerID player ) RETURNS:  =>Returns the default movement speed from moving_ext for a given entity blueprint. If getModifiedSpeed is true, the value will be modified by any speed_maximum_modifier applied to the player for the given entity blueprint.
BP_GetEntityChildBlueprintAtIndex( String pbgShortname, Integer index ) RETURNS:  =>Returns the child blueprint of the specified entity blueprint at specified index.
BP_GetEntityChildBlueprintCount( String pbgShortname ) RETURNS:  =>Returns the number of child blueprints of the specified entity blueprint.
BP_GetEntityParentBlueprintAtIndex( String pbgShortname, Integer index ) RETURNS:  =>Returns the parent blueprint of the specified entity blueprint at specified index
BP_GetEntityParentBlueprintCount( String pbgShortname ) RETURNS:  =>Returns the number of parent blueprints of the specified entity blueprint.
BP_GetEntityTypeExtRaceBlueprintAtIndex( String pbgShortname, Integer index ) RETURNS:  =>Returns race blueprint associated with an entity blueprint type_ext at specified index.
BP_GetEntityTypeExtRaceCount( String pbgShortname ) RETURNS:  =>Returns the number of race blueprints associated with an entity blueprint type_ext.
BP_GetEntityUIInfo( ScarEntityPBG ebp ) RETURNS:  =>Returns a table containing the ui_ext info for given entity
BP_GetMapPoolBlueprint( String pbgShortname ) RETURNS:  =>Returns a map pool property bag group.
BP_GetMapPoolBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns a map pool property bag group.
BP_GetMoveTypeBlueprint( String pbgShortname ) RETURNS:  =>Returns a move type property bag group.
BP_GetMoveTypeBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns a move type property bag group.
BP_GetName( PropertyBagGroup pbg ) RETURNS:  =>Return the short name of the group
BP_GetPassTypeBlueprint( String pbgShortname ) RETURNS:  =>Returns an pass type property bag group.
BP_GetPassTypeBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns an pass type property bag group.
BP_GetPropertyBagGroupCount( PropertyBagGroupType type ) RETURNS:  =>Return the number of property bag groups of the same type
BP_GetPropertyBagGroupPathName( PropertyBagGroupType type, Integer index ) RETURNS:  =>Return the path name of the group at the specified index
BP_GetReticuleBlueprint( String pbgShortname ) RETURNS:  =>Returns a UIReticuleBag property bag group.
BP_GetSlotItemBlueprint( String pbgShortname ) RETURNS:  =>Returns a slot item property bag group.
BP_GetSlotItemBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns a slot item property bag group.
BP_GetSquadBlueprint( String pbgShortname ) RETURNS:  =>Returns a squad property bag group.
BP_GetSquadBlueprintByPbgID( String pbgID ) RETURNS:  =>Returns a squad property bag group.
BP_GetSquadChildBlueprintAtIndex( String pbgShortname, Integer index ) RETURNS:  =>Returns the child blueprint of the specified squad blueprint at specified index.
BP_GetSquadChildBlueprintCount( String pbgShortname ) RETURNS:  =>Returns the number of child blueprints of the specified squad blueprint.
BP_GetSquadParentBlueprintAtIndex( String pbgShortname, Integer index ) RETURNS:  =>Returns the parent blueprint of the specified squad blueprint at specified index
BP_GetSquadParentBlueprintCount( String pbgShortname ) RETURNS:  =>Returns the number of parent blueprints of the specified squad blueprint.
BP_GetSquadTypeExtRaceBlueprintAtIndex( String pbgShortname, Integer index ) RETURNS:  =>Returns race blueprint associated with a squad blueprint squad_type_ext at specified index.
BP_GetSquadTypeExtRaceCount( String pbgShortname ) RETURNS:  =>Returns the number of race blueprints associated with a squad blueprint squad_type_ext.
BP_GetSquadUIInfo( ScarSquadPBG sbp, ScarRacePBG rbp ) RETURNS:  =>Returns a table containing the ui_ext info for given squad and race
BP_GetType( StackVar v ) RETURNS:  =>Returns the type of a blueprint.
BP_GetUpgradeBlueprint( String pbgShortname ) RETURNS:  =>Returns an upgrade property bag group.
BP_GetUpgradeBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns an upgrade property bag group.
BP_GetUpgradeUIInfo( ScarUpgradePBG ubp ) RETURNS:  =>Returns a table containing the ui_ext info for given upgrade
BP_GetWeaponBlueprint( String pbgShortname ) RETURNS:  =>Returns a weapon property bag group.
BP_GetWeaponBlueprintByPbgID( Integer pbgID ) RETURNS:  =>Returns a weapon property bag group.
BP_IsUpgradeOfType( ScarUpgradePBG upgradePBG, String key ) RETURNS:  =>Returns true if the UpgradePGB's list of types includes the given type
Camera_ClampToMarker( MarkerID marker ) RETURNS:  =>Clamps the camera's target position to a marker.
Camera_ExecuteBSplinePan( Real totalT, Boolean controlRotation ) RETURNS:  =>Execute spline pan based on queued control points. Use B-Spline interpolation of points
Camera_ExecuteCaptureCameraPan( StackVarTable cameraPanTable ) RETURNS:  =>Executes a camera pan that was captured using the Capture Tool. Expects that the "camera_spline" Camera set was pushed to the CameraSwitchboard, using Camera_Push("camera_spline") Returns the duration of the spline, so that the user can call Camera_Pop()
Camera_ExecuteCatromSplinePan( Real totalT, Boolean controlRotation ) RETURNS:  =>Execute spline pan based on queued control points. Use Catmull-Rom interpolation of points
Camera_ExecuteLinearSplinePan( Real totalT, Boolean controlRotation ) RETURNS:  =>Execute spline pan based on queued control points. Use linear interpolation between points
Camera_FocusOnPosition( Position position ) RETURNS:  =>Focus the camera on the specified position.
Camera_FollowEntity( EntityID entity ) RETURNS:  =>Make the camera follow the specified entity.
Camera_FollowSelection(  ) RETURNS:  =>Make the camera follow the current full selection.
Camera_FollowSquad( SquadID squad ) RETURNS:  =>Make the camera follow the specified squad.
Camera_GetCurrentPos(  ) RETURNS:  =>Get the current position for the camera. (Where the the camera currently is.)
Camera_GetCurrentTargetPos(  ) RETURNS:  =>Get the current target position for the camera. (Where the the camera currently is.)
Camera_GetDeclination(  ) RETURNS:  =>Get the current camera declination (tilt).
Camera_GetDefaultOrbit(  ) RETURNS:  =>Get the default camera orbit (rotation).
Camera_GetOrbit(  ) RETURNS:  =>Get the current camera orbit (rotation).
Camera_GetPivot(  ) RETURNS:  =>Get the pivot of the camera. (The position about which the camera is pivoting).
Camera_GetTargetPos(  ) RETURNS:  =>Get the desired target position for the camera. (Where the camera is trying to get to.)
Camera_GetZoomDist(  ) RETURNS:  =>Get the current zoom distance for the camera.
Camera_HideMesh(  ) RETURNS:  =>Hide the camera mesh.
Camera_IsInputEnabled(  ) RETURNS:  =>Returns the enabled/disabled state of the camera input.  (not deterministic)
Camera_IsMeshShown(  ) RETURNS:  =>Is the camera mesh being shown?
Camera_QueueRelativeSplinePanPos( Position deltaPos ) RETURNS:  =>Queue a spline control point by position relative to the last queued position. Pan is deferred until requested by an execution function
Camera_QueueSplinePanPos( Position pos ) RETURNS:  =>Queue a spline control point by absolute position. Pan is deferred until requested by an execution function
Camera_ResetFocus(  ) RETURNS:  =>Make the camera stop following anything.
Camera_ResetOrbit(  ) RETURNS:  =>Set the current camera orbit relative to the current orbit (relative rotation).
Camera_ResetToDefault(  ) RETURNS:  =>Reset camera position to default home position
Camera_SetDeclination( Real declination ) RETURNS:  =>Set the current camera declination (tilt).
Camera_SetDefaultDeclination( Real declination ) RETURNS:  =>Set the default camera declination (tilt).
Camera_SetDefaultOrbit( Real orbit ) RETURNS:  =>Set the default camera orbit (rotation).
Camera_SetDefaultZoomDist( Real distance ) RETURNS:  =>Set the default zoom distance for the camera.
Camera_SetFov( Real fov ) RETURNS:  =>Set the current camera field of view (fov)
Camera_SetInputEnabled( Boolean enabled ) RETURNS:  =>Enables/disables camera input.
Camera_SetOrbit( Real orbit ) RETURNS:  =>Set the current camera orbit (rotation).
Camera_SetOrbitRelative( Real deltaOrbit ) RETURNS:  =>Set the current camera orbit relative to the current orbit (relative rotation).
Camera_SetZoomDist( Real distance ) RETURNS:  =>Set the current zoom distance for the camera.
Camera_ShowMesh(  ) RETURNS:  =>Show the camera mesh.
Camera_StartDeltaOrbit( Real deltaOrbit, Real totalT ) RETURNS:  =>Orbit the camera a given number of degrees clockwise from the current orbit position in a given amount of time.
Camera_StartOrbit( Real endOrbit, Real totalT ) RETURNS:  =>Orbit the camera to an end orbit position from the current orbit position in a given amount of time. Will choose shortest rotational direction.
Camera_StartPan( Position startPos, Position endPos, Real totalT, Real zoomDistance ) RETURNS:  =>Pan the camera between two positions in a given amount of time. Interpolates the camera to the given zoom.
Camera_StartPanTo( Position endPos, Real totalT, Real zoomDistance ) RETURNS:  =>Pan the camera to a position in a given amount of time from the position in front of the queue.
Camera_StartRelativePan( Position deltaPos, Real totalT, Real zoomDistance ) RETURNS:  =>Pan the camera by some amount in a given amount of time. This is relative to the position in front of the queue.
Camera_StartRelativeZoomDist( Real deltaZoomDist, Real totalT ) RETURNS:  =>Start a transition to a relative zoom distance over a certain amount of time.
Camera_StartZoomDist( Real startZoomDist, Real endZoomDist, Real totalT ) RETURNS:  =>Start a transition from one zoom distance to another over a certain amount of time.
Camera_StartZoomDistTo( Real endZoomDist, Real totalT ) RETURNS:  =>Start a transition to a zoom distance over a certain amount of time.
Camera_StopPan(  ) RETURNS:  =>Stop an ongoing camera pan.
Camera_ToggleDebugCamera(  ) RETURNS:  =>Toggle the debug free camera
Camera_ToggleMeshShown( Boolean show ) RETURNS:  =>Toggle the camera mesh.
Camera_Unclamp(  ) RETURNS:  =>Frees up the camera (so it's not clamped to a marker anymore).
Cheat_GrantAllRibbonsAndMedals(  ) RETURNS:  =>Cheat to award all ribbons and medals
Cheat_ResetAchievementProgress(  ) RETURNS:  =>Cheat to reset all achievement progress
cmdline_string( String name ) RETURNS:  =>Get the value for a command line arg.
Command_PlayerBroadcastMessage( PlayerID player, PlayerID dest, Integer messageType, String message ) RETURNS:  =>Send a message to a player with generic type a body
Cursor_Distance(  ) RETURNS:  =>Toggle cursor position distance drawring
Cursor_GetClearWeaponShotHistory(  ) RETURNS:  =>Toggle clearing of cursor over entity weapon shot history debug display
Cursor_GetDrawWeaponShotHistory(  ) RETURNS:  =>Toggle cursor over entity weapon shot history debug display
cursor_hide(  ) RETURNS:  =>Hide the cursor
Cursor_Info(  ) RETURNS:  =>Toggle cursor position information
cursor_setposition( Real x, Real y ) RETURNS:  =>Set the cursor position
cursor_show(  ) RETURNS:  =>Show the cursor
Cursor_WeaponInfo(  ) RETURNS:  =>Toggle cursor over entity weapon information
Cursor_WeaponRanges(  ) RETURNS:  =>Toggle cursor over entity weapon range information
dca_get_variable_value( EntityID pEntity, String variableName ) RETURNS:  =>Get dca variable value for an entity. Can be used to validate presentation state from lua.
Debug_IgnoreMouseOverCheck(  ) RETURNS:  =>Toggles on or off under mouse check. If ignoring mouse check, all entities will have the enabled debug info displayed
Debug_ToggleControlAll(  ) RETURNS:  =>Allows the local player to issue commands to any unit regardless of ownership.
Debug_ToggleDebugTest(  ) RETURNS:  =>Toggles on or off all debug test activity
Decal_Create( String decalName, Position position, Real xScale, Real yScale, Real zScale, Real rotationDegrees, Integer r, Integer g, Integer b, Integer a ) RETURNS:  =>Add a decal to the terrain. Returns a unique decal id allow for future removal via Decal_Destroy
Decal_Destroy( Integer decalID ) RETURNS:  =>Destroy a decal by unique id
Decal_GetInvalidID(  ) RETURNS:  =>Get the Decal ID that represents an invalid decal (useful to check if creation failed)
Decal_GetNextDecalId(  ) RETURNS:  =>Returns the current decal id in use; used in conjunction with Decal_RemoveAllDecalsAfterId
Decal_RemoveAllDecalsAfterId( Integer id ) RETURNS:  =>Erases all placed decals after id (inclusive); used in conjunction with Decal_GetNextDecalId
DisplayAdapterDatabase_CheckBoolOverride( String setting ) RETURNS:  =>Query the display adapter database for a boolean setting override.
DisplayAdapterDatabase_CheckFloatOverride( String setting ) RETURNS:  =>Query the display adapter database for a floating-point setting override.
DisplayAdapterDatabase_CheckIntOverride( String setting ) RETURNS:  =>Query the display adapter database for an integer setting override.
DisplayAdapterDatabase_CheckMinimumDriverVersion(  ) RETURNS:  =>Output the installed display adapter driver version, the required version for the current adapter, and whether or not the installed version is equal to or greater than the required one.
DisplayAdapterDatabase_CheckUint16Override( String setting ) RETURNS:  =>Query the display adapter database for a uint16 setting override.
DisplayAdapterDatabase_CheckUint8Override( String setting ) RETURNS:  =>Query the display adapter database for a uint8 setting override.
DisplayAdapterDatabase_CheckUintOverride( String setting ) RETURNS:  =>Query the display adapter database for a uint32 setting override.
DisplayAdapterDatabase_GetAdapterFromID( String vendor, String device, String subsystem, String revision ) RETURNS:  =>Query the display adapter database for information about a specified adapter.
DisplayAdapterDatabase_GetAdapterID(  ) RETURNS:  =>Output basic information about the current display adapter.
DisplayAdapterDatabase_GetAdapterMinimumDriverVersion( String vendor, String device, String subsystem, String revision ) RETURNS:  =>Query the display adapter database for the minimum required driver version for a specified adapter.
DisplayAdapterDatabase_GetCurrentAdapterPerformanceClass(  ) RETURNS:  =>Query the display adapter database for the performance class of the currently-installed display adapter.
DisplayAdapterDatabase_GetDriverInfo(  ) RETURNS:  =>Output basic information about the currently installed display adapter driver.
DisplayAdapterDatabase_GetPerformanceClass( Real relativePerformance ) RETURNS:  =>Query the display adapter database for the performance class given a relative performance percentage.
dr_clear( String frame ) RETURNS:  =>Clear debug rendering.
dr_drawCircle( String frame, Real x, Real y, Real z, Real radius, Integer r, Integer g, Integer b ) RETURNS:  =>Draw a circle, positioned in 3D, aligned to scren.
dr_drawline( Position pos0, Position pos1, Integer r, Integer g, Integer b, StackVar svar ) RETURNS:  =>Draw line. If you don't pass in a name, TerrainLine is used.
dr_setautoclear( String frame, Boolean bEnable ) RETURNS:  =>Set auto clear for named frame.
dr_setdisplay( String frame, Boolean bEnable ) RETURNS:  =>Set display of named frame.
dr_terraincircle( Position pos, Real radius, Real r, Real g, Real b, Integer divs, String frame ) RETURNS:  =>Draw circle on terrain.
dr_terraincirclewithlifetime( Position pos, Real radius, Real r, Real g, Real b, Integer divs, String frame, Real lifetime ) RETURNS:  =>Draw circle on terrain with lifetime.
dr_terrainrect( Position pos, Real w, Real h, Real r, Real g, Real b, Real rads ) RETURNS:  =>Draw rectangle on terrian.
dr_text2d( String frame, Real x, Real y, String cmd, Integer r, Integer g, Integer b ) RETURNS:  =>Draw text, positioned in 2D, aligned to the screen.
dr_text3d( String frame, Real x, Real y, Real z, String cmd, Integer r, Integer g, Integer b ) RETURNS:  =>Draw text, positioned in 3D, aligned to screen.
DrawOBB( RenderModel* pModel, Transform& transform ) RETURNS:  =>Draw the ref-posed OBB of a model
EBP_Exists( String pbgShortname ) RETURNS:  =>Returns true if an entity blueprint exists with the given name.
EBP_IsOfRace( String pbgShortname, ScarRacePBG race ) RETURNS:  =>Returns whether the entity blueprint is of specified race
EBP_PopulationCost( PropertyBagGroup ebpUnit, PlayerID player, CapType type ) RETURNS:  =>get Entity blueprint pop cost, use CT_Personnel, CT_Vehicle, CT_Medic for captype
EGroup_Add( EGroupID group, EntityID entity ) RETURNS:  =>Adds an entity to the end of a group if the group doesnt already have it.
EGroup_AddEGroup( EGroupID group, EGroupID grouptoadd ) RETURNS:  =>Appends the entities in one group to another group.
EGroup_Clear( EGroupID egroup ) RETURNS:  =>Removes all entities from a group
EGroup_Compare( EGroupID group1, EGroupID group2 ) RETURNS:  =>Returns true if the contents of the two groups are equal. Order of the entities does not matter.
EGroup_Count( EGroupID egroup ) RETURNS:  =>Returns the total number of spawned and despawned entities in a group.
EGroup_CountDeSpawned( EGroupID egroup ) RETURNS:  =>Returns the number of despawned entities in a group.
EGroup_CountSpawned( EGroupID egroup ) RETURNS:  =>Returns the number of spawned entities in a group.
EGroup_Create( String name ) RETURNS:  =>Returns a new entity group with the given name.
EGroup_CreateUniqueWithPrefix( String prefix ) RETURNS:  =>Returns a new entity group with an autogenerated unique name, optionally prefixed by the string passed in.
EGroup_Destroy( EGroupID egroup ) RETURNS:  =>Manually destroy a group that you don't need anymore.
EGroup_Exists( String name ) RETURNS:  =>Returns true if the entity group with the given name exists
EGroup_ForEach( EGroupID egroup, StackVarFunction f ) RETURNS:  =>Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return true to break or false to continue.
EGroup_ForEachAllOrAny( EGroupID egroup, Boolean all, StackVarFunction f ) RETURNS:  =>Call a lua function for each item in a group. Function will receive (groupid, itemindex, itemid) and should return a bool.
EGroup_ForEachAllOrAnyEx( EGroupID egroup, Boolean all, StackVarFunction f, Boolean spawned, Boolean despawned ) RETURNS:  =>Same as EGroup_ForEachAllOrAny except you have a choice to iterate over spawned entities, despawned entities, or both.
EGroup_ForEachEx( EGroupID egroup, StackVarFunction f, Boolean spawned, Boolean despawned ) RETURNS:  =>Same as EGroup_ForEach except you have a choice to iterate over spawned entities, despawned entities, or both.
EGroup_FromName( String name ) RETURNS:  =>Find an entity group with a given name.
EGroup_GetDeSpawnedEntityAt( EGroupID group, Integer int ) RETURNS:  =>Returns the despawned entity at the given index.
EGroup_GetEntityAt( EGroupID group, Integer int ) RETURNS:  =>Returns the entity at the given index.
EGroup_GetName( EGroupID egroup ) RETURNS:  =>Returns the name of a given entity group.
EGroup_GetPosition( EGroupID group ) RETURNS:  =>Returns the center position of an entity group.
EGroup_GetSpawnedEntityAt( EGroupID group, Integer int ) RETURNS:  =>Returns the spawned entity at the given index.
EGroup_Intersection( EGroupID group, EGroupID grouptointersect ) RETURNS:  =>Performs a group intersection.
EGroup_IsValid( Integer egroupID ) RETURNS:  =>Check to see if an egroup still exists without needing the name.
EGroup_Remove( EGroupID group, EntityID entity ) RETURNS:  =>Removes an entity from a group.
EGroup_RemoveAllMatching( EGroupID group, EGroupID grouptocompare ) RETURNS:  =>Removes any entites that exist in both groups.
EGroup_RemoveNonHoldEntities( EGroupID egroup ) RETURNS:  =>Removes all the entities from the EGroup that don't have HoldExt on them
EGroup_SortBasedOnHealth( EGroupID egroup, Boolean ascending ) RETURNS:  =>Sorts the EGroup based on health
Entity_ActiveCommandIs( EntityID entity, EntityCommandType cmdtype ) RETURNS:  =>Returns true if the active command is of the type we specified
Entity_AddAbility( EntityID entity, ScarAbilityPBG ability ) RETURNS:  =>Allows the entity to use this ability
Entity_AddResource( EntityID entity, Integer type, Real amount ) RETURNS:  =>Add a specific amount of a certain resource type to an entity.
Entity_AdjustAbilityCooldown( EntityID entity, Integer tickAmount ) RETURNS:  =>Advance ability cooldown
Entity_BuildCycleList(  ) RETURNS:  =>Builds the cycle list based on current tagged entity
Entity_CalculatePassableSpawnPosition( EntityID entity, Position pos ) RETURNS:  =>pass in a entity and position to resolve the position into a open space position, if the position is not free, position returned will try to be the closest position near the original position
Entity_CanAttackNow( EntityID attacker, Position target ) RETURNS:  =>Returns whether an entity can attack a target without moving or turning.
Entity_CancelProductionQueueItem( EntityID entity, Integer index ) RETURNS:  =>Cancels an item in a production queue.  Index 0 is the currently producing item.
Entity_CanCurrentlyBeDamaged( EntityID entity ) RETURNS:  =>Check if an entity can currently be damaged.
Entity_CanLoadSquad( EntityID entity, SquadID squad, Boolean assumeEmpty, Boolean assumeVisible ) RETURNS:  =>Check if the entity can load squad or not
Entity_CanSeeEntity( EntityID entity, EntityID target ) RETURNS:  =>Returns true if the distance between a target entity and the source entity is less than it entity's sight distance.  There is no LOS or FOW check.
Entity_CanSeeSquad( EntityID entity, SquadID target ) RETURNS:  =>Returns true if the distance between a target squad and the source entity is less than it entity's sight distance.  There is no LOS or FOW check.
Entity_CanTargetEntity( Entity& entity, Entity& target, Boolean checkFOW ) RETURNS:  =>Check if an entity can target and attack another entity.
Entity_ClearPendingDeathFlag( EntityID entity ) RETURNS:  =>Clear the pending death flag manually. Should be used when campaign leaders are revived.
Entity_ClearPostureSuggestion( EntityID entity ) RETURNS:  =>Clears any previous posture suggestions made to an entity
Entity_ClearStateModelEnumTableTarget( EntityID entity, String key, Integer tableRowIndex ) RETURNS:  =>Clears a TargetHandle value in the entity's state model corresponding to the given key and table row index (0 based).
Entity_ClearStateModelTarget( EntityID entity, String key ) RETURNS:  =>Clears a TargetHandle value in the entity's state model corresponding to the given key.
Entity_ClearTagDebug(  ) RETURNS:  =>Clears the tagged entity used for debugging
Entity_CompleteUpgrade( EntityID pEntity, ScarUpgradePBG upgradePBG ) RETURNS:  =>Instantly adds an upgrade to a given entity
Entity_ConvertBlueprint( Entity& entity, PropertyBagGroup pbg ) RETURNS:  =>Converts Entity's blueprint to the specified blueprint.
Entity_CycleDebug(  ) RETURNS:  =>Cycle through the existing list built for the originally tagged entity
Entity_DeSpawn( EntityID entity ) RETURNS:  =>DeSpawn the entity at its current position
Entity_Destroy( EntityID entity ) RETURNS:  =>Remove an entity from the world and destroy it.
Entity_DisableCancelConstructionCommand( EntityID entity, Boolean disable ) RETURNS:  =>Forces the cancel construction command to be disabled, meaning you can't cancel construction for this
Entity_DoBurnDamage( EntityID entity, Real val, Boolean ignoreMaxDamagePerSecond ) RETURNS:  =>Adjusts the entity's burn level by val
Entity_EnableAttention( EntityID entity, Boolean attentive ) RETURNS:  =>Sets whether an entity pays attention to its surroundings
Entity_EnableProductionQueue( EntityID entity, Boolean enable ) RETURNS:  =>Sets whether an entity can produce anything (including upgrades)
Entity_EnableStrategicPoint( EntityID entity, Boolean enable ) RETURNS:  =>Sets whether an strategic point is active
Entity_ExtensionCount(  ) RETURNS:  =>Returns total entity extension count.
Entity_ExtensionEnabled( EntityID pEntity, ComponentDependencyIndex extID ) RETURNS:  =>Returns true if the entity has the specific extension enabled.
Entity_ExtensionExecuting( EntityID pEntity, ComponentDependencyIndex extID ) RETURNS:  =>Returns true if the specified extension on the entity will update every frame.
Entity_ExtensionName( EntityID pEntity, ComponentDependencyIndex extID ) RETURNS:  =>Returns a string name of the given extension on the entity.
Entity_ForceConstruct( EntityID e ) RETURNS:  =>Force constructs this entity but only if its a building
Entity_ForceSelfConstruct( EntityID e ) RETURNS:  =>Force a building to self construct if it's a building
Entity_FromID( Integer id ) RETURNS:  =>Get an entity from a mission editor ID.
Entity_GetActiveCommand( EntityID entity ) RETURNS:  =>Returns the active entity command.
Entity_GetAttackTarget( EntityID entity, SGroupID sgroup ) RETURNS:  =>Find the entity target. If found, the target squad is added to the sgroup. Entity targets like buildings are ignored.
Entity_GetAttackTargetEntity( EntityID entity ) RETURNS:  =>Returns the entity targeted by the given entity.
Entity_GetAttackTargetSquad( EntityID entity ) RETURNS:  =>Returns the squad targeted by the given entity.
Entity_GetBlueprint( EntityID entity ) RETURNS:  =>Returns the entity's blueprint
Entity_GetBuildingProgress( EntityID pEntity ) RETURNS:  =>Returns the construction progress (with range [0.0, 1.0] for a given entity.  Returns 0.0 if the entity is not a building.
Entity_GetCoverValue( EntityID entity ) RETURNS:  =>Get cover safety value from the where the entity is standing. The safety value is number from -.5 to .5.
Entity_GetDebugEntity(  ) RETURNS:  =>Get the currently tagged debug entity
Entity_GetFenceEntityCount( PropertyBagGroup ebp, Position startPos, Position endPos ) RETURNS:  =>Returns number of entities that will be placed if this ebp is built in a fence.
Entity_GetFilledHoldSquadSlots( EntityID entity ) RETURNS:  =>Returns the number of filled slots for squads in a hold in the HoldExtInfo
Entity_GetHeading( EntityID entity ) RETURNS:  =>Returns the heading of the entity.  The heading is currently a lua table with three entries (x, y, z)
Entity_GetHealth( EntityID entity ) RETURNS:  =>Returns the health of an entity.
Entity_GetHealthMax( EntityID entity ) RETURNS:  =>Returns the max health of an entity.
Entity_GetHealthPercentage( EntityID entity ) RETURNS:  =>Returns the percentage health, taking into account destructible buildings
Entity_GetID( EntityID entity ) RETURNS:  =>Returns the entities unique id in the world
Entity_GetInvulnerableMinCap( EntityID entity ) RETURNS:  =>Returns the invulnerable point in terms of percentage
Entity_GetLastAttacker( EntityID entity, SGroupID sgroup ) RETURNS:  =>Find the last squad attacker on this entity. If found, the squad is added to the sgroup
Entity_GetLastAttackers( EntityID entity, SGroupID group, Real timeSeconds ) RETURNS:  =>Find the squad attackers on this entity from the last seconds specified. The sgroup is cleared, then any squads found are added to the sgroup. Building attackers are ignored.
Entity_GetLastEntityAttackers( EntityID entity, EGroupID group, Real timeSeconds ) RETURNS:  =>Find the entity attackers on this entity from the last seconds specified. The sgroup is cleared, then any squads found are added to the sgroup. Building attackers are ignored.
Entity_GetMaxCaptureCrewSize( EntityID entity ) RETURNS:  =>Gets the maximum capture crew size from a recrewable entity
Entity_GetMaxHoldSquadSlots( EntityID entity ) RETURNS:  =>Returns the number of specified slots for squads in a hold in the HoldExtInfo
Entity_GetMeleeBlocksPerAttacks( Entity entity ) RETURNS:  =>Returns the number of blocks the entity will perform per number of attacks
Entity_GetNumInteractors( EntityID entity, String interactionType ) RETURNS:  =>Returns the number of entities connected to an entity via the interaction system.
Entity_GetOnFireHealthPercentThreshold( EntityID entity ) RETURNS:  =>Get the entity health percentage where it can be set on fire
Entity_GetPlayerOwner( EntityID entity ) RETURNS:  =>Returns the Player owner of the given entity. Entity MUST NOT be owned by the world.
Entity_GetPosition( EntityID entity ) RETURNS:  =>Returns the position of the entity.  The position is currently a lua table with three entries (x, y, z)
Entity_GetProductionQueueItem( EntityID entity, Integer index ) RETURNS:  =>Returns the blueprint for a production queue item with index.
Entity_GetProductionQueueItemType( EntityID entity, Integer index ) RETURNS:  =>Returns the production type (PITEM_Upgrade, PITEM_Spawn, PITEM_SquadUpgrade, PITEM_SquadReinforce, PITEM_PlayerUpgrade) for a production queue item with index.
Entity_GetProductionQueueSize( EntityID entity ) RETURNS:  =>Returns the number of items in the entities production queue.
Entity_GetProjectileBlocksPerAttacks( Entity entity ) RETURNS:  =>Returns the number of blocks the entity will perform per number of attacks
Entity_GetRangedBlocksPerAttacks( Entity entity ) RETURNS:  =>Returns the number of blocks the entity will perform per number of attacks
Entity_GetRemainingResourceDepositAmount( EntityID entity ) RETURNS:  =>Get remaining resource amount of the given entity.
Entity_GetResource( EntityID entity, Integer resourceType ) RETURNS:  =>Returns the amount of a certain resource that an entity has.
Entity_GetSightInnerHeight( EntityID entity ) RETURNS:  =>Returns the inner sight height for this entity
Entity_GetSightInnerRadius( EntityID entity ) RETURNS:  =>Returns the inner sight radius for this entity
Entity_GetSightOuterHeight( EntityID entity ) RETURNS:  =>Returns the outer sight height for this entity
Entity_GetSightOuterRadius( EntityID entity ) RETURNS:  =>Returns the outer sight radius for this entity
Entity_GetSquad( EntityID pEntity ) RETURNS:  =>Returns the Squad for the passed Entity. (May be nullptr)
Entity_GetSquadsHeld( EntityID pEntity, SGroupID sgroup ) RETURNS:  =>Adds squads held by an entity to an SGroup
Entity_GetStateModelBool( EntityID entity, String key ) RETURNS:  =>Returns a boolean value from the entity's state model corresponding to the given key.
Entity_GetStateModelEntityTarget( EntityID entity, String key ) RETURNS:  =>Returns an Entity value from the entity's state model corresponding to the given key.
Entity_GetStateModelEnumTableBool( EntityID entity, String key, Integer tableRowIndex ) RETURNS:  =>Returns a boolean value from the entity's state model corresponding to the given key and table row index (0 based).
Entity_GetStateModelEnumTableEntityTarget( EntityID entity, String key, Integer tableRowIndex ) RETURNS:  =>Returns an Entity value from the entity's state model corresponding to the given key and table row index (0 based).
Entity_GetStateModelEnumTableFloat( EntityID entity, String key, Integer tableRowIndex ) RETURNS:  =>Returns a float value from the entity's state model corresponding to the given key and table row index (0 based).
Entity_GetStateModelEnumTableInt( EntityID entity, String key, Integer tableRowIndex ) RETURNS:  =>Returns an integer value from the entity's state model corresponding to the given key and table row index (0 based).
Entity_GetStateModelEnumTablePlayerTarget( EntityID entity, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Player value from the entity's state model corresponding to the given key and table row index (0 based).
Entity_GetStateModelEnumTableSquadTarget( EntityID entity, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Squad value from the entity's state model corresponding to the given key and table row index (0 based).
Entity_GetStateModelEnumTableVector3f( EntityID entity, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Vector3f value from the entity's state model corresponding to the given key and table row index (0 based).
Entity_GetStateModelFloat( EntityID entity, String key ) RETURNS:  =>Returns a float value from the entity's state model corresponding to the given key.
Entity_GetStateModelInt( EntityID entity, String key ) RETURNS:  =>Returns an integer value from the entity's state model corresponding to the given key.
Entity_GetStateModelPlayerTarget( EntityID entity, String key ) RETURNS:  =>Returns a Player value from the entity's state model corresponding to the given key.
Entity_GetStateModelSquadTarget( EntityID entity, String key ) RETURNS:  =>Returns a Squad value from the entity's state model corresponding to the given key.
Entity_GetStateModelVector3f( EntityID entity, String key ) RETURNS:  =>Returns a Vector3f value from the entity's state model corresponding to the given key.
Entity_GetStateTreeTargeting_EntityTarget( Entity& entity, String type, String key ) RETURNS:  =>Returns an Entity value from the entity's StateTree EntityTargetingExt with the given type and key.
Entity_GetStateTreeTargeting_PlayerTarget( Entity& entity, String type, String key ) RETURNS:  =>Returns an Player value from the entity's StateTree EntityTargetingExt with the given type and key.
Entity_GetStateTreeTargeting_SquadTarget( Entity& entity, String type, String key ) RETURNS:  =>Returns an Squad value from the entity's StateTree EntityTargetingExt with the given type and key.
Entity_GetStateTreeTargeting_Vector3f( Entity& entity, String type, String key ) RETURNS:  =>Returns an Vector3f value from the entity's StateTree EntityTargetingExt with the given type and key.
Entity_GetStrategicPointSecureCount( EntityID entity ) RETURNS:  =>Returns the number of entities or squads currently securing this strategic point
Entity_GetTargetingType( Entity& entity ) RETURNS:  =>Get the entity's targeting type - auto, manual, or none
Entity_GetWeaponBlueprint( EntityID entity, Integer hardPointIndex ) RETURNS:  =>Returns a weapon hardpoint  ( 0 indexed )
Entity_GetWeaponHardpointCount( EntityID entity ) RETURNS:  =>Returns how many hardpoints an entity has
Entity_HandleAllAsserts(  ) RETURNS:  =>Call HandleAssert on an EntityAssertHandler for each entity
Entity_HasAbility( EntityID entity, ScarAbilityPBG ability ) RETURNS:  =>Tests to see if an entity has an ability
Entity_HasProductionQueue( EntityID entity ) RETURNS:  =>Returns true if an entity has a production queue.
Entity_HasUpgrade( EntityID pEntity, ScarUpgradePBG upgradePBG ) RETURNS:  =>Return true if the entity has purchased the specified upgrade.
Entity_InstantCaptureStrategicPoint( EntityID entity, PlayerID player ) RETURNS:  =>Strategic point will be captured instantly by the team of the supplied player
Entity_InstantConvertBuildingToFieldSupport( EntityID building, PlayerID owner ) RETURNS:  =>instantly converts a building into a fieldsupport
Entity_InstantRevertOccupiedBuilding( EntityID entity ) RETURNS:  =>Reverts an occupied building
Entity_IsAbilityActive( EntityID entity, ScarAbilityPBG pbg ) RETURNS:  =>True if the ability is active
Entity_IsActive( EntityID pEntity ) RETURNS:  =>Returns true if entity is alive and spawned
Entity_IsAlive( EntityID pEntity ) RETURNS:  =>Returns true if entity is still alive
Entity_IsAttacking( EntityID entity, Real time ) RETURNS:  =>Returns true if the entity is attacking within the time
Entity_IsBuilding( EntityID e ) RETURNS:  =>Returns true if the given entity is a building
Entity_IsBurnable( EntityID e ) RETURNS:  =>Returns true if the entity can be set on fire
Entity_IsBurning( EntityID e ) RETURNS:  =>Returns true if the given entity is burning (buildings on fire or non-buildings with burn_exts)
Entity_IsCamouflaged( EntityID entity ) RETURNS:  =>Returns whether the entity is camouflaged.
Entity_IsCapturableBuilding( EntityID entity ) RETURNS:  =>Returns true if the entity is a capturable building
Entity_IsCasualty( EntityID entity ) RETURNS:  =>Returns true if entity is a casualty else false
Entity_IsCuttable( EntityID entity ) RETURNS:  =>Returns whether this entity is cuttable
Entity_IsDemolitionReady( EntityID entity ) RETURNS:  =>Returns whether this entity's demolition charges are ready to be detonated
Entity_IsDoingAbility( EntityID entity, ScarAbilityPBG pbg ) RETURNS:  =>True if entity is currently performing the given ability
Entity_IsEBPBuilding( ScarEntityPBG ebp ) RETURNS:  =>Returns true if the given blueprint is a building
Entity_IsEBPObjCover( ScarEntityPBG ebp ) RETURNS:  =>Returns true if the given blueprint is objcover
Entity_IsEBPOfType( ScarEntityPBG ebp, String type ) RETURNS:  =>Returns true if the given blueprint is of the given type. Types are defined in type_ext/unit_type_list
Entity_IsHardpointActive( EntityID entity, Integer hardPointIndex ) RETURNS:  =>Returns whether a hardpoint is active ( 0 indexed )
Entity_IsHoldingAny( EntityID entity ) RETURNS:  =>Check if the entity has a hold on anything
Entity_IsInBackground( EntityID pEntity ) RETURNS:  =>Returns whether or not the entity is in the background.
Entity_IsInfantry( EntityID pEntity ) RETURNS:  =>Returns whether an entity is an infantry unit
Entity_IsInHold( EntityID entity ) RETURNS:  =>Checks if an entity is in a hold
Entity_IsInvulnerable( EntityID entity ) RETURNS:  =>get if an entity is invulnerable
Entity_IsMoving( EntityID pEntity ) RETURNS:  =>Returns whether an entity is moving.
Entity_IsOfType( EntityID entity, String type ) RETURNS:  =>Determines if this entity is of the given type. Types are defined in type_ext/unit_type_list
Entity_IsOnWalkableWall( EntityID entity ) RETURNS:  =>Returns if an Entity is currently on walkable wall.
Entity_IsPartOfSquad( EntityID pEntity ) RETURNS:  =>Returns true if the entity is part of a squad
Entity_IsPlane( EntityID pEntity ) RETURNS:  =>Returns whether an entity is a plane (has a flight extension)
Entity_IsPlannedStructure( EntityID entity ) RETURNS:  =>Returns whether an entity is a planned structure.
Entity_IsProducingSquad( EntityID entity, ScarSquadPBG pbg ) RETURNS:  =>Returns whether a particular squad blueprint is being produced by a given entity
Entity_IsProductionQueueAvailable( EntityID entity ) RETURNS:  =>Returns true if an entity has a production queue and if the queue is available
Entity_IsResourceGenerator( EntityID entity ) RETURNS:  =>Returns true if the entity is a resource generator and has resources remaining
Entity_IsSlotItem( EntityID entity ) RETURNS:  =>Return true if the entity is a slot item
Entity_IsSpawned( EntityID entity ) RETURNS:  =>if entity is spawned return true
Entity_IsStartingPosition( EntityID entity ) RETURNS:  =>Returns true if the entity is a starting position
Entity_IsStrategicPoint( EntityID pEntity ) RETURNS:  =>Returns true if the entity is a strategic point.
Entity_IsStrategicPointCapturedBy( EntityID entity, PlayerID player ) RETURNS:  =>Returns true if strategic point is captured by the team of the player provided.
Entity_IsSyncWeapon( EntityID entity ) RETURNS:  =>Return true if the entity is a team weapon
Entity_IsUnderAttack( EntityID entity, Real time ) RETURNS:  =>Returns true if the entity is under attack.
Entity_IsUnderAttackByPlayer( EntityID entity, PlayerID pAttackerOwner, Real time ) RETURNS:  =>Returns true if the entity is under attack by a certain player
Entity_IsUnderAttackFromDirection( EntityID entity, Integer offset, Real timeSeconds ) RETURNS:  =>Returns true if the entity was under attack from a certain direction (8 offset types, see ScarUtil.scar)
Entity_IsUnderConstruction( EntityID entity ) RETURNS:  =>Returns true if the entity is under construction.
Entity_IsUnderRepair( EntityID entity ) RETURNS:  =>Returns true if the entity is being repaired.
Entity_IsValid( Integer id ) RETURNS:  =>Check if an entity with the given ID can be found in the world
Entity_IsVaultable( EntityID pEntity ) RETURNS:  =>Returns whether an entity can be vaulted
Entity_IsVehicle( EntityID pEntity ) RETURNS:  =>Returns whether an entity is a vehicle
Entity_IsVictoryPoint( EntityID pEntity ) RETURNS:  =>Returns true if entityID is a victory point
Entity_Kill( EntityID entity ) RETURNS:  =>Kill the entity.  Sets health to 0, and triggers death effects.
Entity_Population( EntityID entity, CapType type ) RETURNS:  =>get entity pop cost, use CT_Personnel, CT_Vehicle, CT_Medic for captype
Entity_Precache( ScarEntityPBG ebp, Integer skinItemDefinitionID, PlayerID player, String resourceContainerCacheName, String source, String id ) RETURNS:  =>Precache entity resources and listen for event GE_EntityPrecached that it is done
Entity_RagDoll( EntityID entity ) RETURNS:  =>trigger the RagDoll skeleton driving.
Entity_RemoveAbility( EntityID entity, ScarAbilityPBG ability ) RETURNS:  =>Removes an ability that was previously added by Entity_AddAbility. You cannot remove static abilities (from AE: ability_ext)
Entity_RemoveBoobyTraps( EntityID pEntityTarget ) RETURNS:  =>Removes all booby-traps on this entity
Entity_RemoveDemolitions( EntityID entity ) RETURNS:  =>Removes all demolition charges on an entity
Entity_RemoveUpgrade( EntityID entity, ScarUpgradePBG upgrade ) RETURNS:  =>Removes an upgrade from an entity
Entity_RequiresSlottedSplineUpdateAfterBlueprintConversion( EntityID entity ) RETURNS:  =>Returns true if you should call Misc_UpdateSlottedSplinesContainingEGroupAfterBlueprintConversion with an egroup containing this entity after blueprint converting it. Make sure to batch together all your entities when using that function to reduce duplicated work.
Entity_ResetMeleeBlocksPerAttacks( Entity& entity ) RETURNS:  =>Reset melee block rate to AE tuned values
Entity_ResetProjectileBlocksPerAttacks( Entity& entity ) RETURNS:  =>Reset Projectile block rate to AE tuned values
Entity_ResetRangedBlocksPerAttacks( Entity& entity ) RETURNS:  =>Reset ranged block rate to AE tuned values
Entity_RestoreTargetingType( Entity& entity ) RETURNS:  =>Restore the targeting type to the default found in the ebp
Entity_SetAnimatorAction( EntityID pEntity, String actionName ) RETURNS:  =>Trigger animation action for an entity. Please only use this for simple animations
Entity_SetAnimatorActionParameter( EntityID pEntity, String actionParameterName, String actionParameterValue ) RETURNS:  =>Set animation action parameter for an entity. Please only use this for simple animations
Entity_SetAnimatorEvent( EntityID pEntity, String eventName ) RETURNS:  =>Set animation event for an entity. Please only use this for simple animations
Entity_SetAnimatorState( EntityID pEntity, String stateMachineName, String stateName ) RETURNS:  =>Set animation state of a state machine for an entity. Please only use this for simple animations
Entity_SetAnimatorVariable( EntityID pEntity, String variableName, Real value ) RETURNS:  =>Set animation variable value for an entity. Please only use this for simple animations
Entity_SetBackground( EntityID pEntity, Boolean isInBackground ) RETURNS:  =>Sets the entity to be in the background or foreground. By default, all entities are in the foreground
Entity_SetCrushable( EntityID entity, Boolean crushable ) RETURNS:  =>Overrides crushable behavior for an entity
Entity_SetCrushMode( EntityID entity, CrushMode mode ) RETURNS:  =>Changes the crush mode of a given entity.  Entity must have a crush extension.
Entity_SetDemolitions( PlayerID player, EntityID entity, Integer numcharges ) RETURNS:  =>Fully wires this entity for demolitions, if it's set up to be demolishable. 'player' is the one that owns the demolitions and can detonate them.
Entity_SetEnableCasualty( Boolean enable, EntityID entity ) RETURNS:  =>enable or disable the casualtext
Entity_SetExtEnabled( EntityID entity, String extID, Boolean enabled ) RETURNS:  =>Enables/disables an extension on the entity.
Entity_SetHeading( EntityID entity, Position pos, Boolean bInterpolate ) RETURNS:  =>Sets the heading of the entity.  The position is currently a lua table with three entries (x, y, z)
Entity_SetHeadingGroundSnapOptional( EntityID entity, Position pos, Boolean bSnapToGround, Boolean bInterpolate ) RETURNS:  =>Sets the heading of the entity.  The position is currently a lua table with three entries (x, y, z)
Entity_SetHealth( EntityID entity, Real healthPercent ) RETURNS:  =>Set the health of an entity.  healthPercent must be in the range [0.0, 1.0].
Entity_SetInvulnerableMinCap( EntityID entity, Real minHealthPercentage, Real resetTime ) RETURNS:  =>Make an entity invulnerable to physical damage when health is below the minimum health percentage
Entity_SetLockCurrentTierVisuals( EntityID entity, Boolean lockVisuals ) RETURNS:  =>Sets the lockCurrentTierVisuals flag in the TierExt so when an entity gets BP converted it doesn't update the visual assets. Must be called before BP conversion
Entity_SetMeleeBlocksPerAttacks( Entity entity, Integer blocks, Integer attacks ) RETURNS:  =>Set the number of blocks the entity will perform per number of attacks
Entity_SetOnFire( EntityID entity ) RETURNS:  =>Sets an object on fire (also works on buildings)
Entity_SetPlayerOwner( EntityID entity, PlayerID owner ) RETURNS:  =>Changes the owner of the given squad.
Entity_SetPosition( EntityID entity, Position pos ) RETURNS:  =>Sets the position of the entity.  The position is currently a lua table with three entries (x, y, z)
Entity_SetPositionWithinCell( EntityID entity, Position desiredPosition ) RETURNS:  =>If the entity is at the same cell as desiredPosition, try to set the entity position to it. If the cell is next to impass, set it to the center of the cell.
Entity_SetProjectileBlocksPerAttacks( Entity entity, Integer blocks, Integer attacks ) RETURNS:  =>Set the number of blocks the entity will perform per number of attacks
Entity_SetProjectileCanExplode( EntityID projectile, Boolean canExplode ) RETURNS:  =>Sets whether or not a projectile can explode.
Entity_SetRangedBlocksPerAttacks( Entity entity, Integer blocks, Integer attacks ) RETURNS:  =>Set the number of blocks the entity will perform per number of attacks
Entity_SetRecrewable( EntityID entity, Boolean capturable ) RETURNS:  =>Sets an entity to be recrewable or not when it becomes abandoned
Entity_SetRemainingResourceDepositAmount( EntityID entity, Real amount ) RETURNS:  =>Set remaining resource amount of the given entity.
Entity_SetResource( EntityID entity, Integer type, Real amount ) RETURNS:  =>Sets a specific amount of a certain resource type for an entity.
Entity_SetSharedProductionQueue( EntityID entity, Boolean shared ) RETURNS:  =>Enables shared team production on a building (teammates can build using THEIR resources)
Entity_SetShowSilhouette( EntityID entity, Boolean show ) RETURNS:  =>Show or hide the entity's silhouette when behind other objects
Entity_SetStateModelBool( EntityID entity, String key, Boolean value ) RETURNS:  =>Sets a boolean value in the entity's state model corresponding to the given key.
Entity_SetStateModelEntityTarget( EntityID entity, String key, EntityID value ) RETURNS:  =>Sets an Entity TargetHandle value in the entity's state model corresponding to the given key.
Entity_SetStateModelEnumTableBool( EntityID entity, String key, Integer tableRowIndex, Boolean value ) RETURNS:  =>Sets a boolean value in the entity's state model corresponding to the given key and table row index (0 based).
Entity_SetStateModelEnumTableEntityTarget( EntityID entity, String key, Integer tableRowIndex, EntityID value ) RETURNS:  =>Sets an Entity TargetHandle value in the entity's state model corresponding to the given key and table row index (0 based).
Entity_SetStateModelEnumTableFloat( EntityID entity, String key, Integer tableRowIndex, Real value ) RETURNS:  =>Sets a float value in the entity's state model corresponding to the given key and table row index (0 based).
Entity_SetStateModelEnumTableInt( EntityID entity, String key, Integer tableRowIndex, Integer value ) RETURNS:  =>Sets an integer value in the entity's state model corresponding to the given key and table row index (0 based).
Entity_SetStateModelEnumTablePlayerTarget( EntityID entity, String key, Integer tableRowIndex, PlayerID value ) RETURNS:  =>Sets a Player TargetHandle value in the entity's state model corresponding to the given key and table row index (0 based).
Entity_SetStateModelEnumTableSquadTarget( EntityID entity, String key, Integer tableRowIndex, SquadID value ) RETURNS:  =>Sets a Squad TargetHandle value in the entity's state model corresponding to the given key and table row index (0 based).
Entity_SetStateModelEnumTableVector3f( EntityID entity, String key, Integer tableRowIndex, Position value ) RETURNS:  =>Sets a Vector3f value in the entity's state model corresponding to the given key and table row index (0 based).
Entity_SetStateModelFloat( EntityID entity, String key, Real value ) RETURNS:  =>Sets a float value in the entity's state model corresponding to the given key.
Entity_SetStateModelInt( EntityID entity, String key, Integer value ) RETURNS:  =>Sets an integer value in the entity's state model corresponding to the given key.
Entity_SetStateModelPlayerTarget( EntityID entity, String key, PlayerID value ) RETURNS:  =>Sets a Player TargetHandle value in the entity's state model corresponding to the given key.
Entity_SetStateModelSquadTarget( EntityID entity, String key, SquadID value ) RETURNS:  =>Sets a Squad TargetHandle value in the entity's state model corresponding to the given key.
Entity_SetStateModelVector3f( EntityID entity, String key, Position value ) RETURNS:  =>Sets a Vector3f value in the entity's state model corresponding to the given key.
Entity_SetStayBurningWhileInvulnerable( EntityID entity, Boolean shouldStayBurning ) RETURNS:  =>Sets a flag that tells a building to keep burning while invulnerable (for atmosphere).
Entity_SetStrategicPointNeutral( EntityID entity ) RETURNS:  =>Sets a strategic point to neutral (not owned by any team)
Entity_SetStrategicPointReticuleVisible( EntityID entity, Boolean visible ) RETURNS:  =>Sets whether a strategic point's reticule is visible
Entity_SetTargetingType( Entity& entity, TargetingType type ) RETURNS:  =>Set the allowable methods of targeting this entity
Entity_SetWorldOwned( EntityID entity ) RETURNS:  =>Makes an entity neutral
Entity_SimHide( EntityID entity, Boolean hide ) RETURNS:  =>Shows/hides the entity in the simulation
Entity_SnapToGridAndGround( EntityID entity, Boolean interpolate ) RETURNS:  =>Snaps the entity to the grid and ground.
Entity_Spawn( EntityID entity ) RETURNS:  =>Spawn the entity at its current position
Entity_SpawnDoNotAddPathfindingAndCollision( EntityID entity ) RETURNS:  =>Spawn the entity at its current position without pathfinding and collision
Entity_SpawnToward( EntityID entity, Position pos, Position toward, String spawnType ) RETURNS:  =>Spawn the entity at a given position
Entity_StopAbility( EntityID entity, ScarAbilityPBG ability, Boolean bIsEarlyExit ) RETURNS:  =>Abruptly stops an active ability
Entity_StopFire( EntityID entity ) RETURNS:  =>Puts out the fire on an object (also works on buildings)
Entity_SuggestPosture( EntityID entity, Integer posture, Real duration ) RETURNS:  =>Suggests a posture to an entity, lasting the passed duration
Entity_SupportsDemolition( EntityID entity ) RETURNS:  =>Returns whether this entity is set up to have demolitions placed on it
Entity_TagDebug( EntityID entity ) RETURNS:  =>Tags the entity to be used for debugging
Entity_VisHide( EntityID pEntity, Boolean bHide ) RETURNS:  =>Hides or shows an entity visually.
Enum_ToNumber( StackVar var ) RETURNS:  =>Converts any enum value to a number
Enum_ToString( StackVar var ) RETURNS:  =>Converts any enum value to a string
Event_CreateAND( Function callback, Table data, Table events, Real delay ) RETURNS:  =>Creates a Callback Event that triggers when ALL of the specified events are triggered.
Event_Death( Function callback, EGroupID group, ALL_UNITS/ANY_MEMBER/ANY_SQUAD selection, Boolean repeat, Boolean requireAllEntitiesDead, Table data ) RETURNS:  =>Callback given callback function with data, when the certain objects die.
Event_Delay( Real seconds ) RETURNS:  =>Pauses for a given amount of time. This function MUST be called from a CTRL object in NISlet events only!
Event_EncounterCanSeePlayerSquads( Function callback, Table data, SGroupID encounter, PlayerID player, Real delay ) RETURNS:  =>Callback given callback function with data, when any squad in the encounter can see any squad owned by the player
Event_EnterProximity( Function callback, Table data, ConstTargetHandle target, Boolean arequireAll, Marker location, REAL range, Boolean repeat, Boolean triggerOnEnter ) RETURNS:  =>Callback given callback function with data when target enters range
Event_ExitProximity( Function callback, Table data, ConstTargetHandle target, Boolean arequireAll, Marker location, REAL range, Boolean repeat, Boolean triggerOnEnter ) RETURNS:  =>Callback given callback function with data when target exits range
Event_GroupCount( Function callback, Table data, EGroupID / SGroup group, Integer amount (value to be compared against), Boolean repeat ) RETURNS:  =>Callback given callback function with data, when the amount of objects matches the requested conditions - Note: Does not count team weapons
Event_GroupIsDeadOrRetreating( Function callback, Table data, EGroupID / SGroup group, Real delay ) RETURNS:  =>Callback given callback function with data, when group is dead(empty).
Event_GroupLeftAlive( Function callback, Table data, EGroupID / SGroup group, Integer amount, Real delay ) RETURNS:  =>Callback given callback function with data, when the amount of entities left in a group drops below amount.
Event_IsBeingSkipped(  ) RETURNS:  =>Returns true if the event is being skipped.
Event_IsEngaged( Function callback, Table data, Real attackTime, Real delay ) RETURNS:  =>Callback given callback function with data, when group is doing an attack or is under attack in the last attackTime seconds.
Event_IsOutOfCombat( Function callback, Table data, EGroupID / SGroup group, Real attackTime, Real delay ) RETURNS:  =>Callback given callback function with data, when group is out of combat  in the last attackTime seconds.
Event_IsSelected( Function callback, Table data ) RETURNS:  =>Callback when a target element is selected.
Event_IsUnderAttack( Function callback, Table data, SGroupID = SGroup, EGroupID = EGroup, Real attackTime, PlayerID player, Real delay ) RETURNS:  =>Callback given callback function with data, when sgroup or egroup are under attack in the last attackTime seconds.
Event_PlayerCanSeeElement( Function callback, Table data, PlayerID team, SGroupID element ) RETURNS:  =>Callback given callback function with data, when the given player can see the element.
Event_Proximity( Function callback, Table data, ConstTargetHandle target, Marker location, REAL range, Real delay ) RETURNS:  =>Callback given callback function with data when target enters location.
Event_Save( SaveTriggerType type ) RETURNS:  =>Starts a save event the same way as Event_Start, but automatically sets highest priority and promotes the request
Event_SaveWithName( SaveTriggerType type, String fileName ) RETURNS:  =>Starts a save event the same way as Event_Save, but with a filename specified.
Event_SGroupCountMember( Function callback, Table data, SGroupID group, Integer amount (value to be compared against), Boolean repeat ) RETURNS:  =>Callback given callback function with data, when the amount of members left in a squad matches the requested conditions
Event_Skip(  ) RETURNS:  =>Completes execution of the event immediately (all calls to Wait() are ignored)
Event_Start( LuaFunction eventFunction, Integer int ) RETURNS:  =>Starts event.  Event will not start until all rules are evaluated for this frame!
Event_StartEx( LuaFunction eventFunction, Integer int, LuaFunction onComplete ) RETURNS:  =>Starts an event the same way as Event_Start, but calls a user defined function when the event is over
Event_WhileInProximity( Function callback, Table data, ConstTargetHandle target, Boolean arequireAll, Marker location, REAL range, Boolean repeat, Boolean triggerOnEnter ) RETURNS:  =>Callback given callback function with data when target remains in range (called every interval seconds)
fatal( lua_State* state ) RETURNS:  =>Throws an error to lua and print out the error message
fatal( lua_State* state ) RETURNS:  =>Throws an error to lua and print out the error message
Formation_GetDimensionsAndOffset( SGroupID sgroup ) RETURNS:  =>Calculate the dimensions and centre offset of a formation for given squads.  Returns as a ScarPosition {x = Width, y = Height, z = centre offset along forward (Height) direction}.  Returns a zero vector if error.
Formation_PlaceSquadsInFormation( SGroupID sgroup, Position position, Position direction ) RETURNS:  =>Calculate formation positions and set the squads' positions to the formation positions
FOW_Blockers(  ) RETURNS:  =>Toggle blockers info
FOW_ExploreAll(  ) RETURNS:  =>Explores entire map for all players. (Careful where this is used. For example, if used before the first tick, a statetree may change an entity's visual on the first tick, so the ghost's visual will not reflect the entity's.)
FOW_ForceRevealAllUnblockedAreas(  ) RETURNS:  =>Reveal FOW except blockers for all players. Does not create ghosts and ghosts will not be present if undone.
FOW_PlayerExploreAll( PlayerID player ) RETURNS:  =>Explores entire map for one player. (Careful where this is used. For example, if used before the first tick, a statetree may change an entity's visual on the first tick, so the ghost's visual will not reflect the entity's.)
FOW_PlayerRevealAll( PlayerID player ) RETURNS:  =>Reveal FOW for specified player
FOW_PlayerRevealArea( PlayerID player, Position pos, Real radius, Real durationSecs ) RETURNS:  =>Reveals a circular area for the given player over a given duration.
FOW_PlayerRevealSGroup( PlayerID player, SGroupID group, Real radius, Real durationSecs ) RETURNS:  =>Reveals a SGroup in the Fog of War for a player over a given duration.
FOW_PlayerUnExploreAll( PlayerID player ) RETURNS:  =>Unexplores entire map for one player.
FOW_PlayerUnRevealAll( PlayerID player ) RETURNS:  =>Use to undo a FOW_RevealAll for specified player
FOW_PlayerUnRevealArea( PlayerID player, Position pos ) RETURNS:  =>UnReveals a circular area that was previously revealed for a given player.
FOW_PlayerUnRevealSGroup( PlayerID player, SGroupID group ) RETURNS:  =>UnReveal a SGroup previously revealed to a Player
FOW_RevealAll(  ) RETURNS:  =>Reveal FOW for all players
FOW_RevealArea( Position pos, Real radius, Real durationSecs ) RETURNS:  =>Reveals a circular area for all alive players over a given duration.
FOW_RevealEGroup( EGroupID group, Real radius, Real durationSecs ) RETURNS:  =>Reveals an EGroup in the Fog of War for all alive players over a given duration.
FOW_RevealEntity( EntityID entity, Real radius, Real durationSecs ) RETURNS:  =>Reveals an entity in the Fog of War for all alive players over a given duration.
FOW_RevealSGroup( SGroupID group, Real radius, Real durationSecs ) RETURNS:  =>Reveals a SGroup in the Fog of War for all alive players over a given duration.
FOW_RevealSquad( SquadID squad, Real radius, Real durationSecs ) RETURNS:  =>Reveals a squad in the Fog of War for all alive players over a given duration.
FOW_RevealTerritory( PlayerID player, Integer sectorID, Real durationSecs, Boolean mustOwn ) RETURNS:  =>Reveals a territory to a player
FOW_UIRevealAll(  ) RETURNS:  =>Reveal FOW for all players by disabling rendering of FOW without triggering a FOW in the game simulation
FOW_UIRevealAll_Transition( Real duration ) RETURNS:  =>Use to transition from game to RevealAll
FOW_UIRevealAllEntities(  ) RETURNS:  =>Use to reveal all Entities in FoW
FOW_UIUnRevealAll(  ) RETURNS:  =>Use to undo a FOW_UIRevealAll
FOW_UIUnRevealAll_Transition( Real duration ) RETURNS:  =>Use to transition into game
FOW_UIUnRevealAllEntities(  ) RETURNS:  =>Use to unreveal all Entities in FoW
FOW_UndoForceRevealAllUnblockedAreas(  ) RETURNS:  =>Use to undo a FOW_ForceRevealAllUnblockedAreas.
FOW_UnExploreAll(  ) RETURNS:  =>Unexplores entire map for all players
FOW_UnRevealAll(  ) RETURNS:  =>Use to undo a FOW_RevealAll
FOW_UnRevealArea( Position pos ) RETURNS:  =>UnReveals a circular area that was previously revealed for all alive players.
FOW_UnRevealTerritory( PlayerID player, Integer sectorID ) RETURNS:  =>Unreveals a territory sector
fx_dump(  ) RETURNS:  =>force the gamma
fx_forcelod( Integer lod ) RETURNS:  =>force the LOD of the FX system (use 0 to enable dynamic LOD)
fx_logenable( Boolean enable ) RETURNS:  =>enable logging of fx, it it wasn't already
fx_refresh(  ) RETURNS:  =>Force effects to be recreated.
fx_toggle(  ) RETURNS:  =>toggle effects on or off
fx_toggleRendering(  ) RETURNS:  =>toggle effects rendering on or off
fx_usedebugshader( Boolean enable ) RETURNS:  =>use the debugshader, which will render all fx green
Game_AIControlLocalPlayer(  ) RETURNS:  =>Take over control of the local player
Game_ConvertInputEnabledFlagEnumToInt( InputEnabledFlag flag ) RETURNS:  =>Returns the input enabled flag as an integer.
Game_ConvertVisibilityFlagEnumToInt( VisibilityFlag flag ) RETURNS:  =>Returns the visibility flag as an integer.
Game_DeleteSaveGameDev( String filename ) RETURNS:  =>deletes save game(s), even if it is not loadable with the current version of the game
Game_EnableInput( Boolean enable ) RETURNS:  =>Enables/Disables all input EXCEPT for ESC and F10.
Game_EndSubTextFade(  ) RETURNS:  =>Removes title text displayed with Game_SubTextFade(...) immediately
Game_EndTextTitleFade(  ) RETURNS:  =>Removes title text displayed with Game_TextTitleFade(...) immediately
Game_FastForwardProduction( Real secondsForward ) RETURNS:  =>Fast forward all production queues as if x seconds passed, returns info about what has been produced Returns a lua table of the format { (string)PlayerID : { (string)EntityProducerName : { "research" : { (string)researchedItemName : (int)number of times researched }, "production" : { (string)producedItemName : (int)number of items produced }, }, }, } for each player present, for each entity that produced after fast forwarding, for each item researched and produced
Game_FastForwardResourceIncome( Real secondsForward ) RETURNS:  =>For all players fast forwards their resource income as if x seconds passed
Game_GetInputEnabledFlag(  ) RETURNS:  =>Returns the input enabled flag.
Game_GetLocalPlayer(  ) RETURNS:  =>Get the local player. (should only be used for UI purpose) (not deterministic)
Game_GetLocalPlayerID(  ) RETURNS:  =>Get the local player id. (should only be used for UI purpose) (not deterministic)
Game_GetSimRate(  ) RETURNS:  =>get the simulation update rate
Game_GetSPDifficulty(  ) RETURNS:  =>Returns current single player difficulty. Values are GD_EASY, GD_NORMAL, GD_HARD, GD_EXPERT.
Game_GetTerrainTypeVariables( StackVarTable terrainVars ) RETURNS:  =>injects terrain type values into passed table to use for terrain creation
Game_GetVisibilityFlag(  ) RETURNS:  =>Returns the game's visibility flag.
Game_HasLocalPlayer(  ) RETURNS:  =>Determine if there is a valid local player. (UI only -- nondeterminstic) (not deterministic)
Game_IsDataLocked( String dataID ) RETURNS:  =>Returns lock state of stored data at location named by dataID.
Game_IsFtue(  ) RETURNS:  =>check if scenario has FTUE boolean set in match setup
Game_IsPaused(  ) RETURNS:  =>Returns whether the game is paused.
Game_IsPerformanceTest(  ) RETURNS:  =>Returns true if the we're running the performance test.
Game_IsRTM(  ) RETURNS:  =>Use to test whether the game is running in RTM mode or not. Using -rtm from the command line will cause this function to also return true in non-RTM builds.
Game_IsSaving(  ) RETURNS:  =>Checks that the save system has a save queued or is actively saving.
Game_LaunchSPGeneratedMap( String biomePbgName, String layoutPbgName, String sizePbgName, Integer difficulty, StackVarTable terrainResult ) RETURNS:  =>load this scenario as an single player match
Game_LoadDataStore( String id, String path, Boolean binary ) RETURNS:  =>Load data store to disk
Game_LoadFromFileDev( String filename ) RETURNS:  =>load this game as a single player match, full path is expected excluding extension
Game_LoadGame( String name ) RETURNS:  =>load the savegame with the given internal name from Campaign or Skirmish folder depending on currently running scenario
Game_LoadSP( String scenarioName, Integer difficulty ) RETURNS:  =>load this scenario as an single player match
Game_LockRandom(  ) RETURNS:  =>If you are running something that is non-deterministic like a getlocalplayer conditional, you can lock the random to make sure no one down the callstack will throw the game random index out of sync and cause a sync error. REMEMBER TO UNLOCK WHEN YOU ARE DONE
Game_QuitApp(  ) RETURNS:  =>Quits the app immediately
Game_QuitAppWithCode( Integer exitCode ) RETURNS:  =>Quits the app immediately with the given exitCode
Game_RemoveTableData( String path ) RETURNS:  =>Removes the data store at the given path.
Game_RequestSetLocalPlayer( PlayerID player ) RETURNS:  =>Requests the local player to be set on the next update. (not deterministic)
Game_RetrieveTableData( String dataID, Boolean clearFromStorage ) RETURNS:  =>Loads table data stored at datastore[dataID] into global lua table var named <dataID>. Set clearFromStorage to true to clear data from store.
Game_SaveDataStore( String id, String path, Boolean binary ) RETURNS:  =>Save data store to disk
Game_SaveGameExistsDev( String filename ) RETURNS:  =>checks if the save game exists in dev folder and is loadable, filename is expected excluding folder and extension
Game_ScreenFade( Real r, Real g, Real b, Real a, Real timeSecs ) RETURNS:  =>Fades the screen to a given RGBA colour over a number of seconds
Game_SendCustomChallengeEvent( PlayerID player, ChallengeEventType eventType, Real amount ) RETURNS:  =>Updates the status of an in-game achievement or challenge.
Game_SetDataLock( String dataID, Boolean lock ) RETURNS:  =>sets lock state for stored data at location named by dataID.
Game_SetInputEnabledFlag( Integer flag ) RETURNS:  =>Sets the input enabled flag.
Game_SetMapExplored( PlayerID player ) RETURNS:  =>Sets the map explored state for the ExploredAll cheat
Game_SetPlayerColour( target player, or "Colour_Neutral". ) RETURNS:  =>Set the player color for the world visuals from preset colors defined in tuning_simulation\ui_team_colours.
Game_SetPlayerSlotColour( target player, 1 based player slot index ) RETURNS:  =>Set the player color for the world visuals by slot index from preset colors defined in tuning_simulation\ui_player_colours.
Game_SetPlayerUIColour( target player, or "Colour_Neutral". ) RETURNS:  =>Set the player color for the UI from preset colors defined in tuning_simulation\ui_team_colours. Does not affect world visuals.
Game_SetPlayerUISlotColour( target player, 1 based player slot index ) RETURNS:  =>Set the player color for the UI by slot index from preset colors defined in tuning_simulation\ui_player_colours. Does not affect world visuals.
Game_SetSimRate( Real rate ) RETURNS:  =>set the simulation update rate
Game_SetVisibility( VisibilityFlag flag, Boolean visible ) RETURNS:  =>Sets the visibility of the specified game visibility flag.
Game_SetVisibilityFlag( Integer flag ) RETURNS:  =>Sets the game visibility flag.
Game_ShowPauseMenu(  ) RETURNS:  =>Brings up the pause menu. The game does not get paused until the end of the current sim tick, so anything that comes after Game_ShowPauseMenu in your function will still get executed, as well as any rules set to run during that frame.
Game_SkipAllEvents( Boolean deleteQueued ) RETURNS:  =>Skips all events. Can either delete or skip queued events.
Game_SkipEvent(  ) RETURNS:  =>Skips the currently playing event (and stops current sound).
Game_StoreTableData( String dataID, RefTable table ) RETURNS:  =>Stores provided table into long-lived data store at location named by dataID.
Game_TextTitleFade( String text, Real fadeIn, Real duration, Real fadeOut ) RETURNS:  =>Shows title text that fades in and out over a specified durations
Game_TransitionToState( String stateName, Real transitionTimeSec ) RETURNS:  =>Transitions to another atmosphere. Overwrites current transitions. Uses predefined atmosphere settings (only compatible with EEditor maps).
Game_UnLockRandom(  ) RETURNS:  =>unlock the random from a previous lockrandom call only
GetCameraNameFromPbgName( String pbgPath ) RETURNS:  =>get camera name from PBG path
getgametype(  ) RETURNS:  =>Gets the type of game we are playing ( GT_SP = 0, GT_MP = 1, GT_Skirmish = 2)
getlocalplayer(  ) RETURNS:  =>Returns the local player index
getmapname(  ) RETURNS:  =>Returns the scenario name (shortname version eg. "2P Semois")
GetPhysicsDebug(  ) RETURNS:  =>Get physics debug toggle value
GetPhysicsRaycastAsCapsuleDebug(  ) RETURNS:  =>Get physics debug toggle value
getsimrate(  ) RETURNS:  =>Returns the current simulation rate.
Ghost_DisableSpotting(  ) RETURNS:  =>Disable the spotting of enemy entities that may become ghosts in the FoW.
Ghost_EnableSpotting(  ) RETURNS:  =>Enable the spotting of enemy entities that may become ghosts in the FoW.
HintPoint_AddToEGroup( EGroupID egroup, Integer priority, Boolean visible, LuaFunction function, String dataTemplate, String hint, Boolean arrow, Position arrowOffset, Integer actionType, String iconName, Boolean visibleInFOW ) RETURNS:  =>Deprecated.
HintPoint_AddToEntity( EntityID entity, Integer priority, Boolean visible, LuaFunction function, String dataTemplate, String hint, Boolean arrow, Position arrowOffset, Integer objectiveID, Integer actionType, String iconName, Boolean visibleInFOW ) RETURNS:  =>For internal use only.
HintPoint_AddToPosition( Position position, Integer priority, Boolean visible, LuaFunction function, String dataTemplate, String hint, Boolean arrow, Position arrowOffset, Integer objectiveID, Integer actionType, String iconName, Boolean visibleInFOW ) RETURNS:  =>For internal use only.
HintPoint_AddToSGroup( SGroupID sgroup, Integer priority, Boolean visible, LuaFunction function, String dataTemplate, String hint, Boolean arrow, Position arrowOffset, Integer actionType, String iconName, Boolean visibleInFOW ) RETURNS:  =>Deprecated.
HintPoint_AddToSquad( SquadID squad, Integer priority, Boolean visible, LuaFunction function, String dataTemplate, String hint, Boolean arrow, Position arrowOffset, Integer objectiveID, Integer actionType, String iconName, Boolean visibleInFOW ) RETURNS:  =>For internal use only.
HintPoint_ClearFacing( Integer id ) RETURNS:  =>Clear the hint point arrow facing value.
HintPoint_RemoveAll(  ) RETURNS:  =>Remove all hint points.
HintPoint_SetDisplayOffsetInternal( Integer id, Position offset ) RETURNS:  =>Add a projected offset to the specified hint point.
HintPoint_SetFacingEntity( Integer id, EntityID entity ) RETURNS:  =>Face the hint point arrow towards this entity.
HintPoint_SetFacingPosition( Integer id, Position position ) RETURNS:  =>Face the hint point arrow towards this position.
HintPoint_SetFacingSquad( Integer id, SquadID squad ) RETURNS:  =>Face the hint point arrow towards this squad.
HintPoint_SetVisibleInternal( Integer id, Boolean visible ) RETURNS:  =>Show or hide the specified hint point.
Hold_Info(  ) RETURNS:  =>Toggle hold info
inv_dump(  ) RETURNS:  =>Dump content of inventory to a file
IsEconomyClassStructure_CS( PropertyBagGroup pbg ) RETURNS:  =>Returns true if the pbg class list contains a type that has economic utility
IsSecuringStructure_CS( PropertyBagGroup pbg ) RETURNS:  =>Can this structure be used to secure territory
IsSecuringStructurePlacedOnPoint_CS( PropertyBagGroup pbg ) RETURNS:  =>Can this structure be used to secure territory
IsStructure_CS( PropertyBagGroup pbg ) RETURNS:  =>Returns true if this object is a structure (something with a site_ext)
LCWatcher_Activate( Boolean on ) RETURNS:  =>turns on the watcher and displays the lists if any
LCWatcher_AddFilter( String stateName, String filter ) RETURNS:  =>Needs the proper luaConfig id, and looks through that list to add the filter.
LCWatcher_FilterExists( String stateName, String filter ) RETURNS:  =>Needs the proper luaConfig id, returns true if filter exists.
LCWatcher_IsActive(  ) RETURNS:  =>Returns true if LCWatcher is active.
LCWatcher_RemoveFilter( String stateName, String filter ) RETURNS:  =>Needs the proper luaConfig id, removes filter added by LCWatch_AddFilter.
LCWatcher_SelectState( String state ) RETURNS:  =>Selects a LuaConfig state to watch.  Returns true if state is registered and false if it has not.
listplayers(  ) RETURNS:  =>Print all players information.
Loadout_GetEquippedArmyUnitAtIndex( PlayerID player, Integer index ) RETURNS:  =>Get the player's equipped elite at the specified index for their currently set race
Loadout_GetEquippedArmyUnitsCount( PlayerID player ) RETURNS:  =>Get the number of elites currently equipped for the player's current race
LOC( String string ) RETURNS:  =>DEV ONLY: Converts ansi text to localized text.
Loc_Empty(  ) RETURNS:  =>Returns an empty localized string.
Loc_FormatInteger( Integer integer ) RETURNS:  =>Returns a localized string containing the integer.
Loc_FormatNumber( Real number, Integer numDecimalPlaces ) RETURNS:  =>Returns a localized string containing the number to the specified number of decimal places.
Loc_FormatTime_H_M_S( Real secs, Boolean leading_zeroes ) RETURNS:  =>Returns a formatted time string in hours, minutes, and seconds. can omit leading zeroes.
Loc_FormatTime_M_S( Real secs, Boolean leading_zeroes ) RETURNS:  =>Returns a formatted time string in minutes and seconds. can omit leading zeroes.
Loc_FormatTime_M_S_MS( Real secs, Boolean leading_zeroes ) RETURNS:  =>Returns a formatted time string in minutes, seconds, and milliseconds. can omit leading zeroes.
Loc_GetString( StackVar id ) RETURNS:  =>Returns the localized string identified by the specified id.
LocalCommand_Entity( PlayerID player, EGroupID egroup, EntityCommandType entityCommand ) RETURNS:  =>Send a entity command to a entity group(CMD_DefaultAction, CMD_Stop, CMD_Destroy, CMD_BuildSquad, CMD_CancelProduction, CMD_RallyPoint, CMD_AttackForced)
LocalCommand_EntityAbility( PlayerID player, EGroupID egroup, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send an entity ability command (CMD_Ability) to an entity
LocalCommand_EntityBuildSquad( PlayerID player, EGroupID egroup, ScarSquadPBG squadPbg ) RETURNS:  =>Send a squad command to a entity group with custom data
LocalCommand_EntityEntity( PlayerID player, EGroupID egroup, EntityCommandType entityCommand, EGroupID target ) RETURNS:  =>Send a entity-based command to an entity group.
LocalCommand_EntityExt( PlayerID player, EGroupID egroup, EntityCommandType entityCommand, Integer cmdparam, Boolean queued ) RETURNS:  =>Send a squad command to a squad group with custom data
LocalCommand_EntityPos( PlayerID player, EGroupID egroup, EntityCommandType entityCommand, Position target ) RETURNS:  =>Send a position command to an entity group.
LocalCommand_EntityPosAbility( PlayerID player, EGroupID egroup, Position pos, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send a positional ability command (CMD_Ability) to an entity
LocalCommand_EntityPosDirAbility( PlayerID player, EGroupID egroup, Position pos, Position dir, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send a positional/directional ability command (CMD_Ability) to an entity
LocalCommand_EntityPosSquad( PlayerID player, EGroupID egroup, EntityCommandType entityCommand, Position target, SGroupID sgroup ) RETURNS:  =>Send a dual target (position and squad) command to an entity group.
LocalCommand_EntitySquad( PlayerID player, EGroupID egroup, EntityCommandType entityCommand, SGroupID target ) RETURNS:  =>Send a squad-based command to an entity group.
LocalCommand_EntityTargetEntityAbility( PlayerID player, EGroupID egroup, EntityID entityTarget, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send an entity-targeting ability command (CMD_Ability) to an entity
LocalCommand_EntityTargetSquadAbility( PlayerID player, EGroupID egroup, SquadID squadTarget, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send an squad-targeting ability command (CMD_Ability) to an entity
LocalCommand_EntityUpgrade( PlayerID player, EGroupID egroup, ScarUpgradePBG upgrade, Boolean instant, Boolean queued ) RETURNS:  =>Send a squad command to a entity group with custom data
LocalCommand_Player( PlayerID player, PlayerID dest, PlayerCommandType playerCommand ) RETURNS:  =>Send a player command to a player
LocalCommand_PlayerAbility( PlayerID player, PlayerID dest, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq ) RETURNS:  =>Send a player ability command (PCMD_Ability) to a player
LocalCommand_PlayerEntity( PlayerID player, PlayerID dest, PlayerCommandType playerCommand, EGroupID target ) RETURNS:  =>Send an entity command to a player.
LocalCommand_PlayerExt( PlayerID player, PlayerID dest, PlayerCommandType playerCommand, Integer cmdparam, Boolean queued ) RETURNS:  =>Send a player command to a player with a custom flag
LocalCommand_PlayerMultiTargetAbility( PlayerID caster, vector<ConstTargetHandle> targets, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq ) RETURNS:  =>Send a player a command to use a multi-target ability on the given targets.
LocalCommand_PlayerPlaceAndConstructEntitiesPlanned( PlayerID player, ScarEntityPBG ebp, Position position, Position facingPos, Boolean queued, Boolean payOnApply ) RETURNS:  =>Place a planned structure
LocalCommand_PlayerPlaceAndConstructFencePlanned( PlayerID player, ScarEntityPBG ebp, Position posStart, Position posEnd, Boolean queued, Boolean payOnApply ) RETURNS:  =>Place a planned fence
LocalCommand_PlayerPlaceAndConstructSlottedSplinePlanned( PlayerID player, ScarEntityPBG ebp, Position posStart, Position posEnd, Boolean queued, Boolean payOnApply ) RETURNS:  =>Place a planned slotted spline
LocalCommand_PlayerPos( PlayerID player, PlayerID dest, PlayerCommandType playerCommand, Position pos ) RETURNS:  =>Send a position command to a player.
LocalCommand_PlayerPosAbility( PlayerID player, PlayerID dest, Position pos, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq ) RETURNS:  =>Send a positional ability command (PCMD_Ability) to a player
LocalCommand_PlayerPosDirAbility( PlayerID player, PlayerID dest, Position pos, Position dir, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq ) RETURNS:  =>Send a positional/directional ability command (PCMD_Ability) to a player
LocalCommand_PlayerPosExt( PlayerID player, PlayerID dest, PlayerCommandType playerCommand, Position pos, Integer cmdparam, Boolean queued ) RETURNS:  =>Send a position command to a player with extra info
LocalCommand_PlayerSquadConstructBuilding( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position position, Position facingPos, Boolean queued ) RETURNS:  =>Send a player command to itself to order squads in the sgroup to construct the building at specific position and facing
LocalCommand_PlayerSquadConstructBuildingCheat( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position position, Position facingPos, Boolean queued ) RETURNS:  =>Send a player command to itself to order squads in the sgroup to construct the building at specific position and facing
LocalCommand_PlayerSquadConstructFence( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position posStart, Position posEnd, Boolean queued ) RETURNS:  =>Send a player command to itself to order squads in the sgroup to construct fences from posStart to posEnd
LocalCommand_PlayerSquadConstructFenceCheat( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position posStart, Position posEnd, Boolean queued ) RETURNS:  =>Send a player command to itself to order squads in the sgroup to construct fences from posStart to posEnd
LocalCommand_PlayerSquadConstructField( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position posStart, Position posEnd, Boolean queued ) RETURNS:  =>Send a player command to itself to order squads in the sgroup to construct a field ranging from posStart to posEnd
LocalCommand_PlayerSquadConstructFieldCheat( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position posStart, Position posEnd, Boolean queued ) RETURNS:  =>Send a player command to itself to order squads in the sgroup to construct a field ranging from posStart to posEnd
LocalCommand_PlayerSquadConstructSlottedSpline( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position posStart, Position posEnd, Boolean queued ) RETURNS:  =>Send a command from player to sgroup to build ebp as a slotted spline from posStart to posEnd.
LocalCommand_PlayerSquadConstructSlottedSplineCheat( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position posStart, Position posEnd, Boolean queued ) RETURNS:  =>Send a command from player to sgroup to build ebp as a slotted spline from posStart to posEnd.
LocalCommand_PlayerSquadConstructSlottedSplineDependent( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position position, Position facingPos, Boolean queued ) RETURNS:  =>Send a command from player to sgroup to build ebp as a slotted spline dependent entity.
LocalCommand_PlayerSquadConstructSlottedSplineDependentCheat( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position position, Position facingPos, Boolean queued ) RETURNS:  =>Send a command from player to sgroup to build ebp as a slotted spline dependent entity.
LocalCommand_PlayerSquadConstructSlottedSplineReplacer( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position position, Position facingPos, Boolean queued ) RETURNS:  =>Send a command from player to sgroup to build ebp as a slotted spline replacer entity.
LocalCommand_PlayerSquadConstructSlottedSplineReplacerCheat( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position position, Position facingPos, Boolean queued ) RETURNS:  =>Send a command from player to sgroup to build ebp as a slotted spline replacer entity.
LocalCommand_PlayerUpgrade( PlayerID player, ScarUpgradePBG upgrade, Boolean instant, Boolean queued ) RETURNS:  =>Sends an upgrade command to a player
LocalCommand_Squad( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, Boolean queued ) RETURNS:  =>Send a squad command to a squad group
LocalCommand_SquadAbility( PlayerID player, SGroupID sgroup, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send a ability command (SCMD_Ability) to a squad
LocalCommand_SquadAttackMovePos( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, Position target, String planName, Boolean queued, Boolean split ) RETURNS:  =>Send a position ATTACK MOVE command to a squad group with custom data.
LocalCommand_SquadEntity( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, EGroupID target, Boolean queued ) RETURNS:  =>Send an entity command to a squad group.
LocalCommand_SquadEntityAbility( PlayerID player, SGroupID sgroup, EGroupID target, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send a entity ability command (SCMD_Ability) to a squad
LocalCommand_SquadEntityAttack( PlayerID player, SGroupID sgroup, EGroupID target, Boolean bCheckFOW, Boolean bStationary, String planName, Boolean queued ) RETURNS:  =>Send an entity command ATTACK to a squad group.
LocalCommand_SquadEntityBool( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, EGroupID target, Boolean cmdparam, Boolean queued ) RETURNS:  =>Send a entity command to a squad group with custom BOOLEAN data
LocalCommand_SquadEntityExt( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, EGroupID target, Integer cmdparam, Boolean queued ) RETURNS:  =>Send a entity command to a squad group with custom data
LocalCommand_SquadEntityLoad( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, EGroupID target, Boolean bOverLoad, Boolean queued ) RETURNS:  =>Send special squad command to a squad group with squad load parameters
LocalCommand_SquadExt( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, Integer cmdparam, Boolean queued ) RETURNS:  =>Send a squad command to a squad group with custom data
LocalCommand_SquadMovePos( PlayerID player, SGroupID sgroup, Position target, Boolean queued, Boolean reverseMove, Boolean split, Real acceptableProximity ) RETURNS:  =>Send a move to position command for a squad group.
LocalCommand_SquadMovePosFacing( PlayerID player, SGroupID sgroup, Position target, Position facing, Boolean queued, Boolean reverseMove, Boolean split, Real acceptableProximity ) RETURNS:  =>Send a move-facing command to a squad group
LocalCommand_SquadMultiTargetAbility( SquadID caster, vector<ConstTargetHandle> targets, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send a squad a command to use a multi-target ability on the given targets.
LocalCommand_SquadPath( PlayerID pPlayer, SGroupID pSGroup, String pathName, Integer pathIndex, Boolean bFromClosest, LoopType loopType, Boolean bAttackMove, Real pauseTime, Boolean bMoveForward, Boolean queued ) RETURNS:  =>Send a squad patrol command (SCMD_Patrol) to a squad
LocalCommand_SquadPos( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, Position target, Boolean queued ) RETURNS:  =>Send a position command to a squad group.
LocalCommand_SquadPosAbility( PlayerID player, SGroupID sgroup, Position pos, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send a positional ability command (SCMD_Ability) to a squad
LocalCommand_SquadPosExt( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, Position target, Integer cmdparam, Boolean queued ) RETURNS:  =>Send a position command to a squad group with custom data
LocalCommand_SquadPositionAttack( PlayerID player, SGroupID sgroup, Position target, Boolean bCheckFOW, Boolean bStationary, String planName, Boolean queued ) RETURNS:  =>Send an position command ATTACK to a squad group.
LocalCommand_SquadRetreatPos( PlayerID player, SGroupID sgroup, Position target, Boolean queued, Boolean allowNonInteractiveStages ) RETURNS:  =>Send a retreat position command to a squad group.
LocalCommand_SquadSetCombatStance( PlayerID player, SGroupID sgroup, StanceType stanceType, Boolean queued ) RETURNS:  =>Send a set CombatStance command to the squads
LocalCommand_SquadSetWeaponPreference( PlayerID player, SGroupID sgroup, WeaponPreference weaponPreference, Boolean queued ) RETURNS:  =>Send a set Weapon Preference command to the squads
LocalCommand_SquadSquad( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, SGroupID target, Boolean queued ) RETURNS:  =>Send an squad-based command to a squad group.
LocalCommand_SquadSquadAbility( PlayerID player, SGroupID sgroup, SGroupID target, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq, Boolean queued ) RETURNS:  =>Send a squad ability command (SCMD_Ability) to a squad
LocalCommand_SquadSquadAttack( PlayerID player, SGroupID sgroup, SGroupID target, Boolean bCheckFOW, Boolean bStationary, String planName, Boolean queued ) RETURNS:  =>Send an squad-based command to a squad group.
LocalCommand_SquadSquadExt( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, SGroupID target, Integer cmdparam, Boolean queued ) RETURNS:  =>Send a squad command to a squad group with custom data
LocalCommand_SquadSquadLoad( PlayerID player, SGroupID sgroup, SquadCommandType squadCommand, SGroupID target, Boolean bOverLoad, Boolean queued ) RETURNS:  =>Send special squad command to a squad group with squad load parameters
LocalCommand_SquadUpgrade( PlayerID player, SGroupID sgroup, ScarUpgradePBG upgrade, Boolean instant, Boolean queued ) RETURNS:  =>Sends an upgrade command to a squad group.
lockstep_simulation_presentation_toggle(  ) RETURNS:  =>Run simulation and presentation in lockstep, with simulation ticked every frame (useful for debugging sync errors)
LogPrintTo( String file, String txt ) RETURNS:  =>Print text to specified file
MapIcon_ClearFacing( Integer id ) RETURNS:  =>Clear the map icon facing value.
MapIcon_CreateEntity( EntityID entity, String icon, Real scale, Integer red, Integer green, Integer blue, Integer alpha ) RETURNS:  =>Create a map icon targetting an entity.
MapIcon_CreatePosition( Position position, String icon, Real scale, Integer red, Integer green, Integer blue, Integer alpha ) RETURNS:  =>Create a map icon targetting a position.
MapIcon_CreateSquad( SquadID squad, String icon, Real scale, Integer red, Integer green, Integer blue, Integer alpha ) RETURNS:  =>Create a map icon targetting a squad.
MapIcon_Destroy( Integer id ) RETURNS:  =>Remove a map icon.
MapIcon_DestroyAll(  ) RETURNS:  =>Remove all map icons.
MapIcon_SetFacingEntity( Integer id, EntityID entity ) RETURNS:  =>Face the map icon towards this entity.
MapIcon_SetFacingPosition( Integer id, Position position ) RETURNS:  =>Face the map icon towards this position.
MapIcon_SetFacingSquad( Integer id, SquadID squad ) RETURNS:  =>Face the map icon towards this squad.
Marker_Create( String name, String type, Position pos, Position direction, Real radius ) RETURNS:  =>Returns a newly created marker with the given attributes [direction] is expecting a direction vector and not a position relative to [pos]
Marker_CreateMarkerFromEntityMarker( EntityID entity, String internalMarker, String newMarker ) RETURNS:  =>Finds a marker in an entity, creates a SCAR marker there and returns the new marker's name.
Marker_Destroy( MarkerID marker ) RETURNS:  =>Delete this marker, only recommended for dynamically created markers
Marker_DoesNumberAttributeExist( MarkerID marker, String name ) RETURNS:  =>Returns true if a generic number attribute exists for the marker type.
Marker_DoesStringAttributeExist( MarkerID marker, String name ) RETURNS:  =>Returns true if a generic string attribute exists for the marker type.
Marker_Exists( String name, String type ) RETURNS:  =>Returns true if marker exists. If you don't care about the type, pass in an empty string ( "" )
Marker_FromName( String name, String type ) RETURNS:  =>Returns a ScarMarker from the Scenario Editor. If you don't care about the type, pass in an empty string ( "" )
Marker_GetDirection( MarkerID marker ) RETURNS:  =>Returns a vector for the marker direction
Marker_GetName( MarkerID marker ) RETURNS:  =>Returns the name of a given marker.  This value gets set in the Scenario Editor.
Marker_GetNumberAttribute( MarkerID marker, String name ) RETURNS:  =>Returns a generic number attribute defined in a marker.
Marker_GetPosition( MarkerID marker ) RETURNS:  =>Returns the position of a given marker.
Marker_GetProximityDimensionsOrDefault( MarkerID marker, Real defaultWidth, Real defaultHeight ) RETURNS:  =>Returns the proximity dimensions of a given marker.  If non rectangular, default value is returned Dimensions are 2d but returned in 3d world space (terrain mapped to x,z) This value gets set in the Scenario Editor.
Marker_GetProximityRadius( MarkerID marker ) RETURNS:  =>Returns the proximity radius of a given marker.  If non circular, default value is returned This value gets set in the Scenario Editor.
Marker_GetProximityRadiusOrDefault( MarkerID marker, Real defaultValue ) RETURNS:  =>Returns the proximity radius of a given marker.  If non circular, default value is returned This value gets set in the Scenario Editor.
Marker_GetStringAttribute( MarkerID marker, String name ) RETURNS:  =>Returns a generic string attribute defined in a marker.
Marker_GetType( MarkerID marker ) RETURNS:  =>Returns the typename of a given marker. This is the typename from the Scenario Editor (name displayed when placing markers)
Marker_HasProximityRange( MarkerID marker ) RETURNS:  =>Returns if a marker has a defined (non-default) proximity range
Marker_InProximity( MarkerID marker, Position pos ) RETURNS:  =>Returns true if the given position is in the markers proximity radius or proximity rectangle (depending on the type).
Marker_SetProximityCircle( MarkerID marker, Real radius ) RETURNS:  =>Set the proximity shape of a marker to a circle with size radius
Marker_SetProximityPoint( MarkerID marker ) RETURNS:  =>Set the proximity shape of a marker to point marker (no proximity)
Marker_SetProximityRectangle( MarkerID marker, Real width, Real height ) RETURNS:  =>Set the proximity shape of a marker to a rectangle with dimensions width and height
Marker_StartActionAt( String name, Position pos ) RETURNS:  =>Start an Action at the given position.  Returns the id so the Action can be stopped using Marker_StopActionById.
Marker_StopActionById( Integer id ) RETURNS:  =>Stop an Action by id.  Marker_StartActionAt returns an id that can be used here.
MarkerCountFromName( String name, String type ) RETURNS:  =>Returns the number of ScarMarkers with the given name If you don't care about the type, pass in an empty string ( "" )
memdump(  ) RETURNS:  =>Write the OS map of allocated memory to the log folder
memdumpf( String foldername ) RETURNS:  =>Write the OS map of allocated memory to the log folder
MemoryStats_Disable(  ) RETURNS:  =>Disable collecting and displaying render stats
MemoryStats_Enable(  ) RETURNS:  =>Enable collecting and displaying render stats
MemoryStats_Toggle(  ) RETURNS:  =>Toggle collecting and displaying render stats
mempoolcount(  ) RETURNS:  =>Returns the numbers of memory pools
mempoolinuse( Integer int ) RETURNS:  =>Given a poolID it will return the current memory in use
mempoolmax( Integer int ) RETURNS:  =>Given a poolID it will return the max amount of memory this pool has allocated
mempoolname( Integer poolid ) RETURNS:  =>Given a poolID it will return the name of the pool
memshrink(  ) RETURNS:  =>Ask the OS to reduce the memory allocated to the game
memtofile( String pool ) RETURNS:  =>Write to a file all allocation content for specified pool
Misc_AbortToFE(  ) RETURNS:  =>Abort straight out of the game to the frontend, without asking the user
Misc_AddEntitiesToGroup( EGroupID group, String entityIDsEncoded, Boolean includeSquads ) RETURNS:  =>Appends the provided EntityIDs to the EGroup
Misc_AddRestrictCommandsCircle( Position position, Real radius ) RETURNS:  =>Add another circle in which commands are restricted to.
Misc_AddRestrictCommandsMarker( MarkerID marker ) RETURNS:  =>Add another marker in which commands are restricted to.
Misc_AddRestrictCommandsOBB( Position minPosition, Position maxPosition ) RETURNS:  =>Add another AABB in which commands are restricted to.
Misc_AddSquadsToGroup( SGroupID group, String entityIDsEncoded ) RETURNS:  =>Appends the provided SquadIDs to the SGroup
Misc_AIControlLocalPlayer(  ) RETURNS:  =>Let AI take over local player
Misc_AppendToFile( String filename, String text ) RETURNS:  =>Appends given string to a file expects to receive a filename with an alias conserves existing file content \return Number returned is # bytes successfully written
Misc_AreDefaultCommandsEnabled(  ) RETURNS:  =>Returns the enabled/disabled state of the right-click command input.  (not deterministic)
Misc_ClearControlGroup( Integer groupIndex ) RETURNS:  =>Clears a specific control group.
Misc_ClearSelection(  ) RETURNS:  =>Clears the current selection.
Misc_ClearSubselection(  ) RETURNS:  =>Clears the current sub selection.
Misc_DetectKeyboardInput( Real sinceTime ) RETURNS:  =>Returns true if the app has had any keyboard input in the last second
Misc_DetectMouseInput( Real sinceTime ) RETURNS:  =>Returns true if the app has had any mouse input in the last second
Misc_DoesPositionHaveAssociatedDistrict( Position pos ) RETURNS:  =>Checks if the given position has an associated district.
Misc_DoWeaponHitEffectOnEntity( EntityID entity, Position pos, ScarWeaponPBG weaponPBG, Boolean penetrated ) RETURNS:  =>Do weapon hit effect on the entity from the view camera origin
Misc_DoWeaponHitEffectOnPosition( Position pos, ScarWeaponPBG weaponPBG, Boolean penetrated ) RETURNS:  =>Do weapon hit effect on the ground
Misc_EnablePerformanceTest( Boolean toEnable ) RETURNS:  =>Turn on or off the performance test monitoring
Misc_FindDepositsCloseToSquad( EGroupID group, SquadID squad, Real searchRange ) RETURNS:  =>Find deposits within the specified range of a squad
Misc_FindDepositsOfTypeCloseToPosition( ResourceType resourceType, EBP gathererEBP, Position position, Number searchRange ) RETURNS:  =>Finds resource deposits of given type within the specified range of a position, that can be collected by the provided gathererEBP
Misc_GetCommandLineString( String option ) RETURNS:  =>Returns the string argument for a command line option. ex: for "-init test.lua" it would return "test.lua"
Misc_GetControlGroupContents( Integer groupIndex, SGroupID squads, EGroupID nonSquadEntities ) RETURNS:  =>Returns contents of a control group (0 to 9). Squads are put into an sgroup, and non-squad entities are put into an egroup.
Misc_GetDistrictGeneratorFromPosition( Position pos ) RETURNS:  =>Return the entity generating the district containing the given position. Use with Misc_DoesPositionHaveAssociatedDistrict
Misc_GetDistrictValueFromPosition( Position pos ) RETURNS:  =>Return the district value of the district containing the given position. Use with Misc_DoesPositionHaveAssociatedDistrict
Misc_GetEntityControlGroup( EntityID entity ) RETURNS:  =>Returns the control group index that this entity belongs to, from 0 to 9, or -1 if none.
Misc_GetFileSize( String filename ) RETURNS:  =>returns the size of the file expects to receive a filename with an alias \return file size OR 0 if the file can not be read
Misc_GetHiddenPositionOnPath( Integer checkType, Position origin, Position destination, Integer ebpID, Real stepDistance, Real cameraPadding, PlayerID FOWPlayer, Boolean debugDisplay ) RETURNS:  =>Returns a hidden position on path from origin to destination. If there's none, it returns the origin position
Misc_GetMouseOnTerrain(  ) RETURNS:  =>Returns the world position of the mouse on the terrain (not deterministic)
Misc_GetMouseOverEntity(  ) RETURNS:  =>Returns the entity under the mouse (if any) (not deterministic)
Misc_GetMouseOverSquad(  ) RETURNS:  =>Returns the entity squad under the mouse (if any) (not deterministic)
Misc_GetSelectedEntities( EGroupID group, Boolean subselection ) RETURNS:  =>Clears a given group and adds the current full selection (or subselection if true) to the group.
Misc_GetSelectedSquads( SGroupID group, Boolean subselection ) RETURNS:  =>Clears a given group and adds the current full selection (or subselection if true) to the group.
Misc_GetSimDefaultStepsPerSecond(  ) RETURNS:  =>Returns the default simulation rate.
Misc_GetSimRate(  ) RETURNS:  =>Returns the current simulation rate.
Misc_GetSquadControlGroup( SquadID squad ) RETURNS:  =>Returns the control group index that this squad belongs to, from 0 to 9, or -1 if none.
Misc_IsCommandLineOptionSet( String option ) RETURNS:  =>Returns true if -option is specified on the command line
Misc_IsDevMode(  ) RETURNS:  =>Returns whether the game is running in dev mode.
Misc_IsEntityOnScreen( EntityID entity, Real percent ) RETURNS:  =>Check if the squad is on screen currently (not deterministic)
Misc_IsEntitySelected( EntityID entity ) RETURNS:  =>Returns true if the specified entity is currently selected.
Misc_IsMouseOverEntity(  ) RETURNS:  =>Returns true if the mouse is over an entity (not deterministic)
Misc_IsMouseOverSquad(  ) RETURNS:  =>Returns true if the mouse is over a squad (not deterministic)
Misc_IsPosOnScreen( Position pos, Real percent ) RETURNS:  =>Check if position is on screen, (1 being the entire screen, 0.5 being 50% of the screen from the center point)
Misc_IsSelectionInputEnabled(  ) RETURNS:  =>Returns the enabled/disabled state of the selection input.  (not deterministic)
Misc_IsSquadOnScreen( SquadID squad, Real percent ) RETURNS:  =>Check if the entity is on screen currently (not deterministic)
Misc_IsSquadSelected( SquadID squad ) RETURNS:  =>Returns true if the specified squad is currently selected.
Misc_QueryDataDirectory( String pathQuery, Boolean recursiveFind ) RETURNS:  =>Assumes 'data:' as root; Returns a table containing the names of files matching the supplied path.
Misc_QueryDirectory( String pathQuery, Boolean recursiveFind ) RETURNS:  =>Returns a table containing the names of files matching the supplied path.
Misc_ReadFile( String filename ) RETURNS:  =>Reads the file as string expects to receive a filename with an alias \return file content OR empty string if the file can not be read
Misc_RemoveCommandRestriction(  ) RETURNS:  =>Remove all command restrictions.
Misc_RemoveFile( String filename ) RETURNS:  =>Deletes the given file expects to receive a filename with an alias \return true if file was deleted or did not exist in the first place, false otherwise
Misc_RestrictCommandsToMarker( MarkerID marker ) RETURNS:  =>Set the marker in which commands are restricted to.
Misc_Screenshot(  ) RETURNS:  =>Save a screenshot
Misc_ScreenshotExt( String fileExtension ) RETURNS:  =>Set the graphic file type for screenshot (.jpg, .tga)
Misc_SelectEntity( EntityID entity ) RETURNS:  =>Set the full selection to the specified entity.
Misc_SelectSquad( SquadID squad, Boolean selected ) RETURNS:  =>Set the full selection to the specified entity.
Misc_SetCurrentAutotest( String description ) RETURNS:  =>Sets the current autotest being used.  Used to set default text in the crash reports
Misc_SetDefaultCommandsEnabled( Boolean enabled ) RETURNS:  =>Enables/disables right-click command input.
Misc_SetDesignerSplatsVisibility( Boolean bVisible ) RETURNS:  =>Shows or hides designer splats, which are splats in the UI folder
Misc_SetEntityControlGroup( EntityID entity, Integer groupIndex ) RETURNS:  =>Makes an entity belong to a specific control group. If it already belongs to another control group, it's removed from that one before being added to the new one.
Misc_SetEntitySelectable( EntityID entity, Boolean selectable ) RETURNS:  =>Disable/enable selectability of the specified entity.
Misc_SetSelectionInputEnabled( Boolean enabled ) RETURNS:  =>Enables/disables selection input.
Misc_SetSimRate( Real rate ) RETURNS:  =>Set the simulation rate
Misc_SetSquadControlGroup( SquadID squad, Integer groupIndex ) RETURNS:  =>Makes a squad belong to a specific control group. If it already belongs to another control group, it's removed from that one before being added to the new one.
Misc_SetSquadSelectable( SquadID squad, Boolean selectable ) RETURNS:  =>Disable/enable selectability of the specified squad.
Misc_UpdateSlottedSplinesContainingEGroupAfterBlueprintConversion( EGroupID egroup ) RETURNS:  =>Updates the slotted spline system to handle the fact that the entities in the given EGroup have done a blueprint conversion. This must be called after converting slotted spline entities from script.
Misc_WriteFile( String filename, String text ) RETURNS:  =>Writes the given string to a file expects to receive a filename with an alias overwrites any existing file content \return Number returned is # bytes successfully written
Modifier_ApplyToEntity( ScarModifier modifier, EntityID entity, Real durationSeconds ) RETURNS:  =>Applies an entity modifier to an entity. Use a duration of 0 for an indefinite modifier.
Modifier_ApplyToPlayer( ScarModifier modifier, PlayerID player, Real durationSeconds ) RETURNS:  =>Applies a player modifier to a player. Use a duration of 0 for an indefinite modifier.
Modifier_ApplyToSquad( ScarModifier modifier, SquadID squad, Real durationSeconds ) RETURNS:  =>Applies a squad modifier to a squad. Use a duration of 0 for an indefinite modifier.
Modifier_Create( ModifierApplicationType applicationType, String modtype, ModifierUsageType usageType, Boolean exclusive, Real value, StackVar v ) RETURNS:  =>Returns a modifier that you can apply to stuff.
Modifier_IsEnabled( EntityID pEntity, String modtype, Boolean bEnabledByDefault ) RETURNS:  =>Checks whether the modifier is enabled (requires an Entity and an Entity enable/disable modifier)
MovieCapture_Start( Boolean lowResolution ) RETURNS:  =>Start capturing a movie, optionally downscaling to low resolution.
MovieCapture_Stop(  ) RETURNS:  =>Stop a previously started movie capture.
network_show_calls(  ) RETURNS:  =>toggle the outstanding network call information
network_show_statgraph(  ) RETURNS:  =>toggle the network statgraph
Obj_Create( PlayerID player, String title, String desc, String icon, String dataTemplate, String faction, ObjectiveType type, Integer parentID, String telemetryTitle ) RETURNS:  =>Create an objective and returns the unique ID for it
Obj_Delete( Integer objectiveID ) RETURNS:  =>Delete the objective with the specified ID
Obj_DeleteAll(  ) RETURNS:  =>Delete all objectives
Obj_GetCounterCount( Integer objectiveID ) RETURNS:  =>Get the count of the counter on the objective.
Obj_GetCounterMax( Integer objectiveID ) RETURNS:  =>Get the maximum count of the counter on the objective.
Obj_GetCounterType( Integer objectiveID ) RETURNS:  =>Get the counter type of an objective.
Obj_GetProgress( Integer objectiveID ) RETURNS:  =>Get objective progress bar value
Obj_GetProgressVisible( Integer objectiveID ) RETURNS:  =>Get objective progress bar visibility  (not deterministic)
Obj_GetState( Integer objectiveID ) RETURNS:  =>Get objective state ( OS_Off, OS_Incomplete, OS_Complete, OS_Failed ) (not deterministic)
Obj_GetVisible( Integer objectiveID ) RETURNS:  =>Get objective visibility  (not deterministic)
Obj_HideProgress(  ) RETURNS:  =>Hide the objective progress panel.
Obj_HideProgressEx( Integer progressBarIndex ) RETURNS:  =>Hide the specified objective progress panel.
Obj_SetColour( Integer objectiveID, Integer red, Integer green, Integer blue, Integer alpha ) RETURNS:  =>Set colour of objective. In order red, green, blue, alpha.
Obj_SetCounterCount( Integer objectiveID, Integer count ) RETURNS:  =>Set the count of the counter on the objective.
Obj_SetCounterMax( Integer objectiveID, Integer max ) RETURNS:  =>Set the maximum count of the counter on the objective.
Obj_SetCounterTimerSeconds( Integer objectiveID, Real timerSeconds ) RETURNS:  =>Set the number of seconds on an objective with a timer. Only used to inform the UI.
Obj_SetCounterType( Integer objectiveID, Integer counterType ) RETURNS:  =>Set the counter type of an objective.
Obj_SetDescription( Integer objectiveID, String desc ) RETURNS:  =>Set description text localization ID for the objective
Obj_SetIcon( Integer objectiveID, String icon ) RETURNS:  =>Set icon path for the objective
Obj_SetObjectiveFunction( Integer id, ObjectiveFn fnType, LuaFunction f ) RETURNS:  =>Set callback functions for the objective.  (not deterministic)
Obj_SetProgress( Integer objectiveID, Real progress ) RETURNS:  =>Set objective progress bar value
Obj_SetProgressBlinking( Boolean blinking ) RETURNS:  =>Make the objective progress bar blink or stop blinking.
Obj_SetProgressVisible( Integer objectiveID, Boolean visible ) RETURNS:  =>Set objective progress bar visibility
Obj_SetState( Integer objectiveID, State state ) RETURNS:  =>Set objective state ( OS_Off, OS_Incomplete, OS_Complete, OS_Failed )
Obj_SetTitle( Integer objectiveID, String title ) RETURNS:  =>Set title text localization ID for the objective
Obj_SetVisible( Integer objectiveID, Boolean visible ) RETURNS:  =>Set objective visibility
Obj_ShowProgress( String title, Real progress ) RETURNS:  =>Show the objective progress panel with a progress bar - call repeatedly to update progress.  Value should be normalized between [0 - 1].
Obj_ShowProgress2( String title, Real progress ) RETURNS:  =>Show the objective progress panel with a progress bar - call repeatedly to update progress.  Value should be normalized between [0 - 1].  Appears in center of screen.
Obj_ShowProgressEx( Integer progressBarIndex, String title, Real progress, Boolean critical ) RETURNS:  =>Show the specified objective progress panel with a progress bar - call repeatedly to update progress. Value should be normalized between [0 - 1].  If critical, progress bar will pulse.
Obj_ShowProgressTimer( Real progress ) RETURNS:  =>Show the objective progress panel with a timer icon - call repeatedly to update progress.  Value should be in seconds.
Path_ClearCells(  ) RETURNS:  =>Clear entire draw pathfinding cell list
Path_DrawImpass(  ) RETURNS:  =>Draw pathfinding impassable map
Path_DrawPath(  ) RETURNS:  =>Toggle pathfinding entity path
Path_DrawPathMap( Boolean onoff ) RETURNS:  =>Draw pathfinding grid overlay
Path_ShowCell( Integer x, Integer y ) RETURNS:  =>Add pathfinding cell to draw cell list
Path_ShowPreciseCell( Integer x, Integer y ) RETURNS:  =>Add pathfinding precise cell to draw cell list
Path_ToggleCollisionCircle(  ) RETURNS:  =>Toggle pathfinding collision circles
PBG_ReloadMouseOverEntity(  ) RETURNS:  =>Reload mouse over entity's entire list of extension info's
PBG_ReloadMouseOverSquad(  ) RETURNS:  =>Reload mouse over squad's entire list of extension info's
PBG_ReloadMouseOverWeapon(  ) RETURNS:  =>Reload mouse over squad's weapon property bag
PerfStats_Disable(  ) RETURNS:  =>Disable displaying the Essence Profiler
PerfStats_Dump(  ) RETURNS:  =>Dump the Essence Profiler data onto a file
PerfStats_Enable(  ) RETURNS:  =>Enable displaying the Essence Profiler
PerfStats_IsEnabled(  ) RETURNS:  =>Get perf stats toggle value
PerfStats_Toggle(  ) RETURNS:  =>Toggle displaying the Essence Profiler
Physics_GetNumRBodies(  ) RETURNS:  =>Returns the number of rigid bodies in the physical world
Physics_IsEnabled(  ) RETURNS:  =>Returns true if the current specs allows for physics to play
Player_AddAbility( Player& player, ScarAbilityPBG pAbilityPBG ) RETURNS:  =>Add an ability to a player
Player_AddAbilityLockoutZone( Player& player, ScarAbilityPBG abilityPBG, MarkerID marker ) RETURNS:  =>Specifies a marker where an ability cannot be used. This only applies to abilities where you use the cursor to pick a location in the world (like a location to paradrop at).
Player_AddUnspentCommandPoints( Player& player, Real points ) RETURNS:  =>Gives the player new command points to spent on
Player_CanCastAbilityOnEntity( PlayerID player, ScarAbilityPBG abilityPBG, EntityID targetEntity ) RETURNS:  =>Tests if the player can currently use an ability on target entity
Player_CanCastAbilityOnPlayer( PlayerID player, ScarAbilityPBG abilityPBG, PlayerID targetPlayer ) RETURNS:  =>Tests if the player can currently use an ability on target player
Player_CanCastAbilityOnPosition( PlayerID player, ScarAbilityPBG abilityPBG, Position targetPosition ) RETURNS:  =>Tests if the player can currently use an ability on target position
Player_CanCastAbilityOnSquad( PlayerID player, ScarAbilityPBG abilityPBG, SquadID targetSquad ) RETURNS:  =>Tests if the player can currently use an ability on target squad
Player_CanConstruct( PlayerID player, PropertyBagGroup pbg ) RETURNS:  =>Tests if the player is able to construct a given blueprint
Player_CanPlaceStructureOnPosition( PlayerID player, SGroupID sgroup, ScarEntityPBG ebp, Position position, Position facing ) RETURNS:  =>Check if a player of specified group can place an entity at the specified position and facing angle.
Player_CanSeeEntity( PlayerID player, EntityID entity ) RETURNS:  =>Returns true if a player can see a given entity (revealed in FOW)
Player_CanSeePosition( PlayerID player, Position pos ) RETURNS:  =>Returns true if a player can see a given position.
Player_CanSeeSquad( PlayerID player, SquadID squad, Boolean all ) RETURNS:  =>Returns true if a player can see ALL or ANY units in a given squad (revealed in FOW)
Player_ClearAvailabilities( Player& player ) RETURNS:  =>Clears item, command and construction menu availabilities for the player.
Player_ClearPopCapOverride( Player& player ) RETURNS:  =>Clears the pop cap override so that modifiers can take effect again
Player_ClearStateModelEnumTableTarget( Player& player, String key, Integer tableRowIndex ) RETURNS:  =>Clears a TargetHandle value in the player's state model corresponding to the given key and table row index (0 based).
Player_ClearStateModelTarget( Player& player, String key ) RETURNS:  =>Clears a TargetHandle value in the Player's state model corresponding to the given key.
Player_CompleteUpgrade( Player& pPlayer, ScarUpgradePBG pUpgradePBG ) RETURNS:  =>Finish upgrade for a player
Player_FindFirstEnemyPlayer( PlayerID player ) RETURNS:  =>Searches the player list in the world and returns the id of the first enemy player
Player_FindFirstNeutralPlayer( PlayerID player ) RETURNS:  =>Searches the player list in the world and returns the id of the first neutral player
Player_FromId( Integer id ) RETURNS:  =>Returns a player given a player id from the ME.
Player_GetAbilityBPCost( PlayerID pPlayer, PropertyBagGroup pbg ) RETURNS:  =>Returns the modified cost of the given ability including all modifications added by the given player
Player_GetAIType( Player& player ) RETURNS:  =>Returns the type of the given player if it is an AI.
Player_GetAllEntities( Player& player ) RETURNS:  =>Returns an sim::EntityGroupObs containing all the players entities including ones in squad.
Player_GetCurrentPopulation( Player& player, CapType capType ) RETURNS:  =>Use capType CT_Personnel to get current squad cap, CT_Vehicle to get current vehicle cap, CT_Medic to get current medic cap
Player_GetCurrentPopulationCap( Player& player, CapType capType ) RETURNS:  =>Get current popcap. Use capType CT_Personnel to get current squad cap or CT_VehicleCap to get current vehicle cap.
Player_GetDisplayName( Player& player ) RETURNS:  =>Returns the players UI name.
Player_GetEntities( Player& player ) RETURNS:  =>Returns an sim::EntityGroupObs containing all the players entities excluding ones in squad.
Player_GetEntitiesEGroup( Player& player, EGroupID group ) RETURNS:  =>Gets all the player's current entities and loads them into the specified egroup.
Player_GetEntityBPCost( PlayerID player, PropertyBagGroup pbg ) RETURNS:  =>Returns the modified cost of the given entity including all modifications added by the given player
Player_GetEntityCount( Player& player ) RETURNS:  =>Returns the number of entities a player currently owns
Player_GetEntityCountByUnitType( Player& player, String unitTypeString ) RETURNS:  =>Returns the number of entities of a certain unit type
Player_GetEntityName( Player& player, Integer index ) RETURNS:  =>Returns the name of an entity a player currently owns
Player_GetID( Player& player ) RETURNS:  =>Returns the id of the player
Player_GetMaxPopulationCap( Player& player, CapType capType ) RETURNS:  =>Get maximum popcap. Use capType CT_Personnel to get max squad cap or CT_VehicleCap to get max vehicle cap.
Player_GetMaxPopulationCapOverride( Player& player, CapType capType ) RETURNS:  =>Get maximum popcap including any overrides. Use capType CT_Personnel to get max squad cap or CT_VehicleCap to get max vehicle cap. If there are no overrides, the default max pop cap is returned.
Player_GetNumGatheringSquads( Player& player, Integer type ) RETURNS:  =>Returns the number of squads currently gathering resources of a given type
Player_GetNumStrategicPoints( Player& p ) RETURNS:  =>Returns the number of strategic points (not objectives) this player owns
Player_GetNumVictoryPoints( Player& p ) RETURNS:  =>Returns the number of strategic objectives this player owns
Player_GetRace( Player& player ) RETURNS:  =>Returns the race for the given player.
Player_GetRaceName( Player& player ) RETURNS:  =>Returns the name of the race for a given player (always in english)
Player_GetRelationship( PlayerID player1, PlayerID player2 ) RETURNS:  =>DEPRECATED, use Player_ObserveRelationship instead.
Player_GetResource( Player& player, Integer type ) RETURNS:  =>Returns the amount of resources a given player has.
Player_GetResourceRate( Player& player, Integer type ) RETURNS:  =>Returns the amount of resources a given player is getting per second.
Player_GetResources( Player& player ) RETURNS:  =>Returns the list of all the resources a given player has.
Player_GetSlotIndex( Player& player ) RETURNS:  =>Returns the lobby slot index for this player, starting at one
Player_GetSquadBPCost( PlayerID pPlayer, PropertyBagGroup pbg ) RETURNS:  =>Returns the modified cost of the given unit including all modifications added by the given player
Player_GetSquadCount( Player& player ) RETURNS:  =>Returns the number of squads a player currently owns
Player_GetSquads( Player& player ) RETURNS:  =>Returns a SquadGroupObs containing all the players units.
Player_GetStartingPosition( Player& player ) RETURNS:  =>Returns the starting position for this player
Player_GetState( PlayerID pPlayer ) RETURNS:  =>Returns the current game state of the player.
Player_GetStateModelBool( Player& player, String key ) RETURNS:  =>Returns a boolean value from the Player's state model corresponding to the given key.
Player_GetStateModelEntityTarget( Player& player, String key ) RETURNS:  =>Returns an Entity value from the Player's state model corresponding to the given key.
Player_GetStateModelEnumTableBool( Player& player, String key, Integer tableRowIndex ) RETURNS:  =>Returns a boolean value from the player's state model corresponding to the given key and table row index (0 based).
Player_GetStateModelEnumTableEntityTarget( Player& player, String key, Integer tableRowIndex ) RETURNS:  =>Returns an Entity value from the player's state model corresponding to the given key and table row index (0 based).
Player_GetStateModelEnumTableFloat( Player& player, String key, Integer tableRowIndex ) RETURNS:  =>Returns a float value from the player's state model corresponding to the given key and table row index (0 based).
Player_GetStateModelEnumTableInt( Player& player, String key, Integer tableRowIndex ) RETURNS:  =>Returns an integer value from the player's state model corresponding to the given key and table row index (0 based).
Player_GetStateModelEnumTablePlayerTarget( Player& player, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Player value from the player's state model corresponding to the given key and table row index (0 based).
Player_GetStateModelEnumTableSquadTarget( Player& player, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Squad value from the player's state model corresponding to the given key and table row index (0 based).
Player_GetStateModelEnumTableVector3f( Player& player, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Vector3f value from the player's state model corresponding to the given key and table row index (0 based).
Player_GetStateModelFloat( Player& player, String key ) RETURNS:  =>Returns a float value from the Player's state model corresponding to the given key.
Player_GetStateModelInt( Player& player, String key ) RETURNS:  =>Returns an integer value from the Player's state model corresponding to the given key.
Player_GetStateModelPlayerTarget( Player& player, String key ) RETURNS:  =>Returns a Player value from the Player's state model corresponding to the given key.
Player_GetStateModelSquadTarget( Player& player, String key ) RETURNS:  =>Returns a Squad value from the Player's state model corresponding to the given key.
Player_GetStateModelVector3f( Player& player, String key ) RETURNS:  =>Returns a Vector3f value from the Player's state model corresponding to the given key.
Player_GetStrategicPointCaptureProgress( PlayerID player, EntityID strategicPoint ) RETURNS:  =>Returns a value (-1.0 to 1.0) of how close a point is to being controlled by the team of the player provided
Player_GetTeam( Player& p ) RETURNS:  =>Get the team a player is on
Player_GetTributeIncrementModifier(  ) RETURNS:  =>Returns the current game state of the player.
Player_GetUIColour( Player& player ) RETURNS:  =>Returns the UI colour of a player with respect to the local machine. Access with .r .g .b .a. Values are in the range 0-255.
Player_GetUnitCount( Player& player ) RETURNS:  =>Returns the current number of units the player has.
Player_GetUpgradeBPCost( PlayerID player, ScarUpgradePBG upgradePBG ) RETURNS:  =>Returns the cost of an upgrade.
Player_GetUpgradeBPCostByResource( PlayerID player, ScarUpgradePBG upgradePBG, Integer type ) RETURNS:  =>Returns the cost of an upgrade in a specific resource.
Player_GiftResource( Player& player, Integer type, Real amount ) RETURNS:  =>Set the gifted resource amount for a given player A positive resource amount means the player receives the resources A negative resource amount means the player sends the resources Ignores income cap and resource sharing.
Player_HasAbility( Player& player, ScarAbilityPBG pAbilityPBG ) RETURNS:  =>Tests to see if a player has an ability
Player_HasCapturingSquadNearStrategicPoint( PlayerID player, EntityID strategicPoint ) RETURNS:  =>Returns true if the given player has units that are able to capture in the capturable area of the given strategic point
Player_HasEntity( Player& player, ScarEntityPBG entity ) RETURNS:  =>Tests to see if the player has any entities with the specified PBG
Player_HasMapEntryPosition( PlayerID player ) RETURNS:  =>Returns whether a player has a map entry position
Player_HasUpgrade( PlayerID pPlayer, ScarUpgradePBG upgradePBG ) RETURNS:  =>Return true if the squad has purchased the specified upgrade.
Player_IsAbilityActive( Player& player, ScarAbilityPBG abilityPBG ) RETURNS:  =>Returns true or false, depending on whether the passed in player ability is active on the player
Player_IsAlive( Player& player ) RETURNS:  =>Returns true if player is still alive and false if player is dead.  Will error if playerIdx is an invalid index.
Player_IsHuman( Player& player ) RETURNS:  =>Returns whether a player is human controlled (local or remote), not dead, and not replaced by an AI
Player_IsSurrendered( Player& player ) RETURNS:  =>Returns true if player has surrendered and false if not.  Will error if playerIdx is an invalid index.
Player_IsValid( Integer id ) RETURNS:  =>Check if id corresponds to a player
Player_NumUpgradeComplete( Player& player, ScarUpgradePBG upgradePBG ) RETURNS:  =>Returns the number of upgrades that this player has.
Player_ObserveRelationship( PlayerID observer, PlayerID target ) RETURNS:  =>Get the relationship that observer has to target.
Player_ObserveReputation( PlayerID observer, PlayerID target ) RETURNS:  =>Get the reputation that observer has to target.
Player_RemoveAbilityLockoutZone( Player& player, ScarAbilityPBG abilityPBG, MarkerID marker ) RETURNS:  =>Removes a marker that was previously a lockout zone.
Player_RemoveAllUpgrades( Player& player ) RETURNS:  =>Removes all upgrade from a player
Player_RemoveUpgrade( Player& player, ScarUpgradePBG upgrade ) RETURNS:  =>Removes an upgrade from a player
Player_ResetAbilityCooldowns( Player& player, ScarAbilityPBG ability ) RETURNS:  =>Reset the cooldown of an ability on every unit a player has, and the player itself.
Player_ResetResource( Player& player, Integer type ) RETURNS:  =>Reset the resource amount for a given player to zero.
Player_SetAllCommandAvailabilityInternal( Player& player, Availability availability, String reason ) RETURNS:  =>Sets availability of ALL entity, squad and player commands.
Player_SetDefaultSquadMoodMode( Player& player, SquadCombatBehaviourMoodMode mood ) RETURNS:  =>Set default squad mood mode which can be overrided by squad level mood mode settings
Player_SetPopCapOverride( Player& player, Real personnel ) RETURNS:  =>Sets a pop cap override that ignores any modifiers.
Player_SetRelationship( PlayerID observer, PlayerID target, Relation relationship ) RETURNS:  =>Set the relationship that observer has to target. If the relationship does not match the current reputation, the reputation will be changed to match it.
Player_SetReputation( PlayerID observer, PlayerID target, BaseType reputation ) RETURNS:  =>Set the reputation that observer has to target. If the reputation does not match the current relationship, the relationship will be changed to match it.
Player_SetResource( Player& player, Integer type, Real amt ) RETURNS:  =>Set the resource amount for a given player.  Ignores income cap and resource sharing.
Player_SetResourceInternal( Player& player, Integer type, Real amt, AddResourceReason reason ) RETURNS:  =>Set the resource amount for a given player.  Ignores income cap and resource sharing.
Player_SetResources( Player& player, ResourceAmount resourceAmount ) RETURNS:  =>Set all the resource amount for a given player.  Ignores income cap and resource sharing.
Player_SetStateModelBool( Player& player, String key, Boolean value ) RETURNS:  =>Sets a boolean value in the Player's state model corresponding to the given key.
Player_SetStateModelEntityTarget( Player& player, String key, EntityID value ) RETURNS:  =>Sets an Entity TargetHandle value in the Player's state model corresponding to the given key.
Player_SetStateModelEnumTableBool( Player& player, String key, Integer tableRowIndex, Boolean value ) RETURNS:  =>Sets a boolean value in the player's state model corresponding to the given key and table row index (0 based).
Player_SetStateModelEnumTableEntityTarget( Player& player, String key, Integer tableRowIndex, EntityID value ) RETURNS:  =>Sets an Entity TargetHandle value in the player's state model corresponding to the given key and table row index (0 based).
Player_SetStateModelEnumTableFloat( Player& player, String key, Integer tableRowIndex, Real value ) RETURNS:  =>Sets a float value in the player's state model corresponding to the given key and table row index (0 based).
Player_SetStateModelEnumTableInt( Player& player, String key, Integer tableRowIndex, Integer value ) RETURNS:  =>Sets an integer value in the player's state model corresponding to the given key and table row index (0 based).
Player_SetStateModelEnumTablePlayerTarget( Player& player, String key, Integer tableRowIndex, PlayerID value ) RETURNS:  =>Sets a Player TargetHandle value in the player's state model corresponding to the given key and table row index (0 based).
Player_SetStateModelEnumTableSquadTarget( Player& player, String key, Integer tableRowIndex, SquadID value ) RETURNS:  =>Sets a Squad TargetHandle value in the player's state model corresponding to the given key and table row index (0 based).
Player_SetStateModelEnumTableVector3f( Player& player, String key, Integer tableRowIndex, Position value ) RETURNS:  =>Sets a Vector3f value in the player's state model corresponding to the given key and table row index (0 based).
Player_SetStateModelFloat( Player& player, String key, Real value ) RETURNS:  =>Sets a float value in the Player's state model corresponding to the given key.
Player_SetStateModelInt( Player& player, String key, Integer value ) RETURNS:  =>Sets an integer value in the Player's state model corresponding to the given key.
Player_SetStateModelPlayerTarget( Player& player, String key, PlayerID value ) RETURNS:  =>Sets a Player TargetHandle value in the Player's state model corresponding to the given key.
Player_SetStateModelSquadTarget( Player& player, String key, SquadID value ) RETURNS:  =>Sets a Squad TargetHandle value in the Player's state model corresponding to the given key.
Player_SetStateModelVector3f( Player& player, String key, Position value ) RETURNS:  =>Sets a Vector3f value in the Player's state model corresponding to the given key.
Player_StopAbility( PlayerID player, ScarAbilityPBG ability, Boolean bIsEarlyExit ) RETURNS:  =>Abruptly stops an active ability
PlayerColour_ClearConfigChangedCallback(  ) RETURNS:  =>Clears the config changed callback
PlayerColour_Disable(  ) RETURNS:  =>Clear player color overriding and use the "PlayerColour" setting instead.
PlayerColour_Enable(  ) RETURNS:  =>Force enable player color that overrides the current "PlayerColour" setting.
PlayerColour_SetConfigChangedCallback( LuaFunction function ) RETURNS:  =>Sets a callback firing when user changes the config for player colour
quit(  ) RETURNS:  =>Exit to windows
render_viewport_toggle(  ) RETURNS:  =>Disable rendering and render update
RenderStats_Disable(  ) RETURNS:  =>Disable collecting and displaying render stats
RenderStats_DumpToLogFile(  ) RETURNS:  =>Output the render stats to a CSV LogFile for viewing
RenderStats_Enable(  ) RETURNS:  =>Enable collecting and displaying render stats
RenderStats_SetUpdateTime( Real time ) RETURNS:  =>Set the render stats refresh update interval (seconds)
RenderStats_SortInstances(  ) RETURNS:  =>Sort render stats by model instances (descending sort)
RenderStats_SortRenderCalls(  ) RETURNS:  =>Sort render stats by render calls (descending sort)
RenderStats_SortShaderChanges(  ) RETURNS:  =>Sort render stats by shader changes (descending sort)
RenderStats_SortTris(  ) RETURNS:  =>Sort render stats by mesh triangles (descending sort)
RenderStats_Toggle(  ) RETURNS:  =>Toggle collecting and displaying render stats
ResourceContainer_ClearCache( String cacheName ) RETURNS:  =>Cleanup resources in cache. Only for debug purposes, not in RTM.
ResourceContainer_CreateCache( String cacheName, Integer cacheSize ) RETURNS:  =>Create a cache to load resources into giving its name and number of resources to hold
ResourceContainer_LogRefs(  ) RETURNS:  =>Log resource references to log. Only for debug purposes, not in RTM.
restart(  ) RETURNS:  =>Restart a single player game, skirmish game, or the front end. (doesn't work in multiplayer games)
RulesProfiler_Activate( Boolean on ) RETURNS:  =>Activate the scar RulesProfiler
RulesProfiler_Enable( Boolean on ) RETURNS:  =>Enable the scar RulesProfiler so it runs in the background. Call this before RulesProfiler_Activate
RulesProfiler_IsActive(  ) RETURNS:  =>Returns true if the scar RulesProfiler is active
RulesProfiler_ResetTypeFilter(  ) RETURNS:  =>Don't filter the RulesProfiler displayed rules.
RulesProfiler_SetTypeFilter( String filter ) RETURNS:  =>Filter the RulesProfiler to filter displayed rules to given type. E.g., "SCAR", "AI"
SBP_Exists( String pbgShortname ) RETURNS:  =>Returns true if a squad blueprint exists with the given name.
SBP_IsOfRace( String pbgShortname, ScarRacePBG race ) RETURNS:  =>Returns whether the squad blueprint is of specified race
Scar_AddInit( LuaFunction f ) RETURNS:  =>Register an init function with the scar system.
Scar_DebugCheatMenuExecute( String command ) RETURNS:  =>execute command string in cheat menu domain. Will only work if dev mode is enabled! (it's OFF by default in RTM builds)
Scar_DebugConsoleExecute( String command ) RETURNS:  =>execute console command string. Will only work if dev mode is enabled! (it's OFF by default in RTM builds)
Scar_DoFile( String scriptName ) RETURNS:  =>Run the specified scar script file
Scar_DoString( String str ) RETURNS:  =>Run the specified scar command
Scar_DrawMarkers(  ) RETURNS:  =>Toggle drawing debug info for scar markers
Scar_GroupInfo(  ) RETURNS:  =>Toggle mouse over debug info on which group the entity belongs to
Scar_GroupList(  ) RETURNS:  =>Toggle a list of all egroups and sgroups in the game
Scar_InitComplete(  ) RETURNS:  =>Lets lua tell the game when it has finished initializing
Scar_InitExists( LuaFunction f ) RETURNS:  =>Returns true if an init function exists
Scar_Reload(  ) RETURNS:  =>Reload all scar scripts
Scar_RemoveInit( LuaFunction f ) RETURNS:  =>Unregister an init function that was registered from Scar_AddInit
scartype( StackVar v ) RETURNS:  =>Returns ST_NIL,ST_BOOLEAN,ST_NUMBER,ST_STRING,ST_TABLE,ST_FUNCTION,ST_SCARPOS,ST_EGROUP,ST_ENTITY,ST_SGROUP,ST_SQUAD,ST_TEAM,ST_MARKER, ST_PBG, or ST_UNKNOWN
scartype_enum_tostring( StackVar v ) RETURNS:  =>Returns a string representing the scartype when passed a scartype enum value
scartype_tostring( StackVar v ) RETURNS:  =>Returns a string representing the scartype
separated( or not, SGroupID smallvector<SGroup, SGroupID sgroup, Boolean spawnedOnly, Real idealSquadRadius ) RETURNS:  =>Try to group the squads, returning the squads in groupings that are at least the ideal squad range apart
setsimframecap( Real fcap ) RETURNS:  =>Set the simulation rate
setsimpause(  ) RETURNS:  =>Pause the simulation.
setsimrate( Real rate ) RETURNS:  =>Set the simulation rate
Setup_GetWinConditionOptions( StackVarTable outOptions ) RETURNS:  =>Fill table with win condition options - schema is loaded from .win file
Setup_SetPlayerName( PlayerID player, String name ) RETURNS:  =>Set the UI name of a given player.
Setup_SetPlayerRace( PlayerID player, ScarRacePBG racePBG ) RETURNS:  =>Set the race for a given player.  Use World_GetRaceBlueprint() to get the race id from the ME name.
Setup_SetPlayerStartingPosition( PlayerID player, Position pos ) RETURNS:  =>Set the starting position of a given player.
Setup_SetPlayerTeam( PlayerID p, Integer team_id ) RETURNS:  =>Put a player in a team. Use TEAM_NEUTRAL as the team_id to set the player as neutral
SGroup_Add( SGroupID group, SquadID squadron ) RETURNS:  =>Adds an squadron to the end of a group if the group doesn't already have it.
SGroup_AddGroup( SGroupID group, SGroupID grouptoadd ) RETURNS:  =>Same as EGroup_AddGroup.  Note: You cannot mix squad groups and entity groups.
SGroup_CalculateClusterSeparation( SGroupID sgroup, Boolean spawnedOnly, Integer numClusters ) RETURNS:  =>Try group the given list of squads into clusters and returns the average distance between these clusters.  Returns -1 if any error occurs.
SGroup_Clear( SGroupID sgroup ) RETURNS:  =>Removes all entities from a group.
SGroup_ClearPostureSuggestion( SGroupID sgroup ) RETURNS:  =>Clears any previous posture suggestions made to a squad
SGroup_Compare( SGroupID group1, SGroupID group2 ) RETURNS:  =>Returns true if the contents of the two groups are equal. Order of the entities does not matter.
SGroup_ContainsSGroup( SGroupID group1, SGroupID group2, Boolean all ) RETURNS:  =>Returns true if SGroup1 contains ANY or ALL of SGroup2
SGroup_ContainsSquad( SGroupID group, Integer SquadID, Boolean includeDespawned ) RETURNS:  =>Returns true if SGroup contains a particular SquadID
SGroup_Count( SGroupID sgroup ) RETURNS:  =>Returns the total number of spawned and despawned squads in a group.
SGroup_CountAlliedSquads( SGroupID group, PlayerID player ) RETURNS:  =>Returns the number of squads within an Sgroup that match an alliance with the player passed in
SGroup_CountDeSpawned( SGroupID sgroup ) RETURNS:  =>Returns the number of despawned squads in a group.
SGroup_CountEnemySquads( SGroupID group, PlayerID player ) RETURNS:  =>Returns the number of squads within an Sgroup that match an alliance with the player passed in
SGroup_CountSpawned( SGroupID sgroup ) RETURNS:  =>Returns the number of spawned squads in a group.
SGroup_Create( String name ) RETURNS:  =>Returns a new squadron group with the given name.
SGroup_CreateUniqueWithPrefix( String prefix ) RETURNS:  =>Returns a new squad group with an autogenerated unique name, optionally prefixed by the string passed in.
SGroup_Destroy( SGroupID sgroup ) RETURNS:  =>Manually destroy a group that you don't need anymore.
SGroup_Exists( String name ) RETURNS:  =>Returns true if the squad group with the given name exists
SGroup_FacePosition( SGroupID sgroup, Position pos ) RETURNS:  =>Works like Squad_FacePosition.  All Squads will face the same direction, with the squad the closest to the center determining the direction.
SGroup_ForEach( SGroupID sgroup, StackVarFunction f ) RETURNS:  =>Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return true to break or false to continue.
SGroup_ForEachAllOrAny( SGroupID sgroup, Boolean all, StackVarFunction f ) RETURNS:  =>Call a lua function for each item in a group. Function will receive (groupid, itemindex, itemid) and should return a bool.
SGroup_ForEachAllOrAnyEx( SGroupID sgroup, Boolean all, StackVarFunction f, Boolean spawned, Boolean despawned ) RETURNS:  =>Same as SGroup_ForEachAllOrAny except you have a choice to iterate over spawned squads, despawned squads, or both.
SGroup_ForEachEx( SGroupID sgroup, StackVarFunction f, Boolean spawned, Boolean despawned ) RETURNS:  =>Same as SGroup_ForEach except you have a choice to iterate over spawned squads, despawned squads, or both.
SGroup_FromName( String name ) RETURNS:  =>Find an squadron group with a given name.
SGroup_GetDeSpawnedSquadAt( SGroupID group, Integer int ) RETURNS:  =>Returns the despawned squad at a certain position in the group.
SGroup_GetName( SGroupID sgroup ) RETURNS:  =>Returns the name of a given squad group.
SGroup_GetPosition( SGroupID group ) RETURNS:  =>Returns the center position of a squad group.
SGroup_GetSpawnedSquadAt( SGroupID group, Integer int ) RETURNS:  =>Returns the spawned squad at a certain position in the group.
SGroup_GetSquadAt( SGroupID group, Integer int ) RETURNS:  =>Returns the squad at a certain position in the group.
SGroup_Intersection( SGroupID group, SGroupID grouptointersect ) RETURNS:  =>Same as EGroup_Intersection. Note: You cannot mix squad groups and entity groups.
SGroup_IsValid( Integer sgroupID ) RETURNS:  =>Check to see if an sgroup still exists without needing the name.
SGroup_Remove( SGroupID group, SquadID squadron ) RETURNS:  =>Removes an squadron from a group.
SGroup_SnapFacePosition( SGroupID sgroup, Position pos ) RETURNS:  =>Works like SGroup_FacePosition except with no interpolation.  All Squads will face the same direction, with the squad the closest to the center determining the direction.
SGroup_SuggestPosture( SGroupID sgroup, Integer posture, Real duration ) RETURNS:  =>Suggests a posture to an SGroup, lasting the passed duration
ShaderStats_Disable(  ) RETURNS:  =>Disable collecting and displaying render stats
ShaderStats_DumpToLogFile(  ) RETURNS:  =>Output the render stats to a CSV LogFile for viewing
ShaderStats_Enable(  ) RETURNS:  =>Enable collecting and displaying render stats
ShaderStats_SetUpdateTime( Real time ) RETURNS:  =>Set the render stats refresh update interval (seconds)
ShaderStats_SortPixelCount(  ) RETURNS:  =>Sort render stats by model instances (descending sort)
ShaderStats_SortShaderNames(  ) RETURNS:  =>Sort render stats by model instances (descending sort)
ShaderStats_Toggle(  ) RETURNS:  =>Toggle collecting and displaying render stats
Sim_CheckRequirements(  ) RETURNS:  =>Toggle check requirements information
Sim_DebugDrawSimTick(  ) RETURNS:  =>Draw the current sim tick
Sim_DrawAttention(  ) RETURNS:  =>Toggle drawing debug info for the attention system
Sim_DrawEntityCrusherOBB(  ) RETURNS:  =>Toggle the crush OBB
Sim_DrawEntityExtensions(  ) RETURNS:  =>Toggle entity information
Sim_DrawEntityStateMove(  ) RETURNS:  =>Toggle entity move state debug drawing
Sim_EntityAbility(  ) RETURNS:  =>Toggle a list of all active abilities on the entity
Sim_EntityDelay(  ) RETURNS:  =>Draw the per-entity decision delay if there is one
Sim_EntityDrawPosture(  ) RETURNS:  =>Toggle posture info text for selected entities
Sim_EntityHistory(  ) RETURNS:  =>Toggle a list of all active modifiers on the entity
Sim_EntityInfo(  ) RETURNS:  =>Toggle entity information
Sim_EntityModifier(  ) RETURNS:  =>Toggle a list of all active modifiers on the entity
Sim_EntityOBB(  ) RETURNS:  =>Draw the OBBs for the entity
Sim_EntityOOCTarget(  ) RETURNS:  =>Draw OOC target debug info
Sim_EntityUpgrades(  ) RETURNS:  =>Toggle a list of all completed upgrades on the entity.
Sim_GetDrawMarketInfo(  ) RETURNS:  =>Is the Market info currently being drawn?
Sim_GetTradeEntitiesFromEndpoint( EntityID endpoint, EGroupID egroup ) RETURNS:  =>Clears the egroup, then finds and adds all trade entities registered with an entity endpoint
Sim_MarketAddSettlement( EntityID settlement ) RETURNS:  =>Add a settlement to the market trade manager with specified ID. Settlement will be marked 'not trading' with all players.
Sim_MarketExecuteTrade( PlayerID player, String resourceName, String tradeTypeString ) RETURNS:  =>Attempts to execute a trade on behalf of the specified player, for the specified resource, of the specified type.
Sim_MarketSetTradeStatusPlayer( PlayerID firstPlayer, PlayerID secondPlayer, Boolean status ) RETURNS:  =>Sets market trade status between two players, using the array index they appear at in PlayerManager::GetPlayers_CS()
Sim_MarketSetTradeStatusSettlement( PlayerID player, EntityID settlement, Boolean status ) RETURNS:  =>Sets trade status between a player number and a settlement ID.
Sim_PlayerInfo(  ) RETURNS:  =>Toggle a list of all active player abilities
Sim_PlayerModifiers(  ) RETURNS:  =>Toggle a list of all active player modifiers
Sim_SetDrawMarketInfo( Boolean bEnable ) RETURNS:  =>Set/clear drawing of the market info.
Sim_ShotBlockers(  ) RETURNS:  =>Toggle simulation boxes for shot blockers only
Sim_SimBox(  ) RETURNS:  =>Toggle simulation boxes for entities
Sim_SquadHistory(  ) RETURNS:  =>Toggle a list of all active modifiers on the entity
Sim_SquadInfo(  ) RETURNS:  =>Toggle squad information
Sim_SquadSuppression(  ) RETURNS:  =>Toggle squad suppression information
SitRep_PlayMovie( String url ) RETURNS:  =>Play the specified movie.
SitRep_StopMovie(  ) RETURNS:  =>Stop the currently playing movie.
Sound_Debug_ShowAudioRegions( Boolean enable ) RETURNS:  =>Toggles the display of the terrain audio environment zones on/off.
Sound_ForceMusicEnabled(  ) RETURNS:  =>for the cheat menu
Sound_ForceSetMinimumMusicCombatIntensity( Real combatIntensity, Real durationSeconds ) RETURNS:  =>Force set the combat intensity to be at least combatIntensity for a duration.
Sound_ForceSilenceEnabled(  ) RETURNS:  =>for the cheat menu
Sound_IsPlaying( Integer handle ) RETURNS:  =>Returns true if the sound associated with the handle is currently playing.
Sound_MusicStop(  ) RETURNS:  =>stops the music immediately and go into silence.
Sound_Play2D( String eventName ) RETURNS:  =>Plays a 2D sound. Returns a handle to the sound event.
Sound_Play3D( String eventName, EntityID actor ) RETURNS:  =>Plays a 3D sound on the entity. Returns a handle to the sound event.
Sound_PlaySpeech( String eventName, Integer eventArgs ) RETURNS:  =>Play a speech event based on the local player's race.
Sound_PlaySpeechForPlayer( PlayerID player, String eventName, Integer eventArgs ) RETURNS:  =>Play a speech event based on a player's race.
Sound_PostEvent( String eventName, Integer handle ) RETURNS:  =>Posts an event on an already playing sound. Returns a handle to the new sound event.
Sound_SetForceMusic( Boolean value ) RETURNS:  =>tells the music system if it should be trying to enter/stay in the playing music state
Sound_SetForceSilence( Boolean value ) RETURNS:  =>tells the music system if it should be trying to enter/stay in the silent state
Sound_SetManualMusicSelectDuration( Real durationSecs ) RETURNS:  =>Prevents the music system from automatically switching between layers and stopping for the duration.
Sound_SetMinimumMusicCombatIntensity( Real combatIntensity, Real durationSeconds ) RETURNS:  =>Set the target combat intensity to at least the value of value combatIntensity for a duration.
Sound_SetMusicIntensityScaling( Real scale ) RETURNS:  =>sets the scaling multiplier for the music intensity value
Sound_SetMusicRaceCode( String raceCode ) RETURNS:  =>sets the race rtpc for controlling what race's music gets played
Sound_StartMusicOutro( String outroEvent ) RETURNS:  =>stops the music immediately and go into silence.
Sound_Stop( Integer handle ) RETURNS:  =>Stops sound associated with the handle.
Splat_Create( String splatName, Position position, Real xScale, Real zScale, Real rotationDegrees, Integer r, Integer g, Integer b, Integer a, Boolean mirrorX, Boolean mirrorZ ) RETURNS:  =>Add a splat to the terrain. Returns a unique decal id allow for future removal via Splat_Destroy
Splat_Destroy( TerrainSplatObject* handle ) RETURNS:  =>Destroy a splat by unique id
Splat_GetInvalidID(  ) RETURNS:  =>Get the Splat ID that represents an invalid splat (useful to check if creation failed)
Squad_AddAbility( SquadID squad, ScarAbilityPBG ability ) RETURNS:  =>Allows the squad to use this ability
Squad_AddAllResources( SquadID squad, Real amount ) RETURNS:  =>Add resources of all types to the specified squad by the specified amount, specifically to the SquadResourceExt.
Squad_AddSlotItemToDropOnDeath( SquadID squad, ScarSlotItemPBG pbg, Real dropChance, Boolean exclusive ) RETURNS:  =>Add to the list of slot items to drop when this squad is wiped out
Squad_AdjustAbilityCooldown( SquadID squad, Integer tickAmount ) RETURNS:  =>Advance ability cooldown
Squad_CanAttackEntity( SquadID attacker, EntityID target, Boolean checkFOW, Boolean checkVis ) RETURNS:  =>Check if squad can attack target
Squad_CanCaptureStrategicPoint( SquadID squad, EntityID entity ) RETURNS:  =>Returns true if squad can capture stategic point
Squad_CanCaptureTeamWeapon( SquadID pSquad, EntityID pEntity ) RETURNS:  =>True if the squad can capture the entity sync weapon
Squad_CanCastAbilityOnEntity( SquadID castingSquad, ScarAbilityPBG abilityPBG, EntityID targetEntity ) RETURNS:  =>Test whether a squad can be ordered to do this ability on the target squad
Squad_CanCastAbilityOnPosition( SquadID castingSquad, ScarAbilityPBG abilityPBG, Position targetPos ) RETURNS:  =>Test whether a squad can be ordered to do this ability on the target squad
Squad_CanCastAbilityOnSquad( SquadID castingSquad, ScarAbilityPBG abilityPBG, SquadID targetSquad ) RETURNS:  =>Test whether a squad can be ordered to do this ability on the target squad
Squad_CancelProductionQueueItem( SquadID squad, Integer index ) RETURNS:  =>Cancels an item in a production queue.  Index 0 is the currently producing item.
Squad_CanHold( SquadID squad ) RETURNS:  =>Checks whether a squad can hold any squad
Squad_CanInstantReinforceNow( SquadID squad ) RETURNS:  =>Returns true if the squad is available to be reinforced
Squad_CanLoadSquad( SquadID squad, SquadID loadthis, Boolean assumeEmpty, Boolean assumeVisible ) RETURNS:  =>Checks whether a squad can load another squad
Squad_CanPickupSlotItem( SquadID pSquad, EntityID pEntity ) RETURNS:  =>True if the squad can pickup the entity slot item
Squad_CanRecrew( SquadID pSquad, EntityID pEntity ) RETURNS:  =>True if the squad can recrew the entity
Squad_CanSeeEntity( SquadID squad, EntityID entity ) RETURNS:  =>Returns true if the distance between a target entity and the source squad is less than it squad's sight distance.  There is no LOS or FOW check.
Squad_CanSeeSquad( SquadID squad, SquadID target ) RETURNS:  =>Returns true if the distance between a target squad and the source squad is less than it squad's sight distance.  There is no LOS or FOW check.
Squad_CanTargetEntity( Squad& squad, Entity& target, Boolean checkFOW ) RETURNS:  =>Check if a squad can target and attack a given entity.
Squad_CanTargetSquad( Squad& squad, Squad& target, Boolean checkFOW ) RETURNS:  =>Check if a squad can target and attack at least one entity in the given target squad.
Squad_ClearPostureSuggestion( SquadID squad ) RETURNS:  =>Clears any previous posture suggestions made to a squad
Squad_ClearStateModelEnumTableTarget( SquadID squad, String key, Integer tableRowIndex ) RETURNS:  =>Clears a TargetHandle value in the squad's state model corresponding to the given key and table row index (0 based).
Squad_ClearStateModelTarget( SquadID squad, String key ) RETURNS:  =>Clears a TargetHandle value in the squad's state model corresponding to the given key.
Squad_CompleteUpgrade( SquadID pSquad, ScarUpgradePBG upgradePBG ) RETURNS:  =>Instantly adds an upgrade to a given squad
Squad_Count( SquadID squad ) RETURNS:  =>Returns the number of units currently in a squad (spawned AND despawned!!)
Squad_CreateAndSpawnToward( ScarSquadPBG sbp, PlayerID player, Integer loadoutCount, Position pos, Position toward ) RETURNS:  =>Create a squad, spawn it and assign it to a player.
Squad_DeSpawn( SquadID squad ) RETURNS:  =>Despawn the entire squad at its current position.
Squad_Destroy( SquadID squad ) RETURNS:  =>Remove an squad from the world and destroy it.
Squad_EnableProductionQueue( SquadID squad, Boolean enable ) RETURNS:  =>Sets whether a squad can produce anything (including upgrades)
Squad_EnableSurprise( SquadID squad, Boolean enable ) RETURNS:  =>Enables or disables the surprise feature on thie given squad
Squad_EntityAt( SquadID squad, Integer index ) RETURNS:  =>ZERO-BASED get of entities out of squads
Squad_ExtensionCount(  ) RETURNS:  =>Returns total squad extension count.
Squad_ExtensionEnabled( SquadID pSquad, ComponentDependencyIndex extID ) RETURNS:  =>Returns true if the squad has the specific extension enabled.
Squad_ExtensionName( SquadID pSquad, ComponentDependencyIndex extID ) RETURNS:  =>Returns a string name of the given extension on the squad.
Squad_FacePosition( SquadID squad, Position pos ) RETURNS:  =>Set the rotation of all units in a squad to face the position.
Squad_FaceSquad( SquadID squad1, SquadID squad2 ) RETURNS:  =>Get 2 squads to face each other. This function works on spawned squads only.
Squad_FindCover( SquadID squad, Position pos, Real coverSearchRadius ) RETURNS:  =>Tries to find cover within a certain radius of a position. If no cover is found, it returns the position used for the search.
Squad_FindCoverCompareCurrent( SquadID squad, Position pos, Real coverSearchRadius, Real maxPathDistanceFromGoal, Boolean compareToCurrentCover ) RETURNS:  =>Tries to find cover within a certain radius of a position, traveling a max distance to get there, and possibly comparing against current position's cover. If no cover is found, it returns the position used for the search.
Squad_FromID( Integer id ) RETURNS:  =>Get a squad from a mission editor ID.
Squad_GetActiveUpgrades( Squad& squad ) RETURNS:  =>Returns all active upgrades this squad has.
Squad_GetAttackTargets( SquadID squad, SGroupID sgroup ) RETURNS:  =>Find the squad member current or forced targets. The sgroup is cleared, and any attack target squads found are added to the sgroup. Entity targets like buildings are ignored.
Squad_GetBlueprint( SquadID squad ) RETURNS:  =>Returns the squad blueprint of the squad (from the attribute editor)
Squad_GetCoverLevel( SquadID squad ) RETURNS:  =>Returns a number representing how good squad cover is -1 for awful, 0 for none, 1 for light, 2 for heavy
Squad_GetDestination( SquadID squad ) RETURNS:  =>Returns the squad's destination, if it's moving. IMPORTANT: you must only call this function if Squad_HasDestination has returned true.
Squad_GetHeading( SquadID squad ) RETURNS:  =>Returns the average heading of the spawned units in the squad. The heading is currently a lua table with three entries (x, y, z)
Squad_GetHealth( SquadID squad ) RETURNS:  =>Returns the current health of a squad.
Squad_GetHealthMax( SquadID squad ) RETURNS:  =>Returns the max health of the squad.
Squad_GetHealthPercentage( SquadID squad, Boolean bIncludeBonuses ) RETURNS:  =>Returns how much of an original squad's health is left, accounting for deaths (ex: a squad of 3 riflemen would be at 50% health, since they started with 6 members) Note: This is the same percentage that the UI uses.
Squad_GetHealthPercentageWithShields( SquadID squad, Boolean includeBonuses ) RETURNS:  =>Returns how much of the squad's health is left as a percentage.
Squad_GetHoldEntity( SquadID squad ) RETURNS:  =>Get which building (entity) is the squad garrisoned
Squad_GetHoldSquad( SquadID squad ) RETURNS:  =>Get which vehicle (squad) is the squad garrisoned
Squad_GetID( SquadID squad ) RETURNS:  =>Returns an integer containing the unqiue squad ID for this squad.
Squad_GetInternalAIEncounterPtr( SquadID squad ) RETURNS:  =>returns the Encounter that controls the Squad
Squad_GetInvulnerableEntityCount( SquadID squad ) RETURNS:  =>Returns the number of invulnerable member
Squad_GetInvulnerableMinCap( SquadID squad ) RETURNS:  =>Returns squad health min cap or the highest invulnerable min cap percentage from members of the squad.
Squad_GetLastAttacker( SquadID squad, SGroupID sgroup ) RETURNS:  =>Find the last squad attacker on this squad. If found, the squad is added to the sgroup
Squad_GetLastAttackers( SquadID squad, SGroupID group, Real timeSeconds ) RETURNS:  =>Find the squad attackers on this squad from the last seconds specified. The sgroup is cleared, then any squads found are added to the sgroup. Building attackers are ignored.
Squad_GetLastEntityAttacker( SquadID squad, EGroupID egroup ) RETURNS:  =>Find the last entity attacker on this squad. If found, the entity added to egroup
Squad_GetMax( SquadID squad ) RETURNS:  =>Returns the max number of units allowed in the squad
Squad_GetMaxEntityDropOffDistance( SquadID targetSquad ) RETURNS:  =>Returns the sum of all entities in a squad's resourceDropOffDistance state model value if it exists and the entities have a state model ext.  Otherwise it will return 0.0f
Squad_GetMinArmor( SquadID squad ) RETURNS:  =>Returns the current minimum armor of a squad.
Squad_GetMostRecentQueuedCommandID( SquadID squad ) RETURNS:  =>Returns the command ID of the most recent queued command on the Squad.
Squad_GetNumSlotItem( SquadID squad, ScarSlotItemPBG pbg ) RETURNS:  =>Get the number of slot items with the same ID that the squad has
Squad_GetPlayerOwner( SquadID squad ) RETURNS:  =>Returns the Player owner of the given squad. Squad MUST NOT be owned by the world.
Squad_GetPosition( SquadID squad ) RETURNS:  =>Returns the average position of the spawned units in the squad. The position is currently a lua table with three entries (x, y, z)
Squad_GetPositionDeSpawned( SquadID squad ) RETURNS:  =>Returns the average position of the despawned AND spawned units in the squad.
Squad_GetProductionQueueItem( SquadID squad, Integer index ) RETURNS:  =>Returns the blueprint for a production queue item with index.
Squad_GetProductionQueueItemType( SquadID squad, Integer index ) RETURNS:  =>Returns the production type (PITEM_Upgrade, PITEM_Spawn, PITEM_SquadUpgrade, PITEM_SquadReinforce, PITEM_PlayerUpgrade) for a production queue item with index.
Squad_GetProductionQueueSize( SquadID squad ) RETURNS:  =>Returns the number of items in the squad's production queue.
Squad_GetRace( SquadID squad ) RETURNS:  =>Returns the race property bag group for the given squad
Squad_GetShieldPercentage( SquadID squad ) RETURNS:  =>Returns how much of the squad's shield is left as a percentage.
Squad_GetSlotItemAt( SquadID squad, Integer index ) RETURNS:  =>Returns the ID of the slot item. Use Squad_GetSlotItemCount to determine how many slot items the squad has. The first index is 1
Squad_GetSlotItemCount( SquadID squad ) RETURNS:  =>Returns how many slot items this squad has
Squad_GetSquadDoingDisableOnSquad( SquadID pSquad ) RETURNS:  =>returns the Squad that sent the passed squad in a disable state
Squad_GetSquadsHeld( SquadID squad, SGroupID sgroup ) RETURNS:  =>Clear the sgroup, then add all squads held by 'squad' to it
Squad_GetStateModelBool( SquadID squad, String key ) RETURNS:  =>Returns a boolean value from the squad's state model corresponding to the given key.
Squad_GetStateModelEntityTarget( SquadID squad, String key ) RETURNS:  =>Returns an Entity value from the squad's state model corresponding to the given key.
Squad_GetStateModelEnumTableBool( SquadID squad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a boolean value from the squad's state model corresponding to the given key and table row index (0 based).
Squad_GetStateModelEnumTableEntityTarget( SquadID squad, String key, Integer tableRowIndex ) RETURNS:  =>Returns an Entity value from the squad's state model corresponding to the given key and table row index (0 based).
Squad_GetStateModelEnumTableFloat( SquadID squad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a float value from the squad's state model corresponding to the given key and table row index (0 based).
Squad_GetStateModelEnumTableInt( SquadID squad, String key, Integer tableRowIndex ) RETURNS:  =>Returns an integer value from the squad's state model corresponding to the given key and table row index (0 based).
Squad_GetStateModelEnumTablePlayerTarget( SquadID squad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Player value from the squad's state model corresponding to the given key and table row index (0 based).
Squad_GetStateModelEnumTableSquadTarget( SquadID squad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Squad value from the squad's state model corresponding to the given key and table row index (0 based).
Squad_GetStateModelEnumTableVector3f( SquadID squad, String key, Integer tableRowIndex ) RETURNS:  =>Returns a Vector3f value from the squad's state model corresponding to the given key and table row index (0 based).
Squad_GetStateModelFloat( SquadID squad, String key ) RETURNS:  =>Returns a float value from the squad's state model corresponding to the given key.
Squad_GetStateModelInt( SquadID squad, String key ) RETURNS:  =>Returns an integer value from the squad's state model corresponding to the given key.
Squad_GetStateModelPlayerTarget( SquadID squad, String key ) RETURNS:  =>Returns a Player value from the squad's state model corresponding to the given key.
Squad_GetStateModelSquadTarget( SquadID squad, String key ) RETURNS:  =>Returns a Squad value from the squad's state model corresponding to the given key.
Squad_GetStateModelVector3f( SquadID squad, String key ) RETURNS:  =>Returns a Vector3f value from the squad's state model corresponding to the given key.
Squad_GetSuppression( SquadID squad ) RETURNS:  =>Check current squad suppresion level. Return value from 0 to 1
Squad_GetVehicleMobileDriverSquad( SquadID pSquad ) RETURNS:  =>Gets the mobile driver squad from a vehicle squad
Squad_GetVeterancy( SquadID squad ) RETURNS:  =>Get current squad veterancy
Squad_GetVeterancyRank( SquadID squad ) RETURNS:  =>Get current squad veterancy rank.
Squad_GiveSlotItem( SquadID squad, ScarSlotItemPBG pbg ) RETURNS:  =>Gives a slot item to the squad. Can fail due to not enough slots left
Squad_HasAbility( SquadID squad, ScarAbilityPBG ability ) RETURNS:  =>Tests to see if a squad has an ability
Squad_HasActiveCommand( SquadID squad ) RETURNS:  =>Returns true if there's an active command currently for the squad
Squad_HasBuilding( SquadID pSquad ) RETURNS:  =>Returns true if the given squad has a building in it (includes team weapons)
Squad_HasDestination( SquadID squad ) RETURNS:  =>Returns whether this squad is moving and has a destination, it will not return true on the same tick that the move request is issued
Squad_HasEntityWithNInteractors( SquadID targetSquad, String interactionTypeName, Integer minAttachedCount ) RETURNS:  =>Returns if squad contains an entity with at least minAttachedCount attached interactibles of interactionTypeName type
Squad_HasHeavyWeapon( SquadID pSquad ) RETURNS:  =>Returns true if the given squad has a heavy weapon (non moving setup weapon)
Squad_HasInfantry( SquadID pSquad ) RETURNS:  =>Returns true if the given squad has at least one infantry unit in it (includes team weapons)
Squad_HasProductionQueue( SquadID squad ) RETURNS:  =>Returns true if a squad has a production queue.
Squad_HasSetupTeamWeapon( SquadID pSquad ) RETURNS:  =>Returns true if the given squad has team weapon setup for attack
Squad_HasTeamWeapon( SquadID pSquad ) RETURNS:  =>Returns true if the given squad has a team weapon
Squad_HasUpgrade( SquadID squad, ScarUpgradePBG pbg ) RETURNS:  =>Return true if the squad has purchased the specified upgrade.
Squad_HasVehicle( SquadID pSquad ) RETURNS:  =>Returns true if the given squad has a vehicle in it (includes team weapons)
Squad_HasWeaponHardpoint( SquadID pSquad, String hardPointName ) RETURNS:  =>Returns true if the given squad has at least one Entity who has the specified weapon hardpoint.
Squad_IncreaseVeterancy( SquadID squad, Real veterancy, Boolean silent, Boolean applyModifiers ) RETURNS:  =>Increase current squad veterancy
Squad_IncreaseVeterancyRank( SquadID squad, Integer numranks, Boolean silent ) RETURNS:  =>Increase current squad veterancy rank
Squad_InstantSetupTeamWeapon( SquadID squad ) RETURNS:  =>Stops current squads activity and instant setup the team weapon if they have one
Squad_IsAbilityActive_CS( SquadID squad, ScarAbilityPBG pbg ) RETURNS:  =>True if the ability is active
Squad_IsAlive( SquadID squad ) RETURNS:  =>Check if the squad is alive
Squad_IsAttacking( SquadID squad, Real time ) RETURNS:  =>Returns true if any unit in the squad is attacking within the time
Squad_IsAttackMoving( SquadID squad ) RETURNS:  =>Returns true if the squad is currently attack-moving.
Squad_IsCapturing( SquadID squad ) RETURNS:  =>Returns true if the squad is currently capturing.
Squad_IsCasualty( SquadID squad ) RETURNS:  =>Returns true if any spawned entity in the squad is a casualty
Squad_IsConstructing( SquadID squad ) RETURNS:  =>Returns true if the squad is currently constructing.
Squad_IsDoingAbility( SquadID squad, ScarAbilityPBG pbg ) RETURNS:  =>True if squad is currently performing the given ability
Squad_IsFemale( SquadID squad ) RETURNS:  =>Returns whether the passed in squad is female
Squad_IsGatheringResourceType( SquadID targetSquad, Integer type ) RETURNS:  =>Returns if squad contains an entity that is performing a specific unit role
Squad_IsHoldingAny( SquadID squad ) RETURNS:  =>Check if the squad has a hold on anything (use this on vehicles)
Squad_IsHoldingPosition( SquadID squad ) RETURNS:  =>Returns true if Squad is holding position.
Squad_IsIdle( SquadID squad ) RETURNS:  =>Returns true if the squad is idling
Squad_IsInAIEncounter( SquadID squad ) RETURNS:  =>returns true if the Squad is in an Encounter
Squad_IsInBackground( SquadID pSquad ) RETURNS:  =>Returns whether or not the squad is in the background. Default returns false (if the squad is empty)
Squad_IsInHoldEntity( SquadID squad ) RETURNS:  =>Check if the squad is garrisoned in entity (building)
Squad_IsInHoldSquad( SquadID squad ) RETURNS:  =>Check if the squad is loaded in squad (vehicle
Squad_IsInMeleeCombat( SquadID pSquad ) RETURNS:  =>Returns true if the squad is in melee combat
Squad_IsKnockedBack( SquadID squad ) RETURNS:  =>True if the squad is currently being knocked back
Squad_IsMoving( SquadID squad ) RETURNS:  =>Returns true if any unit in the squad is currently moving
Squad_IsOfType( SquadID squad, String type ) RETURNS:  =>Determines if this squad is of the given type. Types are defined in squad_type_ext/squad_type_list
Squad_IsOnWalkableWall( SquadID squad, Boolean all ) RETURNS:  =>Returns true if any entity of a squad (all=false) or the whole (all=true) squad is on walkable wall.
Squad_IsOwnedByPlayer( SquadID squad, PlayerID player ) RETURNS:  =>Returns true if the given squad is owned by the given player
Squad_IsPinned( SquadID squad ) RETURNS:  =>True if squad is currently pinned
Squad_IsPinnedOrSuppressed( SquadID squad ) RETURNS:  =>True if squad is currently pinned or suppressed
Squad_IsReinforcing( SquadID squad ) RETURNS:  =>Returns true if the squad is currently reinforcing.  This function will return false if the squad does not have a reinforce ext.
Squad_IsRetreating( SquadID squad ) RETURNS:  =>Returns true if the squad is retreating
Squad_IsSBPOfType( ScarSquadPBG sbp, String type ) RETURNS:  =>Returns true if the given blueprint is of the given type. Types are defined in squad_type_ext/squad_type_list
Squad_IsSettingDemolitions( SquadID squad ) RETURNS:  =>Returns true if the squad is currently placing charges.
Squad_IsSiege( ScarSquadPBG pbg ) RETURNS:  =>Returns true if the supplied squad pbg is a siege unit
Squad_IsStunned( SquadID squad ) RETURNS:  =>True if the squad is currently stunned
Squad_IsSuppressed( SquadID squad ) RETURNS:  =>True if squad is currently suppressed
Squad_IsUnderAttack( SquadID squad, Real time ) RETURNS:  =>Returns true if any unit in the squad is under attack within the time
Squad_IsUnderAttackByPlayer( SquadID squad, PlayerID pAttackerOwner, Real time ) RETURNS:  =>Returns true if squad is under attack by enemy from a particular player
Squad_IsUnderAttackFromDirection( SquadID squad, Integer offset, Real timeSeconds ) RETURNS:  =>Returns true if the squad was under attack from a certain direction (8 offset types, see ScarUtil.scar)
Squad_IsUpgrading( SquadID squad, ScarUpgradePBG upgrade ) RETURNS:  =>Returns true if the squad is currently upgrading something specific.
Squad_IsUpgradingAny( SquadID squad ) RETURNS:  =>Returns true if the squad is currently upgrading anything.
Squad_IsValid( Integer id ) RETURNS:  =>Check if a squad with the given ID can be found in the world
Squad_Kill( SquadID squad ) RETURNS:  =>Kill whole squad.  Sets health to 0, and triggers death effects.
Squad_NumUpgradeComplete( SquadID squad, ScarUpgradePBG upgradePBG ) RETURNS:  =>Returns the number of upgrades that this squad has.
Squad_Population( SquadID squad, CapType type ) RETURNS:  =>get squad pop cost, use CT_Personnel, CT_Vehicle, CT_Medic for captype
Squad_Precache( ScarSquadPBG sbp, Integer skinItemDefinitionID, PlayerID player, String resourceContainerCacheName, String source, String id ) RETURNS:  =>Precache squad resources and listen for event GE_EntityPrecached that it is done
Squad_RemoveAbility( SquadID squad, ScarAbilityPBG ability ) RETURNS:  =>Removes an ability that was previously added by Squad_AddAbility. You cannot remove static abilities (from AE: squad_ability_ext)
Squad_RemoveSlotItemAt( SquadID squad, Integer index, Boolean bInstantWeaponChange ) RETURNS:  =>Removes a slot item from the squad.
Squad_RemoveStateModelListBool( SquadID squad, String key, Boolean value ) RETURNS:  =>Removes a boolean value in the squad's state model list corresponding to the given key.
Squad_RemoveStateModelListEntityTarget( SquadID squad, String key, EntityID value ) RETURNS:  =>Removes an Entity TargetHandle value in the squad's state model list corresponding to the given key.
Squad_RemoveStateModelListFloat( SquadID squad, String key, Real value ) RETURNS:  =>Removes a float value in the squad's state model list corresponding to the given key.
Squad_RemoveStateModelListInt( SquadID squad, String key, Integer value ) RETURNS:  =>Removes an integer value in the squad's state model list corresponding to the given key.
Squad_RemoveStateModelListPlayerTarget( SquadID squad, String key, PlayerID value ) RETURNS:  =>Removes a Player TargetHandle value in the squad's state model list corresponding to the given key.
Squad_RemoveStateModelListSquadTarget( SquadID squad, String key, SquadID value ) RETURNS:  =>Removes a Squad TargetHandle value in the squad's state model list corresponding to the given key.
Squad_RemoveStateModelListVector3f( SquadID squad, String key, Position value ) RETURNS:  =>Removes a Vector3f value in the squad's state model list corresponding to the given key.
Squad_RemoveUpgrade( SquadID squad, ScarUpgradePBG upgrade ) RETURNS:  =>Removes an upgrade from a squad
Squad_RewardActionPoints( SquadID squad, Real actionPoint ) RETURNS:  =>Give squad action points
Squad_SBPEntityAt( ScarSquadPBG sbp, Integer index ) RETURNS:  =>ZERO-BASED get of entity blueprints out of squad blueprint
Squad_SBPGetMax( ScarSquadPBG sbp ) RETURNS:  =>Returns the max number of units allowed in the squad blueprint
Squad_SetBackground( SquadID pSquad, Boolean isInBackground ) RETURNS:  =>Sets the squad to be in the background or foreground. By default, all squads are in the foreground
Squad_SetExtEnabled( SquadID pSquad, String extID, Boolean enabled ) RETURNS:  =>Enables or disables the squad's UI extension (which controls all UI elements related to the squad)
Squad_SetHealth( SquadID squad, Real healthPercent ) RETURNS:  =>Set the health of all units in a squad.  Health must be in range [0.0, 1.0]
Squad_SetInvulnerableEntityCount( SquadID squad, Integer invEntityCount, Real resetTime ) RETURNS:  =>Make a squad invulnerable to physical damage when number of members drop to or below specified count.
Squad_SetInvulnerableMinCap( SquadID squad, Real minHealthPercentage, Real resetTime ) RETURNS:  =>Make a squad invulnerable to physical damage.
Squad_SetMoodMode( SquadID squad, SquadCombatBehaviourMoodMode mood ) RETURNS:  =>Set soldier mood mode.
Squad_SetMoveType( SquadID squad, ScarMoveTypePBG movetypePBG ) RETURNS:  =>Sets the squad's move type
Squad_SetPlayerOwner( SquadID squad, PlayerID owner ) RETURNS:  =>Changes the owner of the given squad.
Squad_SetPosition( SquadID squad, Position pos, Position positionFacingToward ) RETURNS:  =>Moves the squad to a new position and snaps squad members onto grid cell centres.
Squad_SetPosition3D( SquadID squad, Position pos, Position toward ) RETURNS:  =>Moves the squad to an arbitrary new 3D position.
Squad_SetRecrewable( SquadID squad, Boolean capturable ) RETURNS:  =>Set entity inside the squad to be recrewable or not when it becomes abandoned
Squad_SetResource( SquadID squad, Integer resourceType, Real newAmount ) RETURNS:  =>This function uses squad resources rather than entity resources. For awarding resources to units, it's best to use Entity_AddResource instead (located in luaentity.cpp).
Squad_SetSharedProductionQueue( SquadID squad, Boolean shared ) RETURNS:  =>Enables shared team production on a building (teammates can build using THEIR resources)
Squad_SetStateModelBool( SquadID squad, String key, Boolean value ) RETURNS:  =>Sets a boolean value in the squad's state model corresponding to the given key.
Squad_SetStateModelEntityTarget( SquadID squad, String key, EntityID value ) RETURNS:  =>Sets an Entity TargetHandle value in the squad's state model corresponding to the given key.
Squad_SetStateModelEnumTableBool( SquadID squad, String key, Integer tableRowIndex, Boolean value ) RETURNS:  =>Sets a boolean value in the squad's state model corresponding to the given key and table row index (0 based).
Squad_SetStateModelEnumTableEntityTarget( SquadID squad, String key, Integer tableRowIndex, EntityID value ) RETURNS:  =>Sets an Entity TargetHandle value in the squad's state model corresponding to the given key and table row index (0 based).
Squad_SetStateModelEnumTableFloat( SquadID squad, String key, Integer tableRowIndex, Real value ) RETURNS:  =>Sets a float value in the squad's state model corresponding to the given key and table row index (0 based).
Squad_SetStateModelEnumTableInt( SquadID squad, String key, Integer tableRowIndex, Integer value ) RETURNS:  =>Sets an integer value in the squad's state model corresponding to the given key and table row index (0 based).
Squad_SetStateModelEnumTablePlayerTarget( SquadID squad, String key, Integer tableRowIndex, PlayerID value ) RETURNS:  =>Sets a Player TargetHandle value in the squad's state model corresponding to the given key and table row index (0 based).
Squad_SetStateModelEnumTableSquadTarget( SquadID squad, String key, Integer tableRowIndex, SquadID value ) RETURNS:  =>Sets a Squad TargetHandle value in the squad's state model corresponding to the given key and table row index (0 based).
Squad_SetStateModelEnumTableVector3f( SquadID squad, String key, Integer tableRowIndex, Position value ) RETURNS:  =>Sets a Vector3f value in the squad's state model corresponding to the given key and table row index (0 based).
Squad_SetStateModelFloat( SquadID squad, String key, Real value ) RETURNS:  =>Sets a float value in the squad's state model corresponding to the given key.
Squad_SetStateModelInt( SquadID squad, String key, Integer value ) RETURNS:  =>Sets an integer value in the squad's state model corresponding to the given key.
Squad_SetStateModelListBool( SquadID squad, String key, Boolean value, Boolean allowDuplicates ) RETURNS:  =>Sets a boolean value in the squad's state model list corresponding to the given key.
Squad_SetStateModelListEntityTarget( SquadID squad, String key, EntityID value, Boolean allowDuplicates ) RETURNS:  =>Sets an Entity TargetHandle value in the squad's state model list corresponding to the given key.
Squad_SetStateModelListFloat( SquadID squad, String key, Real value, Boolean allowDuplicates ) RETURNS:  =>Sets a float value in the squad's state model list corresponding to the given key.
Squad_SetStateModelListInt( SquadID squad, String key, Integer value, Boolean allowDuplicates ) RETURNS:  =>Sets an integer value in the squad's state model list corresponding to the given key.
Squad_SetStateModelListPlayerTarget( SquadID squad, String key, PlayerID value, Boolean allowDuplicates ) RETURNS:  =>Sets a Player TargetHandle value in the squad's state model list corresponding to the given key.
Squad_SetStateModelListSquadTarget( SquadID squad, String key, SquadID value, Boolean allowDuplicates ) RETURNS:  =>Sets a Squad TargetHandle value in the squad's state model list corresponding to the given key.
Squad_SetStateModelListVector3f( SquadID squad, String key, Position value, Boolean allowDuplicates ) RETURNS:  =>Sets a Vector3f value in the squad's state model list corresponding to the given key.
Squad_SetStateModelPlayerTarget( SquadID squad, String key, PlayerID value ) RETURNS:  =>Sets a Player TargetHandle value in the squad's state model corresponding to the given key.
Squad_SetStateModelSquadTarget( SquadID squad, String key, SquadID value ) RETURNS:  =>Sets a Squad TargetHandle value in the squad's state model corresponding to the given key.
Squad_SetStateModelVector3f( SquadID squad, String key, Position value ) RETURNS:  =>Sets a Vector3f value in the squad's state model corresponding to the given key.
Squad_SetSuppression( SquadID squad, Real percentage ) RETURNS:  =>Set current squad suppression level. Suppression value range from 0 to 1
Squad_SetVeterancyDisplayVisibility( SquadID squad, Boolean visible ) RETURNS:  =>Turn on/off display of the unit portrait veterancy stars
Squad_SetWorldOwned( SquadID squad ) RETURNS:  =>Makes a squad neutral
Squad_Spawn( SquadID squad, Position pos, String spawnType ) RETURNS:  =>Spawn the entire squad at a give  n position
Squad_SpawnToward( SquadID squad, Position pos, Position toward, String spawnType ) RETURNS:  =>Spawn the entire squad at a given position
Squad_Split( SquadID squad, Integer int ) RETURNS:  =>Split the squad into 2. The new squad size is specified by the number passed in
Squad_StopAbility( SquadID squad, ScarAbilityPBG ability, Boolean bIsEarlyExit ) RETURNS:  =>Abruptly stops an active ability
Squad_SuggestPosture( SquadID squad, Integer posture, Real duration ) RETURNS:  =>Suggests a posture to a squad, lasting the passed duration
Squad_TryFindClosestFreePosition( SquadID squad, Position targetPosition ) RETURNS:  =>Returns the closest free position to the target position for the squad
SquadGroup_CountSpawnedAndStatsInitialized( SGroupID sgroup, PlayerID player ) RETURNS:  =>iterates through an sgroup, returns count with AIStatsSquad
StateTree_QueueGlobalStateTreeEntity( Boolean keepAlive, String openingBranchName, EntityID entity ) RETURNS:  =>Run a global state tree on an entity
StateTree_QueueGlobalStateTreePlayer( Boolean keepAlive, String openingBranchName, PlayerID player ) RETURNS:  =>Run a global state tree on a player
StateTree_QueueGlobalStateTreeSquad( Boolean keepAlive, String openingBranchName, SquadID squad ) RETURNS:  =>Run a global state tree on a squad
statgraph_save( Boolean begin ) RETURNS:  =>Save the statgraph output to a file
Subtitle_EndAllSpeech(  ) RETURNS:  =>Prematurely finish all queued speech
Subtitle_EndCurrentSpeech(  ) RETURNS:  =>Prematurely finish currently playing speech and advance the next one in queue
Subtitle_PlayNarrativeEvent( String str ) RETURNS:  =>Plays a narrative event as a series of subtitled speech transitions when given the event's reflect ID.
Subtitle_PlayNarrativeLine( String str ) RETURNS:  =>Plays a global speech with subtitle and actor icon specified in the narrative line with given ID.
Subtitle_PlaySpeechForSquadFromLocString( ScarBriefingActorPBG briefingActorPBG, String loc, Boolean disableIconSubtitle, String audioCtrlEvent, SquadID squad, Boolean is3D ) RETURNS:  =>Plays a global speech with subtitle and actor icon in the overlay with speech bubbles on squad decorators.
Subtitle_PlaySpeechInternal( ScarBriefingActorPBG briefingActorPBG, String loc, Boolean disableIconSubtitle, String audioCtrlEvent, SquadID squad, Boolean is3D ) RETURNS:  =>Plays a global speech with subtitle and actor icon in the overlay
Subtitle_UnstickCurrentSpeech(  ) RETURNS:  =>Removes "sticky" state from currently playing speech (if any)
switchplayer( lua_State* state ) RETURNS:  =>Change the local player.
SynchronizedCommand_PlayerAbility( PlayerID player, PlayerID dest, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq ) RETURNS:  =>Send a player ability command (PCMD_Ability) to a player.
SynchronizedCommand_PlayerPosAbility( PlayerID player, PlayerID dest, Position pos, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq ) RETURNS:  =>Send a positional ability command (PCMD_Ability) to a player
SynchronizedCommand_PlayerPosDirAbility( PlayerID player, PlayerID dest, Position pos, Position dir, ScarAbilityPBG abilityPBG, Boolean skipCostAndPrereq ) RETURNS:  =>Send a positional/directional ability command (PCMD_Ability) to a player
Taskbar_IsVisible(  ) RETURNS:  =>Returns true if the taskbar is visible. (not deterministic)
Taskbar_SetVisibility( Boolean visible ) RETURNS:  =>Sets taskbar visibility.
Team_GetRelationship( Integer team1, Integer team2 ) RETURNS:  =>Returns the relationship between 2 teams.
Terrain_CreateSplat( String _name, Real xpos, Real zpos, Real scale ) RETURNS:  =>Create a splat on the terrain
Terrain_DrawGrid( Integer increment ) RETURNS:  =>Draw a grid on the terrain with tunable increment
Terrain_DrawGridLines( Integer spacing ) RETURNS:  =>Draw lines on a grid on the terrain with tunable spacing
Terrain_DrawMaterialMap( Boolean onoff ) RETURNS:  =>Draw terrain material map cells
Terrain_GetCoverType_AsNumber( Position pos ) RETURNS:  =>Takes a ScarPosition and returns a number representing the cover type at this position
Terrain_GetCoverType_AsString( Position pos ) RETURNS:  =>Takes a ScarPosition and returns a string representing the cover type at this position
Terrain_LoadHeightMap(  ) RETURNS:  =>Load the saved terrain height map. This will restore the state of the terrain height map to
Terrain_SaveHeightMap(  ) RETURNS:  =>Save the current terrain height map. It can be restored to that state by using Terrain_LoadHeightMap.
TerrainHighlight_Hide(  ) RETURNS:  =>Hide metadata layer overlay on terrain
TerrainHighlight_Show( String metadataLayerName, Real opacity ) RETURNS:  =>Display metadata layer on terrain. Replaces previously displayed terrain highlight
Territory_ContainsSectorID( SectorID sectorID ) RETURNS:  =>Returns true if the Territory contains the given SectorID.
Territory_FindClosestSectorToPoint( Position pos3D ) RETURNS:  =>Returns the SectorID of the closest Sector Generator point to the given ScarPosition.
Territory_GetAdjacentSectors( SectorID sectorID ) RETURNS:  =>Returns a table of SectorIDs that are adjacent to the given SectorID.
Territory_GetPrimaryEntityInSector( SectorID sectorID ) RETURNS:  =>Returns the primary entity in the given sector, if one exists, and nil otherwise.
Territory_GetSectorContainingPoint( Position pos3D ) RETURNS:  =>Returns the sector containing the given ScarPosition.
Territory_GetSectorCreatorEntity( SectorID sectorID ) RETURNS:  =>Get the creator entity of the sector by sectorID
Territory_GetSectorGeneratorPointOnTerrain( SectorID sectorID ) RETURNS:  =>Returns the generator point of the given sector, snapped to the surface of the terrain.
Territory_GetSectorOwnerID( SectorID sectorID ) RETURNS:  =>Get the ID of the owner of the sector
Territory_IsHexagonTerritory(  ) RETURNS:  =>Returns true if the territory is a HexagonTerritory.
TimerAdd( String command, Real freqInSec ) RETURNS:  =>Add a timer to be triggered every 'freqInSec'. the timer will then run the passed-in command
TimerAddFrame( String command ) RETURNS:  =>Add a timer to be triggered every frame the timer will then run the passed-in command
TimerAddOnce( String command, Real timeInSec ) RETURNS:  =>Add a timer to be triggered once after 'freqInSec' has elapsed. the timer will then run the passed-in command
TimerDel( String command ) RETURNS:  =>Remove specified timer
Toggle_Scanning_Info(  ) RETURNS:  =>Toggles the scanning info from the ScanForTarget track for the debug entity
TogglePhysicsDebug( Boolean enable ) RETURNS:  =>Toggle physics debug drawing
TogglePhysicsRaycastAsCapsuleDebug( Boolean enable ) RETURNS:  =>Toggle physics debug drawing
UI_AddChild( String elementName, String typeName, String childName, StackVarTable propertyTable ) RETURNS:  =>Add a new child named childName and of type typeName to elementName.
UI_AddCommandBinding( String groupName, String bindingName, String callbackName ) RETURNS:  =>Adds a command binding for groupName.bindingName to global function callbackName.
UI_AddEventHandler( String elementName, String eventName, String callbackName ) RETURNS:  =>Adds the event handler on elementName for event eventName to global function callbackName(elementName, eventName).
UI_AddText( String elementName, String text ) RETURNS:  =>Add text to elementName.
UI_AllTerritoryHide(  ) RETURNS:  =>Toggle off all territory lines. Each call to UI_AllTerritoryHide must be matched by a call to UI_AllTerritoryShow
UI_AllTerritoryShow(  ) RETURNS:  =>Toggle on all territory lines. Each call to UI_AllTerritoryShow must be matched by a call to UI_AllTerritoryHide
UI_AutosaveMessageHide(  ) RETURNS:  =>DEPRECATED! Removes a message added by UI_AutosaveMessageShow.
UI_AutosaveMessageShow(  ) RETURNS:  =>DEPRECATED! Shows a message indicating that the game is autosaving.
UI_CapturePointLinesHide(  ) RETURNS:  =>Toggle off capture-point boundary lines. Each call to UI_CapturePointLinesHide must be matched by a call to UI_CapturePointLinesShow
UI_CapturePointLinesShow(  ) RETURNS:  =>Toggle on capture-point boundary lines. Each call to UI_CapturePointLinesShow must be matched by a call to UI_CapturePointLinesHide
UI_Clear( String elementName ) RETURNS:  =>Clear the contents of elementName.
UI_ClearEventCueFromID( Integer id ) RETURNS:  =>Clears an event cue with a specific ID. The ID is obtained as a return value from either UI_CreateEventCueClickable or UI_CreateEventCueClickableByType.
UI_ClearEventCues(  ) RETURNS:  =>Clears all active event cues
UI_ClearModalAbilityPhaseCallback(  ) RETURNS:  =>Clears the ability phase callback.
UI_ClearModalConstructionPhaseCallback(  ) RETURNS:  =>Clears the construction phase callback.
UI_ClearModalHoverCallback(  ) RETURNS:  =>Clears the construction phase callback.
UI_ClearSkipNISCallback(  ) RETURNS:  =>Clears the try-to-skip-NIS callback
UI_CommandCardSetColumns( Integer columns ) RETURNS:  =>Set the numner of columns in the command card.
UI_CommandCardSetRows( Integer rows ) RETURNS:  =>Set the numner of rows in the command card.
UI_CoverPreviewHide(  ) RETURNS:  =>Toggle off cover preview. Each call to UI_CoverPreviewHide must be matched by a call to UI_CoverPreviewShow
UI_CoverPreviewShow(  ) RETURNS:  =>Toggle on cover preview. Each call to UI_CoverPreviewShow must be matched by a call to UI_CoverPreviewHide
UI_CreateCustomEventCueFrom( sender player. Can be null. Used for retrieving player information. E.g. team color., event type id, visible duration of the event cue., enable repeat filtering if > 0. Make the event cue alive but not visible beyond its lifetime., when repeatTime > 0) how many times a event cue with the same customEventType can be repeated during repeatTime, when repeatTime > 0) filter out a event cue if it's within the range of a existing one with the same customEventType, ui data template of the event cue., event cue visibility flags. ECV_None: not visible ECV_Queue: visible in the queue ECV_Title: visible as title ECV_Queue | ECV_Title : both, event cue visibility flags., Control event cue visibility in action ECAV_Global ECAV_ExecuterIsOwnOrAlly ECAV_ExecuterIsEnemy ECAV_CanSeeExecutor ECAV_CanSeeTarget ECAV_CanEnemySeeExecutor ECAV_TargetIsOwn ECAV_TargetIsAlly ECAV_OwnsTargetAndExecuterIsEnemy ECAV_AlliedToTargetAndExecuterIsEnemy ECAV_ExecuterIsOwn ECAV_ExecuterIsAlly ECAV_CanSeeTargetAndExecutorIsOwnOrAlly ECAV_CanSeeTargetAndExecutorIsOwn ) RETURNS:  =>Create a event cue from a sender.
UI_CreateEntityKickerMessage( PlayerID player, EntityID entity, String message ) RETURNS:  =>Create a custom kicker message on the entity and display to the player, rgb values are 0-255.
UI_CreateEventCueClickable( Integer customEventType, Real lifetime, Integer repeatCount, Real repeatTime, String title, String description, String dataTemplate, String iconPath, String soundPath, Integer red, Integer green, Integer blue, Integer alpha, EventCueVisibility visibility, LuaFunction function ) RETURNS:  =>Creates a custom event cue. The Lua function callback passed in takes an ID as an argument which can be used to clear the event cue with UI_ClearEventCueFromID.
UI_CreateEventCueClickableByType( UIEventType eventType, Real lifetime, String title, String description, String dataTemplate, String iconPath, String soundPath, Integer red, Integer green, Integer blue, Integer alpha, EventCueVisibility visibility, LuaFunction function ) RETURNS:  =>Creates a named event cue. Returns the ID associated to the created event cue item. This ID can be used to clear the event cue item with UI_ClearEventCueFromID. The Lua function callback passed in takes an ID as an argument which can be used to clear the event cue with UI_ClearEventCueFromID.
UI_CreateMinimapBlipOnMarkerFrom( PlayerID sender, MarkerID marker, Real lifeTime, String dataTemplate ) RETURNS:  =>Create a blips on a ScarMarker from a sender. sender is used for retrieving player information like team color
UI_CreateMinimapBlipOnPosFrom( PlayerID sender, Position position, Real lifeTime, String dataTemplate ) RETURNS:  =>Create a blips on a position from a sender. sender is used for retrieving player information like team color
UI_CreatePositionKickerMessage( PlayerID player, Position position, String message ) RETURNS:  =>Create a custom kicker message on the entity and display to the player, rgb values are 0-255.
UI_CreateSquadKickerMessage( PlayerID player, SquadID squad, String message ) RETURNS:  =>Create a custom kicker message on the entity and display to the player, rgb values are 0-255.
UI_CreateTagForPosition( a scar position. Won't accept a position extremely close (std::numeric_limits<float>::min()) to the existing ones. ) RETURNS:  =>Create a position tag.
UI_CursorHide(  ) RETURNS:  =>Hides the mouse cursor
UI_CursorShow(  ) RETURNS:  =>Shows the mouse cursor if it has been hidden
UI_DestroyTagForPosition( same of or extremely close (std::numeric_limits<float>::min()) to an existing position. If there are multiple candidates, delete the closest. ) RETURNS:  =>Destroy a position tag
UI_EnableEntityDecorator( EntityID entity, Boolean enabled ) RETURNS:  =>Enable or disable entity decorator. The default is decorator enabled.
UI_EnableEntityMinimapIndicator( EntityID entity, Boolean enabled ) RETURNS:  =>Enable or disable entity minimap indicator. The default is enabled.
UI_EnableEntitySelectionVisuals( EntityID entity, Boolean enabled ) RETURNS:  =>Enable or disable entity selection visuals. The default is visuals enabled.
UI_EnableGameEventCueType( GameEventID gameEventType, Boolean enable ) RETURNS:  =>Enables or disables event cues.
UI_EnableResourceTypeKicker( ResourceType resourceType, Boolean enable ) RETURNS:  =>Enables or disables resource kickers.
UI_EnableSquadDecorator( SquadID squad, Boolean enabled ) RETURNS:  =>Enable or disable the squad decorator. The default is decorator enabled.
UI_EnableSquadMinimapIndicator( SquadID squad, Boolean enabled ) RETURNS:  =>Enable or disable squad minimap indicator. The default is enabled.
UI_EnableUIEventCueType( UIEventType uiEventType, Boolean enable ) RETURNS:  =>Enables or disables event cues.
UI_FadeOutEventCueFromID( Integer id ) RETURNS:  =>Triggers an event cue to start its fadeout animation. The animation is determined in XAML.
UI_FlashAbilityButton( ScarAbilityPBG ability, Boolean stopOnClick ) RETURNS:  =>Flash an ability command button.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashConstructionButton( ScarEntityPBG ebp, Boolean stopOnClick ) RETURNS:  =>Flash a construction item command button.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashEntity( EntityID entity, String actionOnName ) RETURNS:  =>Flashes the entity using attributes from [tuning][ui]
UI_FlashEntityCommandButton( EntityCommandType command, Boolean stopOnClick ) RETURNS:  =>Flash an entity order command button.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashEventCue( Integer eventCueID, Boolean stopOnClick ) RETURNS:  =>Flash an event cue item.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashMenu( String menuName, Boolean stopOnClick ) RETURNS:  =>Flash a menu command button.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashObjectiveCounter( Integer objectiveID ) RETURNS:  =>Flash an objective counter.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashObjectiveIcon( Integer objectiveID, Boolean stopOnClick ) RETURNS:  =>Flash an objective.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashProductionBuildingButton( String type, Boolean stopOnClick ) RETURNS:  =>Flash a production building button.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashProductionButton( ProductionItemType type, PropertyBagGroup pbg, Boolean stopOnClick ) RETURNS:  =>Flash a production item command button.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashSquadCommandButton( SquadCommandType command, Boolean stopOnClick ) RETURNS:  =>Flash a squad order command button.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashUSSEntityButton( EntityID entity, Boolean stopOnClick ) RETURNS:  =>Flash a button on the USS for this entity.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_FlashUSSSquadButton( SquadID squad, Boolean stopOnClick ) RETURNS:  =>Flash a button on the USS for this squad.  Pass the return value to UI_StopFlashing to stop flashing the button.
UI_GetAbilityIconName( ScarAbilityPBG abilityBag ) RETURNS:  =>Returns the icon name for a given ability
UI_GetDecoratorsEnabled(  ) RETURNS:  =>Returns whether all decorators are enabled or not
UI_GetDecoratorVisibilityEntity( Entity entity ) RETURNS:  =>Gets an enum value indicating the visibility of decorators for an entity.
UI_GetDecoratorVisibilitySquad( Squad squad ) RETURNS:  =>Gets an enum value indicating the visibility of decorators for a squad.
UI_HighlightSquad( SquadID squad, Real duration ) RETURNS:  =>Turn on squad highlight UI feature for the specified duration.
UI_IsLayerContentLoaded( FrontEnd_Layer layer, String contentPath ) RETURNS:  =>Check if content is loaded for a specific layer
UI_IsReplay(  ) RETURNS:  =>Is a replay match currently.
UI_LetterboxFade( Real r, Real g, Real b, Real a, Real duration, Real aspectRatio, Boolean persistent ) RETURNS:  =>Fades the letterbox to a given RGBA colour over a number of seconds by a given aspect ratio.
UI_MessageBoxHide( DialogResult dialogResult ) RETURNS:  =>If the message box is activated, close it.  The callback will receive the button parameter given.
UI_MessageBoxReset(  ) RETURNS:  =>Reset message box data set by previous calls (to display a new message box).
UI_MessageBoxSetButton( DialogResult dialogResult, String text, String tooltip, String icon, Boolean isEnabled ) RETURNS:  =>Set the text/tooltip/enabled state of a button on the dialog.
UI_MessageBoxSetText( String title, String message ) RETURNS:  =>Set the title and message body of the dialog.
UI_ModalVisual_CreateReticule( ScarReticulePBG reticulePbg, Real radius ) RETURNS:  =>Create a reticule
UI_ModalVisual_Destroy( Integer id ) RETURNS:  =>Destroy a modal visual
UI_NewHUDFeature( HUDFeatureType newHUDFeature, String featureText, String featureIcon, Real duration ) RETURNS:  =>Brings up a message and arrow pointing to a HUD feature.
UI_OutOfBoundsLinesHide(  ) RETURNS:  =>Toggle off terrain out of bounds lines. Each call to UI_OutOfBoundsLinesHide must be matched by a call to UI_OutOfBoundsLinesShow
UI_OutOfBoundsLinesShow(  ) RETURNS:  =>Toggle on terrain out of bounds lines. Each call to UI_OutOfBoundsLinesShow must be matched by a call to UI_OutOfBoundsLinesShowHide
UI_Remove( String elementName ) RETURNS:  =>Remove elementName from its parent.
UI_RemoveCommandBinding( String groupName, String bindingName ) RETURNS:  =>Removes a command binding for groupName.bindingName.
UI_RemoveEventHandler( String elementName, String eventName, String callbackName ) RETURNS:  =>Removes the event handler on elementName for event eventName to global function callbackName(elementName, eventName).
UI_RestrictBuildingPlacement( MarkerID marker ) RETURNS:  =>Only allow buildings to be placed inside a marker.
UI_ScreenFade( Real r, Real g, Real b, Real a, Real duration, Boolean persistent ) RETURNS:  =>Fades the screen to a given RGBA colour over a number of seconds. mouse input is blocked during the fade, and you can control whether the input keeps being blocked after the fade has ended (be careful!)
UI_SectorsHide(  ) RETURNS:  =>Toggle off sector lines. Each call to UI_SectorsHide must be matched by a call to UI_SectorsShow
UI_SectorsShow(  ) RETURNS:  =>Toggle on sector lines. Each call to UI_SectorsShow must be matched by a call to UI_SectorsHide
UI_SetAlliedBandBoxSelection( Boolean allow ) RETURNS:  =>Sets the game to allow allied squads to be selected at the same time as your own squads
UI_SetAllowLoadAndSave( Boolean allowLoadAndSave ) RETURNS:  =>Enables or disable load and save features at the pause menu
UI_SetControlGroupSelectedCallback( in the format of function(controlGroupIndex) ) RETURNS:  =>Sets a callback firing when user select a control group either by hotkey or by control group button
UI_SetCPMeterVisibility( Boolean visible ) RETURNS:  =>Sets the visibility of the Command Point meter.
UI_SetDataContext( String elementName, StackVarTable table ) RETURNS:  =>Converts table to a data context for bindings of elementName.
UI_SetDecoratorsEnabled( Boolean enabled ) RETURNS:  =>Enables or disables all decorators
UI_SetEnablePauseMenu( Boolean isEnable ) RETURNS:  =>Enable/Disable pause menu showing up when the pause menu hot key is pressed.
UI_SetEntityDataContext( EntityID entity, StackVarTable table ) RETURNS:  =>Converts table to a data context exposed through entity models.
UI_SetEntityDecorator( EntityID entity, String decorator ) RETURNS:  =>Explicitly set the decorator a squad should use.
UI_SetEntityGhostSpottedStaggered( EntityID entity ) RETURNS:  =>Sets the game to show the entity ghost in a spotted state
UI_SetForceShowSubtitles( Boolean forceShowSubtitles ) RETURNS:  =>Sets the game to force show subtitles even if the player has them turned off.
UI_SetMinimapTrueNorth( Real trueNorthAngleDeg ) RETURNS:  =>Sets the angle of True North for the minimap in degrees
UI_SetModalAbilityPhaseCallback( LuaFunction function ) RETURNS:  =>Sets a function to be called when the player clicks an ability and gets a targeting UI. Your function will have 2 arguments: [Blueprint] ability blueprint, [integer] phase: TP_Position, TP_Facing (only if ability requires facing), TP_Issued (not deterministic) or TP_Cancelled (for all issuables)
UI_SetModalConstructionPhaseCallback( LuaFunction function ) RETURNS:  =>Sets a function to be called when the player clicks a construction item and gets a targeting UI. Your function will have 2 arguments: [Blueprint] ability blueprint, [integer] phase: TP_Position, TP_Facing (only if ability requires facing), TP_Issued (not strict) or TP_Cancelled (for all issuables)
UI_SetModalHoverCallback( LuaFunction function ) RETURNS:  =>Sets a function to be called when the player clicks a construction item and gets a targeting UI. Your function will have 2 arguments: [Blueprint] ability blueprint, [integer] phase: TP_Position, TP_Facing (only if ability requires facing), TP_Issued (not strict) or TP_Cancelled (for all issuables)
UI_SetPlayerDataContext( PlayerID player, StackVarTable table ) RETURNS:  =>Converts table to a data context exposed through player models.
UI_SetPropertyValue( String elementName, String propertyName, StackVar stackVar ) RETURNS:  =>Sets the property propertyName on elementName to value stackVar.
UI_SetPropertyValues( String elementName, StackVarTable propertyTable ) RETURNS:  =>Sets the properties on elementName to the key/value pairs in propertyTable.
UI_SetSkipNISCallback( LuaFunction function ) RETURNS:  =>Sets a callback firing when user try to skip the NIS
UI_SetSquadDataContext( SquadID squad, StackVarTable table ) RETURNS:  =>Converts table to a data context exposed through squad models.
UI_SetSquadDecorator( SquadID squad, String decorator ) RETURNS:  =>Explicitly set the decorator a squad should use.
UI_SetSquadDecoratorAlwaysVisible( SquadID squad, Boolean alwaysVisible ) RETURNS:  =>Turn on of off the squad decorator being always visible. The default is decorator not always visible.
UI_SystemMessageHide( String message ) RETURNS:  =>Removes a message added by Game_ShowSystemMessage.
UI_SystemMessageShow( String message ) RETURNS:  =>Shows a system message in the area where Game Paused text appears.
UI_ToggleDecorators(  ) RETURNS:  =>Toggles all decorators on or off.
UI_UnrestrictBuildingPlacement(  ) RETURNS:  =>Removes the restriction on building placement.
UIWarning_Show( String text ) RETURNS:  =>Displays a brief UI warning in the critical alert message area.
Vaulting_DrawDebug(  ) RETURNS:  =>Toggles on or off vaulting debug drawing
Vector_Length( Position pos ) RETURNS:  =>Calculates the length of the provided vector
Vector_Lerp( Real factor, Position pos1, Position pos2 ) RETURNS:  =>Linearly interpolates between the two provided vectors based on the provided factor
Vector_Normalize( Position pos ) RETURNS:  =>Returns the normalized version of the provided vector
Weapon_AllWeaponAttackGround(  ) RETURNS:  =>Toggle enabling all weapon gound attack
Weapon_AnimInfo(  ) RETURNS:  =>Toggle weapon animation information
Weapon_AttackRadii(  ) RETURNS:  =>Toggle weapon attack radii around the entities
Weapon_Firing(  ) RETURNS:  =>Toggle weapon firing lines
Weapon_HardPointInfo(  ) RETURNS:  =>Toggle weapon hard point information
Weapon_Info(  ) RETURNS:  =>Toggle weapon state and calculation information
Weapon_PrintBestTarget(  ) RETURNS:  =>Toggle weapon best target result
Weapon_PriorityInfo(  ) RETURNS:  =>Toggle weapon priority information (must TAG entity you want info about)
Weapon_ProjectileDetonateTimer(  ) RETURNS:  =>Toggle weapon projectile denotation timer
Weapon_ProjectileInfo(  ) RETURNS:  =>Toggle weapon projectile information
Weapon_ScatterInfo(  ) RETURNS:  =>Toggle weapon scatter target information
Weapon_Tracking(  ) RETURNS:  =>Toggle weapon tracking lines and maximum angles
WinWarning_PublishLoseReminder( PlayerID player, Integer warningLevel ) RETURNS:  =>Triggers a UI event cue and an audio cue that the player is about to lose the game.
WinWarning_ShowLoseWarning( String text, Real fadeIn, Real duration, Real fadeOut ) RETURNS:  =>Call UI_TitleDestroy to remove.
World_CalculateEntitiesAveragePositionInArea( PlayerID player, Position pos, Real radius, OwnerType ownerType, Boolean onlyEntitiesInSquads ) RETURNS:  =>Returns the average positions of the entities in the area
World_ChangeZoneInteractivity( Integer targetInteractivity, Integer adjustedInteractivity ) RETURNS:  =>Changes target interactivity zones to adjusted interactivity (255 max), probably only safe to use post NIS
World_DestroyWallsNearMarker( MarkerID marker ) RETURNS:  =>Destroys walls (entities with a wall_ext) near a marker
World_DistanceEGroupToPoint( EGroupID egroup, Position p1, Boolean closest ) RETURNS:  =>Get the distance between a squad group and a point.
World_DistancePointToPoint( Position p1, Position p2 ) RETURNS:  =>Get the distance between two points.
World_DistanceSGroupToPoint( SGroupID sgroup, Position p1, Boolean closest ) RETURNS:  =>Get the distance between a squad group and a point.
World_DistanceSquaredPointToPoint( Position p1, Position p2 ) RETURNS:  =>Get the distance squared between two points.
World_EnableReplacementObjectForEmptyPlayers( Boolean enable ) RETURNS:  =>Determines whether empty players get converted to null resource points.
World_EnableSharedLineOfSight( PlayerID p0, PlayerID p1, Boolean enableSharedVision ) RETURNS:  =>Enables or disables shared line of sight between these two players
World_EndSP( Boolean localPlayerWon, WinReason winReason ) RETURNS:  =>Wins/loses a single team mission for the local teams, with given win reason
World_GetAllNeutralEntities( EGroupID egroup ) RETURNS:  =>Clears the egroup, then finds and adds all neutral entities to it
World_GetBlueprintEntities( ScarEntityPBG pbg, EGroupID outEntities ) RETURNS:  =>Returns all entities with this blueprint - warning this function iterates over all entities so it is slow
World_GetCoverPoints( EGroupID group ) RETURNS:  =>Appends all cover points to an egroup.
World_GetEntitiesNearMarker( PlayerID player, EGroupID egroup, MarkerID marker, OwnerType ownerType ) RETURNS:  =>Clears the egroup, then finds and adds entities near the marker to the egroup
World_GetEntitiesNearPoint( PlayerID player, EGroupID egroup, Position pos, Real radius, OwnerType ownerType ) RETURNS:  =>Clears the egroup, then finds and adds entities near the point to the egroup
World_GetEntitiesWithinTerritorySector( PlayerID player, EGroupID egroup, Integer inSectorID, OwnerType ownerType ) RETURNS:  =>Clears the egroup, then finds and adds entities within the territory sector to the egroup
World_GetGameTicks(  ) RETURNS:  =>Return the total number of game (simulation) ticks elapsed.
World_GetGameTime(  ) RETURNS:  =>Return the total game time in seconds.
World_GetHeightAt( Real x, Real y ) RETURNS:  =>returns the height of ground at 2D pos x,y
World_GetInteractionStageAtPoint( Position position ) RETURNS:  =>Returns the interaction stage of the cell in the provided position
World_GetLength(  ) RETURNS:  =>Returns the total playable length of the game world (z coordinate)
World_GetMetadataBiomePBGName( String layerName, Real x, Real y ) RETURNS:  =>Get the Biome PBG's name of the specified terrain metadata layer and the specified coordinates.
World_GetMetadataLayerBoolean( String layerName, Real x, Real y ) RETURNS:  =>Get the boolean value of the specified terrain metadata layer and the specified coordinates.
World_GetMetadataLayerInteger( String layerName, Real x, Real y ) RETURNS:  =>Get the integer value of the specified terrain metadata layer and the specified coordinates.
World_GetMetadataLayerNumber( String layerName, Real x, Real y ) RETURNS:  =>Get the numeric value of the specified terrain metadata layer and the specified coordinates.
World_GetMetadataLayerPBG( String layerName, Real x, Real y ) RETURNS:  =>Get the PBG of the specified terrain metadata layer and the specified coordinates.
World_GetMetadataLayerString( String layerName, Real x, Real y ) RETURNS:  =>Get the PBG of the specified terrain metadata layer and the specified coordinates.
World_GetNearestInteractablePoint( Position position ) RETURNS:  =>returns the nearest intractable position to the supplied position
World_GetNeutralEntitiesNearMarker( EGroupID egroup, MarkerID marker ) RETURNS:  =>Find and add neutral entities near the marker to the egroup
World_GetNeutralEntitiesNearPoint( EGroupID egroup, Position pos, Real radius ) RETURNS:  =>Find and add neutral entities near the point to the egroup
World_GetNeutralEntitiesWithinTerritorySector( EGroupID egroup, Integer sectorID ) RETURNS:  =>Find and add neutral entities within the territory sector to the egroup
World_GetNumEntitiesNearPoint( ScarEntityPBG ebp, Position pos, Real radius ) RETURNS:  =>Return the number of entities of the same ebp in the sphere volume
World_GetNumStrategicPoints(  ) RETURNS:  =>Returns the number of strategic points on this map (does not count strat. objectives)
World_GetOffsetPosition( Position position, Position heading, Integer offset, Real distance ) RETURNS:  =>Returns a position that is offset a certain distance from the position/heading passed in. see ScarUtil.scar for explanation of 'offset' parameter.
World_GetOffsetPositionRelativeToFacingTarget( Position position, Position facingTarget, Real offset ) RETURNS:  =>Offsets the input position relative to the facing target
World_GetOffsetVectorPosition( Position position, Position heading, Position offset ) RETURNS:  =>Returns a position that is offset from the input position by the offset vector rotated by the direction supplied
World_GetPlayerAt( Integer index ) RETURNS:  =>Returns the player at a given index, numbers start at one
World_GetPlayerCount(  ) RETURNS:  =>Return the total number of players in the world
World_GetPlayerIndex( PlayerID player ) RETURNS:  =>Returns the player index given the Player*
World_GetPossibleSquadsBlueprint( ScarRacePBG racePBG, Integer index ) RETURNS:  =>Returns the blueprint of a chosen squad for a race
World_GetPossibleSquadsCount( ScarRacePBG racePBG ) RETURNS:  =>Returns the number of types of squads a race can build
World_GetRaceBlueprint( String racename ) RETURNS:  =>Returns the race index of a race, given its name (from the ME).
World_GetRand( Integer min, Integer max ) RETURNS:  =>Returns a random integer with range [min, max]
World_GetScenarioMaxPlayers(  ) RETURNS:  =>Returns maximum number of players in this match
World_GetSpawnablePosition( Position around, EntityID entity ) RETURNS:  =>Given any position in the world, this function will return position safe for spawning a given entity
World_GetSquadsNearMarker( PlayerID player, SGroupID sgroup, MarkerID marker, OwnerType ownerType ) RETURNS:  =>Clears the sgroup, then finds and adds squads near the marker to the sgroup
World_GetSquadsNearPoint( PlayerID player, SGroupID sgroup, Position pos, Real radius, OwnerType ownerType ) RETURNS:  =>Clears the sgroup, then finds and adds squads near the point to the sgroup
World_GetSquadsWithinTerritorySector( PlayerID player, SGroupID sgroup, Integer inSectorID, OwnerType ownerType ) RETURNS:  =>Clears the sgroup, then finds and adds squads within territory sector identified by sector ID
World_GetStrategyPoints( EGroupID group, Boolean bIncludeVP ) RETURNS:  =>Appends all the strategic resource points to an egroup.
World_GetTeamTerritoryGaps( Integer sectorID1, Integer sectorID2, StackVarTable results ) RETURNS:  =>Returns one or more sector IDs that would connect two unconnected pieces of territory. return value is through a table (since there can be more than one way to connect territory) - each entry in this table is a table of sector IDs.
World_GetTerrainCellType( Real x, Real y ) RETURNS:  =>returns the cell type of the cell in the specified coordinates. 0 = Sky, 1 = Land, 2 = Water.
World_GetTerritorySectorID( Position pos ) RETURNS:  =>Return the sector ID from the position
World_GetTerritorySectorPosition( Integer inSectorID ) RETURNS:  =>Returns the position of a sectors generator point.
World_GetWidth(  ) RETURNS:  =>Returns the total playable width of the game world (x coordinate)
World_IsCurrentInteractionStageActive( Integer stage ) RETURNS:  =>Returns whether the interaction stage is currently active
World_IsGameOver(  ) RETURNS:  =>Is the game over?
World_IsInSupply( PlayerID player, Position pos ) RETURNS:  =>Returns true if position is in-supply for the given player
World_IsMultiplayerGame(  ) RETURNS:  =>Returns whether or not the game type of this world is multiplayer
World_IsPointInPlayerTerritory( PlayerID player, Position position ) RETURNS:  =>Returns true if position if part of the entity territory
World_IsPosOnWalkableWall( Position p ) RETURNS:  =>Returns if a position is on walkable wall
World_IsReplay(  ) RETURNS:  =>Returns TRUE if the game is currently in a replay state.
World_IsTerritorySectorOwnedByPlayer( PlayerID player, Integer inSectorID ) RETURNS:  =>Find if player has ownership to this territory sector.
World_KillPlayer( PlayerID player, KillPlayerReason reason ) RETURNS:  =>Kills the player with a reason.
World_LeaveGameMatch(  ) RETURNS:  =>Quit the game without declaring it over and return to frontend.
World_OwnsEntity( EntityID entity ) RETURNS:  =>Returns true if the squad is owned by the world
World_OwnsSquad( SquadID squad ) RETURNS:  =>Returns true if the squad is owned by the world
World_PointPointProx( Position p1, Position p2, Real prox ) RETURNS:  =>Returns true if two world positions are in proximity to each other
World_Pos( Real x, Real y, Real z ) RETURNS:  =>Creates a new Position object.
World_PosInBounds( Position pos ) RETURNS:  =>Returns if given position is in playable area.
World_Reset(  ) RETURNS:  =>DO NOT CALL UNLESS YOU DO AUTOMATED TESTING
World_SetAllInteractiveStagesVisibility( Boolean visibilityStatus ) RETURNS:  =>Unlocks all the interaction stages
World_SetDesignerSupply( Position point, Boolean bSupply ) RETURNS:  =>Sets a particular sector in the world as a supply provider (or not)
World_SetInteractionStage( Integer stage ) RETURNS:  =>Set current interaction stage to value supplied, must be >= 0
World_SetPlayerLose( PlayerID player ) RETURNS:  =>Sets the player to a lose state, with a reason for losing, and kills the player
World_SetPlayerWin( PlayerID player ) RETURNS:  =>Sets the player to a win state.
World_SetSharedLineOfSightEnabledAndMergeExploredMaps( PlayerID p0, PlayerID p1, Boolean enableSharedVision ) RETURNS:  =>Enables or disables shared line of sight between these two players, and merges explored maps when needed
World_SetTeamWin( Integer winningTeam, WinReason winReason ) RETURNS:  =>Sets every player on a team to a win state, with a reason for winning. Also sets all other players to a lose state, and kills them (if they're not already dead)
World_SpawnDemolitionCharge( PlayerID player, Position pos ) RETURNS:  =>spawn a demolitions charge at a position, 'player' is the one that owns the demolitions and can detonate them.
World_TeamTerritoryPointsConnected( Integer team_index, Position p1, Position p2 ) RETURNS:  =>Returns true if the two points are in the same territory region, and owned by the specified territory team, Returns false otherwise.

# ENUMS
