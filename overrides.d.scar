---@meta declaration-overrides

---@alias ALL true
---@alias ANY false

---@param filepath string
---Built-in method of importing SCAR files relative to the DATA:\scar folder (across all .SGAs)
function import(filepath) end

--- Create a table that will be interpreted as a data context for UI properties.
---@param table table
--- @return unknown
function UI_CreateDataContext(table) end

--- Create a table that will be interpreted as a command for UI properties.
--- @param cmd string
--- @return unknown
function UI_CreateCommand(cmd) end

---@alias ResourceType number
---@alias PBGType number
---@alias OwnerType number

---@class LocString : table

---@param team TeamID
---@return TeamID
function Team_GetEnemyTeam(team) end

--? @shortdesc Converts a colour table to an ARGB hex string (e.g. {a=0, r=255, g=204, b=136} => #00FFCC88).
---@param color table
---@return string
function UI_GetColourAsString(color) end

---@param message  string
function fatal(message) end

--- Use capType CT_Personnel to get max squad cap or CT_VehicleCap to get max vehicle cap.
---@param player Player
---@param capType CapType
---@return number
function Player_GetMaxPopulation(player, capType) end


---@param locId string | number | LocString
---@return string
function Loc_ToAnsi(locId) end

---@class UIInfo
---Icon names are WITHOUT .png extension
---@field helpText LocString
---@field revealDecrypt boolean
---@field screenNameShort LocString
---@field extraTextWorld LocString
---@field tooltipDataTemplate string
---@field iconName string
---@field helpTextWorld LocString
---@field debugText string
---@field briefText LocString
---@field iconAlternateName string
---@field hotkeyName string
---@field extraText LocString
---@field screenName LocString
---@field screenNameWorld LocString
---@field portraitIconName string
---@field symbolIconName string
---@field showInBuildLog boolean
---@field uiCombineType userdata
---@field screenNameAlternate LocString
---@field helpTextAlternate LocString

---@class SquadPBG : userdata

---@param sbp SquadPBG
---@param raceBP ScarRacePBG
---@return UIInfo
function BP_GetSquadUIInfo(sbp, raceBP) end

---@param ebp EntityPBG
---@return UIInfo
function BP_GetEntityUIInfo(ebp) end

---@param ability  Ability
---@return UIInfo
function BP_GetAbilityUIInfo(ability) end

--- Returns a table containing the ui_ext info for given upgrade
--- @param ubp Upgrade
--- @return UIInfo
function BP_GetUpgradeUIInfo(ubp) end

---@param blueprint  string
---@return ScarRacePBG
function World_GetRaceBlueprint(blueprint) end


---@class RaceInfo
---Icon names are WITHOUT .png extension
---@field name LocString
---@field icon string
---@field faction_type number
---@field loadout table
---@field flag_icon string
---@field image string
---@field image_small string
---@field icon_secondary string
---@field path_name string
---@field name_abbreviated LocString

---@param raceBP ScarRacePBG
---@return RaceInfo
function BP_GetRaceInfo(raceBP) end


---@param entity Entity
---@param extension string
---@return boolean
function Entity_ExtensionExist(entity, extension) end


--- Sends a stop command to egroup or sgroup.
--- @param group EGroupID | SGroupID
--- @return unknown
function Cmd_Stop(group) end

---@param techtree_type  string
---@return PBG[]
function BP_GetTechTreeBlueprintsByType(techtree_type) end

---@class TechTreeInfo
---@field activation_upgrade Upgrade
---@field branches TechTreeBranch[]
---@field name LocString

---@class TechTreeBranch
---@field upgrades Upgrade[]

---@param pbg PBG
---@return TechTreeInfo
function BP_GetTechTreeBPInfo(pbg) end

---@param types string[]
---@param all boolean
---@return EntityPBG[]
function BP_GetEntityBlueprintsWithType_Internal(types, all) end

---@param types string[]
---@param all boolean
---@return SquadPBG[]
function BP_GetSquadBlueprintsWithType_Internal(types, all) end

--? @shortdesc Creates a reticule drawn on the ground
--? @extdesc 'target' can be an entity, marker, position, or squad.
--? @args StackVar target, float radius, BP reticuleBP
--? @result reticuleID
---@param target Entity | MarkerID | Position | Squad
---@param radius number
---@param reticuleBP PBG
---@return number
function UI_CreateReticule(target, radius, reticuleBP) end

---@param entity Entity
---@param reticuleBP PBG
---@return number
function UI_CreateReticuleOnEntity(entity, radius, reticuleBP) end

---@param position Position
---@param radius number
---@param reticuleBP PBG
---@return number
function UI_CreateReticuleOnPosition(position, radius, reticuleBP) end

---@param squad Squad
---@param radius number
---@param reticuleBP PBG
---@return number
function UI_CreateReticuleOnSquad(squad, radius, reticuleBP) end

---@param id number
function UI_DestroyReticule(id) end

---@class _UI_CreateTargetTrackingTagDataContext : table
---@field DataTemplate string x:Key of the template, see DATA\ui\resources\tagresources.xaml and DATA\ui\hud\pages\hudpage.xaml
---@param target Entity | Squad | Position
---@param lifetime_seconds number
---@param template _UI_CreateTargetTrackingTagDataContext
function UI_CreateTargetTrackingTag(target, lifetime_seconds, template) end

---@param ebp EntityPBG
---@param pos Position
---@param snapToTerrain boolean
---@return Entity
function Entity_CreateENV(ebp, pos, snapToTerrain) end

---@param ebp EntityPBG
---@param pos Position
---@param towards Position
---@param snapToTerrain boolean
---@return Entity
function Entity_CreateENVFacing(ebp, pos, towards, snapToTerrain) end

---@param ebp EntityPBG
---@param player Player
---@param pos Position
---@param snapToTerrain boolean
---@return Entity
function Entity_Create(ebp, player, pos, snapToTerrain) end

---@param ebp EntityPBG
---@param player Player
---@param pos Position
---@param towards Position
---@param snapToTerrain boolean
---@return Entity
function Entity_CreateFacing(ebp, player, pos, towards, snapToTerrain) end

---@param entity Entity
---@param ebp EntityPBG
function Entity_ConvertBlueprint(entity, ebp) end

--- Returns the position of the entity.  The position is currently a lua table with three entries (x, y, z)
--- @param entity Entity
--- @return Position
function Entity_GetPosition(entity) end

---First index = 0, last index = return value - 1.
---@returns integer
function World_GetNumEntities() end

---@param index integer ZERO based index.
---@return Entity
function World_GetEntity(index) end

-- FormatID can also be string, e.g. "$<modGUID>:<locID>"
--- Returns a formatted localized string.
--- Use this function to format localized text. ie %1PLAYERNAME% is going to win. It accepts up to 9 additional values as parameters.
--- @param FormatID number | string | LocString
--- @vararg string | number | LocString
--- @return LocString
function Loc_FormatText(FormatID, ...) end

--- Create a squad, spawn it and assign it to a player.
--- This will create a squad of size 'loadoutCount' and of unit type 'unit_base' (from squad blueprint)\n Note: loadoutCount will be clipped to loadoutMin and loadoutMax from the squad blueprint. A loudoutCount of zero means create the whole squad as is.
--- @param sbp SquadPBG
--- @param player Player
--- @param loadoutCount number
--- @param pos Position
--- @param toward Position
--- @return Squad
function Squad_CreateAndSpawnToward(sbp, player, loadoutCount, pos, toward) end

--- Creates a hintpoint attached to a MarkerID, EGroup, SGroup or position
--- If range is set to 0, then the hintpoint is rangeless, see the design document for rangeless features. The following types of hintpoint actions are available. HPAT_Objective HPAT_Hint HPAT_Critical HPAT_Movement HPAT_Attack HPAT_FormationSetup HPAT_RallyPoint HPAT_DeepSnow HPAT_CoverGreen HPAT_CoverYellow HPAT_CoverRed HPAT_Detonation HPAT_Vaulting
--- @param where any
--- @param bVisible boolean
--- @param hintText LocString
--- @param height number | nil
--- @param actionType HintPointActionType | number | nil
--- @param iconName string | nil
--- @param priority number | nil
--- @param visibleInFOW boolean | nil
--- @param dataTemplate string | nil
--- @return unknown
function HintPoint_Add(where, bVisible, hintText, height, actionType, iconName, priority, visibleInFOW, dataTemplate) end

--- Modifies a player's incoming resource rate. Possible math types are MUT_Multiplication, MUT_Addition.
--- @param playerId Player
--- @param resourceType ResourceType | number
--- @param scalefactor number
--- @param mathtype ModifierUsageType | number | nil
--- @return unknown
function Modify_PlayerResourceRate(playerId, resourceType, scalefactor, mathtype) end

--- Modifies the recharge time of an ability
--- @param player_entity_squad Player | Entity | Squad
--- @param ability Ability
--- @param scalefactor number
--- @param mathtype ModifierUsageType | number | nil
--- @return unknown
function Modify_AbilityRechargeTime(player_entity_squad, ability, scalefactor, mathtype) end

--- Add a rule to be executed when the event of 'eventType' has happened, regardless of source
--- Event types are: GE_PlayerBeingAttacked
--- @param rule function
--- @param eventtype SimulationEventType | PresentationEventType | number
--- @return unknown
function Rule_AddGlobalEvent(rule, eventtype) end

--- Add a rule to be executed when the event of 'eventType' has happened on the 'player'
--- Event types are: GE_PlayerBeingAttacked, GE_PlayerCommandIssued, GE_AbilityExecuted, GE_UpgradeComplete, GE_ConstructionComplete, GE_BuildItemComplete, GE_PlayerKilled, GE_SpawnActionComplete, GE_AIPlayer_EncounterNotification
--- @param rule function
--- @param player Player
--- @param eventtype SimulationEventType | number
--- @return unknown
function Rule_AddPlayerEvent(rule, player, eventtype) end

--- Return the short name of the group
--- Example name would be "ally_mad_minute_ability"
--- @param pbg PBG | PropertyBagGroup | Ability | Upgrade | EntityPBG | SquadPBG | ScarRacePBG
--- @return string
function BP_GetName(pbg) end

--- Returns true if an ability blueprint exists with the given name.
--- @param pbgShortname string
--- @return boolean
function BP_AbilityExists(pbgShortname) end

--- Returns true if an upgrade blueprint exists with the given name.
--- @param pbgShortname string
--- @return boolean
function BP_UpgradeExists(pbgShortname) end

---@param squad Squad
---@return Entity[]
function Squad_GetAttachedWeapons(squad) end

---@param squad Squad
---@param item Entity
---@param chance number
function Squad_OverrideItemDropChance(squad, item, chance) end


---@param squad Squad
---@param chance number
function Squad_SetTeamWeaponDestroyOnAbandonChance(squad, chance) end

---@param player Player
---@return Position
function Player_GetMapEntryPosition(player) end

--- Returns the entity at the given index.
--- Use EGroup_GetSpawnedEntityAt or EGroup_GetDeSpawnedEntityAt if you want the spawned/despawned items in the group\n Use index 1 to get the first entity in the group.\n It is an error if index > EGroup_GetCount()\n
--- @param group EGroupID
--- @param int number
--- @return Entity
function EGroup_GetEntityAt(group, int) end


--- Returns the squad at a certain position in the group.
--- This is a one-based index (use index 1 to get the first squad in the group.) It is an error if index > SGroup_Count().
--- @param group SGroupID
--- @param int number
--- @return Squad
function SGroup_GetSquadAt(group, int) end

---@class GameModeOptionEnum
---@field enum_items table<string, number>
---@field enum_value number

---@param t table
---@param name string
---@return GameModeOptionEnum | boolean | number
function Options_GetOption(t, name) end

---@param player Player
---@return number
function Player_GetPopCapOverride(player) end

--- Modifies the time taken to build a particular EBP. This only affects the given player.
--- @param playerId Player
--- @param ebp EntityPBG
--- @param scalefactor number
--- @return unknown
function Modify_EntityBuildTime(playerId, ebp, scalefactor) end

---@param squad Squad
---@param extensionName string
---@param unknownBoolean boolean
---@return number
---Returns the extension ID of the extension on a squad.
function Squad_ExtensionID(squad, extensionName, unknownBoolean) end

---@param entity Entity
---@param extensionName string
---@param unknownBoolean boolean
---@return number
---Returns the extension ID of the extension on an entity.
function Entity_ExtensionID(entity, extensionName, unknownBoolean) end

--- Returns true if the squad has the specific extension enabled.
--- @param pSquad Squad
--- @param extID number
--- @return boolean
function Squad_ExtensionEnabled(pSquad, extID) end

--- Returns the modified cost of the given ability including all modifications added by the given player
--- @param pPlayer Player
--- @param ability Ability
--- @return {munition: number, requisition: number,fuel: number,manpower: number,command: number, popcap: number, ultimate:number, action:number}
function Player_GetAbilityBPCost(pPlayer, ability) end

---
function Camera_Pop() end

---@param name string
function Camera_Push(name) end

---
function Camera_Fov(...) end

---@param name string
function Camera_PushKeepState(name) end

--#region pitch

---@return number
function Camera_GetDefaultPitch() end

---@param pitch number
function Camera_SetPitch(pitch) end

---@param pitch number
function Camera_SetPitchRelative(pitch) end

--#endregion

--#region yaw

---@return number
function Camera_GetDefaultYaw() end

---@param yaw number
function Camera_SetYaw(yaw) end

---@param yaw number
function Camera_SetYawRelative(yaw) end

--#endregion

---@return number
function Camera_GetDefaultDistance() end

---@param distance number
function Camera_SetDistance(distance) end

---@param position Position
---@return Position
function Camera_GetEyePositionFromTarget(position) end

---@param x number
---@param y number
---@param z number
---@return Position
function Camera_InverseEuler(x, y, z) end

---@return number
function World_GetNumSquads() end

---@param index number Zero-based index
---@return Squad
function World_GetSquad(index) end

--- Returns a position that is offset a certain distance from the position/heading passed in. see ScarUtil.scar for explanation of 'offset' parameter.
--- @param position Position
--- @param heading Position
--- @param offset number
--- @param distance number
--- @return Position
function World_GetOffsetPosition(position, heading, offset, distance) end

--- Offsets the input position relative to the facing target
--- @param position Position
--- @param facingTarget Position
--- @param offset number
--- @return Position
function World_GetOffsetPositionRelativeToFacingTarget(position, facingTarget, offset) end

--- Returns a position that is offset from the input position by the offset vector rotated by the direction supplied
--- @param position Position
--- @param heading Position
--- @param offset Position
--- @return Position
function World_GetOffsetVectorPosition(position, heading, offset) end

--- Returns the player at a given index, numbers start at one
--- @param index number
--- @return Player
function World_GetPlayerAt(index) end

--- Return the total number of players in the world
--- @return number
function World_GetPlayerCount() end

--- Returns the player index given the Player*
--- @param player Player
--- @return number
function World_GetPlayerIndex(player) end

-- #region kicker message

--- Create a custom kicker message on the entity and display to the player, rgb values are 0-255.
--- @param player Player
--- @param position Position
--- @param message LocString
function UI_CreatePositionKickerMessage(player, position, message) end

--- Create a custom kicker message on the entity and display to the player, rgb values are 0-255.
--- @param player Player
--- @param entity Entity
--- @param message LocString
function UI_CreateEntityKickerMessage(player, entity, message) end

--- Create and display kicker message on the each entity in the egroup to the player
--- @param group EGroupID
--- @param message LocString
function EGroup_CreateKickerMessage(group, message) end

--- Create a custom kicker message on the entity and display to the player, rgb values are 0-255.
--- @param player Player
--- @param squad Squad
--- @param message LocString
function UI_CreateSquadKickerMessage(player, squad, message) end

--- Create a custom kicker message on the squad and display to the player.
--- @param player Player
--- @param sgroup SGroupID
--- @param message LocString
function UI_CreateSGroupKickerMessage(player, sgroup, message) end

--- Create and display kicker message on the each squad in the sgroup to the player
--- @param group SGroupID
--- @param player Player
--- @param message LocString
function SGroup_CreateKickerMessage(group, player, message) end

-- #endregion

--- Sends an instant upgrade command to a player, egroup or sgroup. accepts a single upgrade or table of upgrades.
--- @param target Player | EGroupID | SGroupID
--- @param blueprint Upgrade
--- @param count number | nil
function Cmd_InstantUpgrade(target, blueprint, count) end

---@return boolean
function UI_GetAllowLoadAndSave() end

---@param upgradeTypes nil|string[]
---@param all ALL | ANY
---@return Upgrade[]
function BP_GetUpgradeBlueprintsWithType_Internal(upgradeTypes, all) end

--- Enables or disables the silhouettes for squads / entities
--- @param unit Entity|EGroupID|Squad|SGroupID
--- @param enabled boolean
--- @return unknown
function UI_SetSilhouetteEnabled(unit, enabled) end

---@return string
function Game_GetScenarioFileName() end

---@param player Player
---@return table<string, Upgrade>
function Player_GetActiveUpgrades(player) end

--- Creates a blip on the minimap; return the ID of the blip.
--- 'where' can be an entity, marker, position, egroup, sgroup, or squad.
--- @param where any
--- @param lifetime number
--- @param blipDataTemplate string|'attack_here'|'defend_here'|'question_here'|'squad_killed'|'sniped'|'in_combat'|'low_priority'|'high_priority'|'revealed'
---@param blipRadius nil|number
--- @return number
function UI_CreateMinimapBlip(where, lifetime, blipDataTemplate, blipRadius) end


--- Clear the map icon facing value.
--- @param id number
function MapIcon_ClearFacing(id) end

--- Creates an arrow on the metamap between the two locations provided
--- @param position_from MarkerID | Pos
--- @param position_to MarkerID | Pos
--- @param red number
--- @param green number
--- @param blue number
--- @param alpha number
--- @return number
function MapIcon_CreateArrow(position_from, position_to, red, green, blue, alpha) end

--- Create a map icon targetting an entity.
--- @param entity Entity
--- @param icon string
--- @param scale number
--- @param red number
--- @param green number
--- @param blue number
--- @param alpha number
--- @return number
function MapIcon_CreateEntity(entity, icon, scale, red, green, blue, alpha) end

--- Create a map icon targetting a position.
--- @param position Position
--- @param icon string
--- @param scale number
--- @param red number
--- @param green number
--- @param blue number
--- @param alpha number
--- @return number
function MapIcon_CreatePosition(position, icon, scale, red, green, blue, alpha) end

--- Create a map icon targetting a squad.
--- @param squad Squad
--- @param icon string
--- @param scale number
--- @param red number
--- @param green number
--- @param blue number
--- @param alpha number
--- @return number
function MapIcon_CreateSquad(squad, icon, scale, red, green, blue, alpha) end

--- Remove a map icon.
--- @param id number
function MapIcon_Destroy(id) end

--- Remove all map icons.
function MapIcon_DestroyAll() end

--- Face the map icon towards this entity.
--- @param id number
--- @param entity Entity
function MapIcon_SetFacingEntity(id, entity) end

--- Face the map icon towards this position.
--- @param id number
--- @param position Position
function MapIcon_SetFacingPosition(id, position) end

--- Face the map icon towards this squad.
--- @param id number
--- @param squad Squad
function MapIcon_SetFacingSquad(id, squad) end

---@param delegateFunctionName string
---@vararg any
function Core_CallDelegateFunctions(delegateFunctionName, ...) end

--- Remove an applied modifier.
--- @param modifierId number
function Modifier_Remove(modifierId) end

--- Sets the availability of an ability. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT
--- @param player Player
--- @param bp Ability
--- @param availability userdata
function Player_SetAbilityAvailability(player, bp, availability) end

--- Sets the availability of a squad production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT
--- @param player Player
--- @param bp SquadPBG
--- @param availability userdata
function Player_SetSquadProductionAvailability(player, bp, availability) end

---@param bp EntityPBG
---@return {revert_time: number, capture_time: number}
function BP_GetEntityBPStrategicPointInfo(bp) end

--- Sends an ability command to a player, egroup or sgroup. extra parameters are provided if the ability requires them.
--- @param user Squad|SGroupID|EGroupID|Player
--- @param blueprint Ability
--- @param target? Position|SGroupID|EGroupID
--- @param direction? Position
--- @param skipCostPrereq? boolean
--- @param queued? boolean
function Cmd_Ability(user, blueprint, target, direction, skipCostPrereq, queued) end

---@param target Position|MarkerID|Entity|Squad|EGroupID|SGroupID
---@return Position
function Util_GetPosition(target) end

---@param entity Entity
---@return boolean
function Entity_IsInInteractiveArea(entity) end

---@param entity Entity
---@return number
function Entity_GetRadius(entity) end

--- Sets the availability of an upgrade. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT
--- @param player Player
--- @param bp Upgrade
--- @param availability number|userdata
function Player_SetUpgradeAvailability(player, bp, availability) end

---@param entity Entity
---@return boolean
function Entity_IsSpawner(entity) end

--- Returns an ability property bag group.
--- @param pbgShortname string
--- @return Ability
function BP_GetAbilityBlueprint(pbgShortname) end

--- Returns an ability property bag group.
--- @param pbgID number
--- @return Ability
function BP_GetAbilityBlueprintByPbgID(pbgID) end

--- Returns an entity property bag group.
--- @param pbgShortname string
--- @return EntityPBG
function BP_GetEntityBlueprint(pbgShortname) end

--- Returns an entity property bag group.
--- @param pbgID number
--- @return EntityPBG
function BP_GetEntityBlueprintByPbgID(pbgID) end

--- Returns a squad property bag group.
--- @param pbgShortname string
--- @return SquadPBG
function BP_GetSquadBlueprint(pbgShortname) end

--- Returns a squad property bag group.
--- @param pbgID string
--- @return SquadPBG
function BP_GetSquadBlueprintByPbgID(pbgID) end

--- Returns an upgrade property bag group.
--- @param pbgShortname string
--- @return Upgrade
function BP_GetUpgradeBlueprint(pbgShortname) end

--- Returns an upgrade property bag group.
--- @param pbgID number
--- @return Upgrade
function BP_GetUpgradeBlueprintByPbgID(pbgID) end

--- Precache entity resources and listen for event GE_EntityPrecached that it is done
--- callback example: Rule_AddGlobalEvent(EntityPrecacheComplete, GE_EntityPrecached) Params: ebp - entity blueprint skinID - this is the server item id for a skin, it will precache and equip it player - the player that we want to precache the entity or squad for cacheName - name of cache where resource will be loaded into source - helps identify who requested the precaching id - id to table of data that will be used once entity/squad is loaded
--- @param ebp EntityPBG
--- @param skinItemDefinitionID number
--- @param player Player
--- @param resourceContainerCacheName string
--- @param source string
--- @param id string
function Entity_Precache(ebp, skinItemDefinitionID, player, resourceContainerCacheName, source, id) end

--- Precache squad resources and listen for event GE_EntityPrecached that it is done
--- callback example: Rule_AddGlobalEvent(EntityPrecacheComplete, GE_SquadPrecached) Params: sbp - squad blueprint skinID - this is the server item id for a skin, it will precache and equip it player - the player that we want to precache the entity or squad for cacheName - name of cache where resource will be loaded into source - helps identify who requested the precaching id - id to table of data that will be used once entity/squad is loaded
--- @param sbp SquadPBG
--- @param skinItemDefinitionID number
--- @param player Player
--- @param resourceContainerCacheName string
--- @param source string
--- @param id string
function Squad_Precache(sbp, skinItemDefinitionID, player, resourceContainerCacheName, source, id) end


--- Returns all active upgrades this squad has.
--- @param squad Squad
--- @return table<string, Upgrade>
function Squad_GetActiveUpgrades(squad) end

--- Get a table of all of the EBPs that match a particular EntityType. You can pass in a table of multiple EntityTypes to get a list EBPs that match ANY of the types listed.
--- If you want a blueprint to match a bunch of EntityTypes at the same time (i.e. AND instead of OR) then those types should be listed together in a sub-table. This function can potentially be quite slow as it has to parse every EBP in the game, so be careful about how you use it.
--- @param types EntityType | table
--- @return EntityPBG[]
function BP_GetEntityBlueprintsWithType(types) end

--- Get a table of all of the SBPs that match a particular SquadType. You can pass in a table of multiple SquadTypes to get a list SBPs that match ANY of the types listed.
--- If you want a blueprint to match a bunch of SquadTypes at the same time (i.e. AND instead of OR) then those types should be listed together in a sub-table. This function can potentially be quite slow as it has to parse every SBP in the game, so be careful about how you use it.
--- @param types SquadType | table
--- @return SquadPBG[]
function BP_GetSquadBlueprintsWithType(types) end

--- Get a table of all of the UBPs that match a particular UpgradeType. You can pass in a table of multiple UpgradeTypes to get a list UBPs that match ANY of the types listed.
--- If you want a blueprint to match a bunch of UpgradeType at the same time (i.e. AND instead of OR) then those types should be listed together in a sub-table. This function can potentially be quite slow as it has to parse every SBP in the game, so be careful about how you use it.
--- @param types UpgradeType | table
--- @return Upgrade[]
function BP_GetUpgradesMatchingTypes(types) end

--- Enable or disable decorators on all entities in the egroup. Sets selection visuals as well unless enableSelection is specified.
--- @param group EGroupID
--- @param enable boolean
--- @param enableSelection boolean
function EGroup_EnableUIDecorator(group, enable, enableSelection) end

---@param squad Squad
---@return number[]
function Squad_GetVeterancyTable(squad) end

---Replaced UI_IsReplay
---@return boolean
function UI_IsLiveOrRecordedReplay() end

---@return Player
function UI_GetReplayOriginalLocalPlayer() end

---@return boolean
function UI_IsLiveOrRecordedReplayCasterModeWithSidesFlipped() end

---Used in win_tickets.scar "Ensure all clients have the same value": Misc_SyncCheckVariable("Player_".. World_GetPlayerIndex(player).."_Tickets", team.tickets)
---Unknown if this actually works.
---@param name string
---@param value any
function Misc_SyncCheckVariable(name, value) end

---@param ticket_meter_visible boolean
---@param vp_indicator_visible boolean
---@param game_timer_visible boolean
---@param game_timer_spacing number
function TicketUI_SetVisibility(ticket_meter_visible, vp_indicator_visible, game_timer_visible, game_timer_spacing) end

--- Returns a newly created marker with the given attributes [direction] is expecting a direction vector and not a position relative to [pos]
---@param name string
---@param type string
---@param pos Position
---@param direction Position
---@param radius number
---@return MarkerID
function Marker_Create(name, type, pos, direction, radius) end

--- Finds a marker in an entity, creates a SCAR marker there and returns the new marker's name.
--- Uses the MarkerExt to find a marker inside an entity. Creates a SCAR marker at the internal marker's location. Returns the new SCAR marker's name.
---@param entity Entity
---@param internalMarker string
---@param newMarker string
---@return MarkerID
function Marker_CreateMarkerFromEntityMarker(entity, internalMarker, newMarker) end

--- Delete this marker, only recommended for dynamically created markers
---@param marker MarkerID
function Marker_Destroy(marker) end

--- Returns true if a generic number attribute exists for the marker type.
---@param marker MarkerID
---@param name string
---@return boolean
function Marker_DoesNumberAttributeExist(marker, name) end

--- Returns true if a generic string attribute exists for the marker type.
---@param marker MarkerID
---@param name string
---@return boolean
function Marker_DoesStringAttributeExist(marker, name) end

--- Returns true if marker exists. If you don't care about the type, pass in an empty string ( "" )
---@param name string
---@param type string
---@return boolean
function Marker_Exists(name, type) end

--- Returns a ScarMarker from the Scenario Editor. If you don't care about the type, pass in an empty string ( "" )
--- The type is defined on the ScarMarkerBlueprint in the Scenario Editor\n
---@param name string
---@param type string
---@return MarkerID
function Marker_FromName(name, type) end

--- Returns a vector for the marker direction
---@param marker MarkerID
---@return Position
function Marker_GetDirection(marker) end

--- Returns the name of a given marker.  This value gets set in the Scenario Editor.
---@param marker MarkerID
---@return string
function Marker_GetName(marker) end

--- Returns a generic number attribute defined in a marker.
--- Different marker types have different attributes. Note: All marker types have Name and Proximity. Do not use this function to retrieve these values, use Marker_GetName and Marker_GetProximity instead.
---@param marker MarkerID
---@param name string
---@return number
function Marker_GetNumberAttribute(marker, name) end

--- Returns the position of a given marker.
---@param marker MarkerID
---@return Position
function Marker_GetPosition(marker) end

--- Returns the proximity dimensions of a given marker.  If non rectangular, default value is returned Dimensions are 2d but returned in 3d world space (terrain mapped to x,z) This value gets set in the Scenario Editor.
---@param marker MarkerID
---@param defaultWidth number
---@param defaultHeight number
---@return unknown
function Marker_GetProximityDimensionsOrDefault(marker, defaultWidth, defaultHeight) end

--- Returns the proximity radius of a given marker.  If non circular, default value is returned This value gets set in the Scenario Editor.
---@param marker MarkerID
---@return number
function Marker_GetProximityRadius(marker) end

--- Returns the proximity radius of a given marker.  If non circular, default value is returned This value gets set in the Scenario Editor.
---@param marker MarkerID
---@param defaultValue number
---@return number
function Marker_GetProximityRadiusOrDefault(marker, defaultValue) end

--- Returns a generic string attribute defined in a marker.
--- Different marker types can have different attributes.\n Note: All marker types have Name and Proximity. Do not use this function to retrieve these values, use Marker_GetName and Marker_GetProximity instead.\n See markertypes.lua for a listing of all the marker types.
---@param marker MarkerID
---@param name string
---@return string
function Marker_GetStringAttribute(marker, name) end

--- Returns the typename of a given marker. This is the typename from the Scenario Editor (name displayed when placing markers)
---@param marker MarkerID
---@return string
function Marker_GetType(marker) end

--- Returns if a marker has a defined (non-default) proximity range
---@param marker MarkerID
---@return boolean
function Marker_HasProximityRange(marker) end

--- Returns true if the given position is in the markers proximity radius or proximity rectangle (depending on the type).
---@param marker MarkerID
---@param pos Position
---@return boolean
function Marker_InProximity(marker, pos) end

--- Set the proximity shape of a marker to a circle with size radius
---@param marker MarkerID
---@param radius number
function Marker_SetProximityCircle(marker, radius) end

--- Set the proximity shape of a marker to point marker (no proximity)
---@param marker MarkerID
function Marker_SetProximityPoint(marker) end

--- Set the proximity shape of a marker to a rectangle with dimensions width and height
---@param marker MarkerID
---@param width number
---@param height number
function Marker_SetProximityRectangle(marker, width, height) end

--- Set animation event for an entity. Propagate to children setting follows sim animator tuning defaults.
---@param entity Entity
---@param eventName string
function Entity_SetAnimatorEvent(entity, eventName) end

--- Set animation event for an entity. Extended: Specifies whether to propagate to children.
---@param entity Entity
---@param eventName string
---@param propagateToChildren boolean
function Entity_SetAnimatorEventEx(entity, eventName, propagateToChildren) end

--- Set animation state of a state machine for an entity. Propagate to children setting follows sim animator tuning defaults.
---@param entity Entity
---@param stateMachineName string
---@param stateName string
function Entity_SetAnimatorState(entity, stateMachineName, stateName) end

--- Set animation state of a state machine for an entity. Extended: Specify whether it propagates to children, and whether to bypass dca value validation.
---@param entity Entity
---@param stateMachineName string
---@param stateName string
---@param propagateToChildren boolean
---@param bypassValidation boolean
function Entity_SetAnimatorStateEx(entity, stateMachineName, stateName, propagateToChildren, bypassValidation) end

--- Set animation variable value for an entity. Interpolates by default.
---@param entity Entity
---@param variableName string
---@param value number
function Entity_SetAnimatorVariable(entity, variableName, value) end

--- Set animation variable value for an entity. Extended: Specify whether to interpolate the variable, and whether to bypass dca value validation.
---@param entity Entity
---@param variableName string
---@param value number
---@param interpolate boolean
---@param bypassValidation boolean
function Entity_SetAnimatorVariableEx(entity, variableName, value, interpolate, bypassValidation) end

--- Finish upgrade for a player. uses PUR_Instant
---@param player Player
---@param upgrade Upgrade
function Player_CompleteUpgrade(player, upgrade) end

--- Extended: Finish upgrade for a player with additional parameters.
---@param player Player
---@param upgrade Upgrade
---@param upgradeRoute UpgradeRoute
function Player_CompleteUpgradeEx(player, upgrade, upgradeRoute) end

--- Return true if the entity can produce the specified upgrade.
---@param entity Entity
---@param upgrade Upgrade
function Entity_CanProduceUpgrade(entity, upgrade) end

--- Returns true if the upgrade can be added to the player right now. Ignores prerequisites and costs.
---@param player Player
---@param upgrade Upgrade
function Player_CanAddUpgrade(player, upgrade) end

--- Returns true if the upgrade can be produced by the player right now. Checks prerequisites and costs.
---@param player Player
---@param upgrade Upgrade
---@param ignoreAvailability boolean
function Player_CanProduceUpgrade( player, upgrade, ignoreAvailability) end

--- Returns all completed upgrades this player has.
---@param player Player
---@return Upgrade[]
function Player_GetCompletedUpgrades(player) end

--- Returns all upgrades this player has access to.
---@param player Player
---@return Upgrade[]
function Player_GetPossibleUpgrades(player) end

--- Returns true if a valid entry can be found at the given key.
---@param player Player
---@param key string
---@return boolean
function Player_HasStateModelPBG(player, key) end

--- Return true if the squad can produce the specified upgrade.
---@param squad Squad
---@param upgrade Upgrade
---@return boolean
function Squad_CanProduceUpgrade(squad, upgrade) end

--- You can pass in squad, entity or position, unlike other kicker message API that are target type specific
--- you can customize duration of the kicker, and the look of the kicker via the data template and icon / symbol
---@param player Player
---@param pos Position|Entity|Squad
---@param message LocString
---@param durationSeconds number
---@param icon string e.g. "icons\common\resources\resource_munition"
---@param symbol string
---@param dataTemplate string e.g. "supply_truck_reward" "status_neutral"
---@param teamOnly boolean
---@return number
function UI_CreateCustomKickerMessage(player, pos, message, durationSeconds, icon, symbol, dataTemplate, teamOnly) end
