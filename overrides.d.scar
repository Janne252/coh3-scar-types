---@meta declaration-overrides

---@param filepath string
---Built-in method of importing SCAR files relative to the DATA:\scar folder (across all .SGAs)
function import(filepath) end

--- Create a table that will be interpreted as a data context for UI properties.
---@param table table
--- @return unknown
function UI_CreateDataContext(table) end

--- Create a table that will be interpreted as a command for UI properties.
--- @param cmd string
--- @return unknown
function UI_CreateCommand(cmd) end

---@alias ResourceType number

---@type ResourceType
RT_Manpower = 0
---@type ResourceType
RT_Fuel = 0
---@type ResourceType
RT_Munition = 0
---@type ResourceType
RT_Command = 0
---@type ResourceType
RT_Action = 0

---@alias PBGType number

---@type PBGType
PBGTYPE_Entity = 0
---@type PBGType
PBGTYPE_Squad = 0
---@type PBGType
PBG_Race = 0
---@type PBGType
PBG_Ability = 0
---@type PBGType
PBGTYPE_Upgrade = 0
---@type PBGType
PBG_Weapon = 0

---@alias OwnerType number
---@type OwnerType
OT_Player = 0
---@type OwnerType
OT_Ally = 0
---@type OwnerType
OT_Enemy = 0
---@type OwnerType
OT_Neutral = 0

---@class LocString : table

---@param team TeamID
---@return TeamID
function Team_GetEnemyTeam(team) end

--? @shortdesc Converts a colour table to an ARGB hex string (e.g. {a=0, r=255, g=204, b=136} => #00FFCC88).
---@param color table
---@return string
function UI_GetColourAsString(color) end

---@param message  string
function fatal(message) end

--- Use capType CT_Personnel to get max squad cap or CT_VehicleCap to get max vehicle cap.
---@param player Player
---@param capType CapType
---@return number
function Player_GetMaxPopulation(player, capType) end


---@param locId string | number | LocString
---@return string
function Loc_ToAnsi(locId) end

---@class UIInfo
---Icon names are WITHOUT .png extension
---@field helpText LocString
---@field revealDecrypt boolean
---@field screenNameShort LocString
---@field extraTextWorld LocString
---@field tooltipDataTemplate string
---@field iconName string
---@field helpTextWorld LocString
---@field debugText string
---@field briefText LocString
---@field iconAlternateName string
---@field hotkeyName string
---@field extraText LocString
---@field screenName LocString
---@field screenNameWorld LocString
---@field portraitIconName string
---@field symbolIconName string
---@field showInBuildLog boolean
---@field uiCombineType userdata
---@field screenNameAlternate LocString
---@field helpTextAlternate LocString

---@class SquadPBG : userdata

---@param sbp SquadPBG
---@param raceBP ScarRacePBG
---@return UIInfo
function BP_GetSquadUIInfo(sbp, raceBP) end

---@param ebp EntityPBG
---@return UIInfo
function BP_GetEntityUIInfo(ebp) end

---@param ability  Ability
---@return UIInfo
function BP_GetAbilityUIInfo(ability) end

---@param blueprint  string
---@return ScarRacePBG
function World_GetRaceBlueprint(blueprint) end


---@class RaceInfo
---Icon names are WITHOUT .png extension
---@field name LocString
---@field icon string
---@field faction_type number
---@field loadout table
---@field flag_icon string
---@field image string
---@field image_small string
---@field icon_secondary string
---@field path_name string
---@field name_abbreviated LocString

---@param raceBP ScarRacePBG
---@return RaceInfo
function BP_GetRaceInfo(raceBP) end


---@param entity Entity
---@param extension string
---@return boolean
function Entity_ExtensionExist(entity, extension) end


--- Sends a stop command to egroup or sgroup.
--- @param group EGroupID | SGroupID
--- @return unknown
function Cmd_Stop(group) end

---@param techtree_type  string
---@return PBG
function BP_GetTechTreeBlueprintsByType(techtree_type) end

---@class TEchTreeInfo
---@field activation_upgrade Upgrade
---@field branches TechTreeBranch[]
---@field name LocString

---@class TechTreeBranch
---@field upgrades Upgrade[]

---@param pbg PBG
---@return TEchTreeInfo
function BP_GetTechTreeBPInfo(pbg) end

---@param types string[]
---@param all boolean
---@return EntityPBG[]
function BP_GetEntityBlueprintsWithType_Internal(types, all) end

---@param types string[]
---@param all boolean
---@return SquadPBG[]
function BP_GetSquadBlueprintsWithType_Internal(types, all) end

--? @shortdesc Creates a reticule drawn on the ground
--? @extdesc 'target' can be an entity, marker, position, or squad.
--? @args StackVar target, float radius, BP reticuleBP
--? @result reticuleID
---@param target Entity | Marker | Position | Squad
---@param radius number
---@param reticuleBP PBG
---@return number
function UI_CreateReticule(target, radius, reticuleBP) end

---@param entity Entity
---@param reticuleBP PBG
---@return number
function UI_CreateReticuleOnEntity(entity, radius, reticuleBP) end

---@param position Position
---@param radius number
---@param reticuleBP PBG
---@return number
function UI_CreateReticuleOnPosition(position, radius, reticuleBP) end

---@param squad Squad
---@param radius number
---@param reticuleBP PBG
---@return number
function UI_CreateReticuleOnSquad(squad, radius, reticuleBP) end

---@param id number
function UI_DestroyReticule(id) end

---@class _UI_CreateTargetTrackingTagDataContext : table
---@field DataTemplate string x:Key of the template, see DATA\ui\resources\tagresources.xaml and DATA\ui\hud\pages\hudpage.xaml
---@param target Entity | Squad | Position
---@param lifetime_seconds number
---@param template _UI_CreateTargetTrackingTagDataContext 
function UI_CreateTargetTrackingTag(target, lifetime_seconds, template) end

---@param ebp EntityPBG
---@param pos Position
---@param unknown_boolean_true true
---@return Entity
function Entity_CreateENV(ebp, pos, unknown_boolean_true) end


---@param ebp EntityPBG
---@param player Player
---@param pos Position
---@param unknown_boolean_true true
---@return Entity
function Entity_Create(ebp, player, pos, unknown_boolean_true) end

---First index = 0, last index = return value - 1.
---@returns integer
function World_GetNumEntities() end

---@param index integer ZERO based index.
---@return Entity
function World_GetEntity(index) end

-- FormatID can also be string, e.g. "$<modGUID>:<locID>"
--- Returns a formatted localized string.
--- Use this function to format localized text. ie %1PLAYERNAME% is going to win. It accepts up to 9 additional values as parameters.
--- @param FormatID number | string | LocString
--- @vararg string | number | LocString
--- @return LocString
function Loc_FormatText(FormatID, ...) end

--- Create a squad, spawn it and assign it to a player.
--- This will create a squad of size 'loadoutCount' and of unit type 'unit_base' (from squad blueprint)\n Note: loadoutCount will be clipped to loadoutMin and loadoutMax from the squad blueprint. A loudoutCount of zero means create the whole squad as is.
--- @param sbp SquadPBG
--- @param player Player
--- @param loadoutCount number
--- @param pos Position
--- @param toward Position
--- @return Squad
function Squad_CreateAndSpawnToward(sbp, player, loadoutCount, pos, toward) end

--- Creates a hintpoint attached to a Marker, EGroup, SGroup or position
--- If range is set to 0, then the hintpoint is rangeless, see the design document for rangeless features. The following types of hintpoint actions are available. HPAT_Objective HPAT_Hint HPAT_Critical HPAT_Movement HPAT_Attack HPAT_FormationSetup HPAT_RallyPoint HPAT_DeepSnow HPAT_CoverGreen HPAT_CoverYellow HPAT_CoverRed HPAT_Detonation HPAT_Vaulting
--- @param where any
--- @param bVisible boolean
--- @param hintText LocString
--- @param height number | nil
--- @param actionType HintPointActionType | number | nil
--- @param iconName string | nil
--- @param priority number | nil
--- @param visibleInFOW boolean | nil
--- @param dataTemplate string | nil
--- @return unknown
function HintPoint_Add(where, bVisible, hintText, height, actionType, iconName, priority, visibleInFOW, dataTemplate) end

--- Modifies a player's incoming resource rate. Possible math types are MUT_Multiplication, MUT_Addition.
--- @param playerId Player
--- @param resourceType ResourceType | number
--- @param scalefactor number
--- @param mathtype ModifierUsageType | number | nil
--- @return unknown
function Modify_PlayerResourceRate(playerId, resourceType, scalefactor, mathtype) end

--- Modifies the recharge time of an ability
--- @param player_entity_squad Player | Entity | Squad
--- @param ability Ability
--- @param scalefactor number
--- @param mathtype ModifierUsageType | number | nil
--- @return unknown
function Modify_AbilityRechargeTime(player_entity_squad, ability, scalefactor, mathtype) end

--- Add a rule to be executed when the event of 'eventType' has happened, regardless of source
--- Event types are: GE_PlayerBeingAttacked
--- @param rule function
--- @param eventtype SimulationEventType | number
--- @return unknown
function Rule_AddGlobalEvent(rule, eventtype) end


--- Add a rule to be executed when the event of 'eventType' has happened on the 'player'
--- Event types are: GE_PlayerBeingAttacked, GE_PlayerCommandIssued, GE_AbilityExecuted, GE_UpgradeComplete, GE_ConstructionComplete, GE_BuildItemComplete, GE_PlayerKilled, GE_SpawnActionComplete, GE_AIPlayer_EncounterNotification
--- @param rule function
--- @param player Player
--- @param eventtype SimulationEventType | number
--- @return unknown
function Rule_AddPlayerEvent(rule, player, eventtype) end

--- Return the short name of the group
--- Example name would be "ally_mad_minute_ability"
--- @param pbg PropertyBagGroup | Ability
--- @return unknown
function BP_GetName(pbg) end

--- Returns true if an ability blueprint exists with the given name.
--- @param pbgShortname string
--- @return boolean
function BP_AbilityExists(pbgShortname) end

--- Returns true if an upgrade blueprint exists with the given name.
--- @param pbgShortname string
--- @return boolean
function BP_UpgradeExists(pbgShortname) end
